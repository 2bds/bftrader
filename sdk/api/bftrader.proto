syntax = "proto3";

// option optimize_for = CODE_SIZE;
option cc_enable_arenas = true;

package bftrader;

//============================

// 方向常量
enum BfDirection{
    DIRECTION_UNKNOWN = 0;  // 未知
    DIRECTION_LONG = 1;     // 多
    DIRECTION_SHORT = 2;    // 空
    DIRECTION_NET = 3;      // 净
}

// 开平常量
enum BfOffset{
    OFFSET_UNKNOWN = 0;         // 未知
    OFFSET_OPEN = 1;            // 开仓
    OFFSET_CLOSE = 2;           // 平仓
    OFFSET_CLOSETODAY = 3;      // 平今
    OFFSET_CLOSEYESTERDAY = 4;  // 平昨
}

// 状态常量
enum BfStatus{
    STATUS_UNKNOWN = 0;         // 未知
    STATUS_NOTTRADED = 1;       // 未成交
    STATUS_PARTTRADED = 2;      // 部分成交
    STATUS_ALLTRADED = 3;       // 全部成交
    STATUS_CANCELLED = 4;       // 已撤销
}

// 合约类型常量
enum BfProduct{
    PRODUCT_UNKNOWN = 0;        // 未知
    PRODUCT_EQUITY = 1;         // 股票
    PRODUCT_FUTURES = 2;        // 期货
}

// 价格类型常量
enum BfPriceType{
    PRICETYPE_UNKONWN = 0;      // 未知
    PRICETYPE_LIMITPRICE = 1;   // 限价
    PRICETYPE_MARKETPRICE = 2;  // 市价
}

// 交易所类型
enum BfExchange{
    EXCHANGE_UNKNOWN = 0;       // UNKNOWN,未知交易所
    EXCHANGE_SSE = 1;           // SSE,上交所
    EXCHANGE_SZSE = 2;          // SZSE,深交所
    EXCHANGE_CFFEX = 3;         // CFFEX,中金所
    EXCHANGE_SHFE = 4;          // SHFE,上期所
    EXCHANGE_CZCE = 5;          // CZCE,郑商所
    EXCHANGE_DCE = 6;           // DCE,大商所
    EXCHANGE_SGE = 7;           // SGE,上金所
}

// Bar周期类型
enum BfPeriod{
    PERIOD_UNKNOWN = 0;         // 未知
    PERIOD_M1 = 1;              // 1分钟
    PERIOD_D1 = 2;              // 1天
}

//============================

// 空参数
message BfVoid{
}

//============================
// 常规行情数据类
message BfDailyInfo{
    double openPrice = 1;       // 今日开盘价
    double highPrice = 2;       // 今日最高价
    double lowPrice = 3;        // 今日最低价
    double preClosePrice = 4;   // 昨日收盘价
    double upperLimit = 5;      // 涨停价
    double lowerLimit = 6;      // 跌停价
}

// x档行情
message BfBidAskInfo{
    double bidPrice = 1;        // 买价
    double askPrice = 2;        // 卖价
    int32 bidVolume = 3;        // 买量
    int32 askVolume = 4;        // 卖量
}

// OHLC
message BfOHLCInfo{
    double openPrice = 1;       // 开盘价
    double highPrice = 2;       // 最高价
    double lowPrice = 3;        // 最低价
    double closePrice = 4;      // 收盘价
}
    
// Tick行情数据类
message BfTickData{

    // 代码相关
    string symbol = 1;          // 合约代码
    string exchange = 2;        // 交易所代码
    
    // 成交数据
    string date = 3;            // 日期 20151009
    string time = 4;            // 时间 11:20:56.500
    double lastPrice = 5;       // 最新成交价
    int32 volume = 6;           // 今天总成交量
    double openInterest = 7;    // 今天总持仓量
    int32 lastVolume = 8;       // 最新成交量，本笔增减，无法计算时用1代替

    // x档行情
    repeated BfBidAskInfo bidaskInfo = 9;  

    // 常规行情
    BfDailyInfo dailyInfo = 10;  
}

// 1分钟的tick集合
message BfTickPackData{
    // 代码相关
    string symbol = 1;          // 合约代码
    string exchange = 2;        // 交易所代码
    
    string date = 3;            // 日期 20151009
    string time = 4;            // 时间 11:20:56.500

    // Tick集合
    repeated BfTickData ticks = 5;
}

// Bar行情数据类
message BfBarData{

    // 代码相关
    string symbol = 1;          // 合约代码
    string exchange = 2;        // 交易所代码

    // 周期   
    BfPeriod period = 3;       
    
    // 成交数据
    string date = 4;            // 日期 20151009
    string time = 5;            // 时间 11:20:56.500
    int32 volume = 6;           // 今天总成交量
    double openInterest = 7;    // 持仓量
    int32 lastVolume = 8;       // 最新成交量，本笔增减
    
    // OHLC
    BfOHLCInfo ohlcInfo = 9; 

    // 常规行情
    BfDailyInfo dailyInfo = 10; 
}

// 成交数据类
message BfTradeData{
    
    // 代码编号相关
    string symbol = 1;          // 合约代码
    string exchange = 2;        // 交易所代码

    int32 tradeId = 3;          // 成交编号,是本地自己分配的
    int32 orderId = 4;          // 订单编号,是本地自己分配的
    
    // 成交相关
    BfDirection direction = 5;  // 成交方向
    BfOffset offset =  6;       // 成交开平仓
    double price = 7;           // 成交价格
    int32 volume = 8;           // 成交数量
    string tradeTime = 9;       // 成交时间
}

// 订单数据类
message BfOrderData{

    // 代码编号相关
    string symbol = 1;          // 合约代码
    string exchange = 2;        // 交易所代码
    
    int32 orderId = 3;          // 订单编号,是本地自己分配的
    
    // 报单相关
    BfDirection direction = 4;  // 报单方向
    BfOffset offset = 5;        // 报单开平仓
    double price = 6;           // 报单价格
    int32 totalVolume = 7;      // 报单总数量
    int32 tradedVolume = 8;     // 报单成交数量
    BfStatus status = 9;        // 报单状态
    
    string orderTime = 10;      // 发单时间
    string cancelTime = 11;     // 撤单时间
    
    int32 frontID = 12;         // 前置机号,Ctp/Lts
    int32 sessionID =  13;      // 会话号,Ctp/Lts 
}

// 持仓数据类
message BfPositionData{

    // 代码编号相关
    string symbol = 1;          // 合约代码
    string exchange = 2;        // 交易所代码

    // 持仓相关
    BfDirection direction = 3;  // 持仓方向
    int32 position = 4;         // 持仓量
    int32 frozen = 5;           // 冻结数量
    double price = 6;           // 持仓均价
    int32 ydPosition = 7;       // 昨持仓
}

// 账户数据类
message BfAccountData{

    // 账号代码相关
    string accountId = 1;       // 账户代码
    
    // 数值相关
    double preBalance = 2;      // 昨日账户结算净值
    double balance = 3;         // 账户净值
    double available = 4;       // 可用资金
    double commission = 5;      // 今日手续费
    double frozenMargin = 6;    // 保证金占用
    double closeProfit = 7;     // 平仓盈亏
    double positionProfit = 8;  // 持仓盈亏
}

// 错误数据类
message BfErrorData{

    string errorId = 1;         // 错误代码
    string errorMsg = 2;        // 错误信息
    string additionalInfo = 3;  // 补充信息
}

// 日志数据类
message BfLogData{

    string logTime = 1;         // 日志生成时间
    string logContent = 2;      // 日志信息
}

// 合约详细信息类
message BfContractData{

    // 代码编号相关
    string symbol = 1;          // 合约代码
    string exchange = 2;        // 交易所代码
    string name = 3;            // 合约中文名-utf8
    
    BfProduct productClass = 4; // 合约类型
    int32 volumeMultiple = 5;   // 合约数量乘数
    double priceTick = 6;       // 合约最小价格TICK
    
    int32 maxLimit = 7;         // 限价单最大下单量
    int32 minLimit = 8;         // 限价单最小下单量
    int32 maxMarket = 9;        // 市价单最大下单量
    int32 minMartet = 10;       // 市价单最小下单量
}

// K/V数据交换传入传出的数据类
message BfKvData{

    //kv对
    string key = 1;
    string value = 2;
}

// 订阅行情时传入的对象类
message BfSubscribeReq{

    // 代码编号相关
    string symbol = 1;          // 合约代码
    string exchange = 2;        // 交易所代码    
}

// 发单时传入的对象类
message BfOrderReq{

    // 代码编号相关
    string symbol = 1;          // 合约代码
    string exchange = 2;        // 交易所代码
    
    double price = 3;           // 价格
    int32 volume = 4;           // 数量
    BfPriceType priceType = 5;  // 价格类型
    BfDirection direction = 6;  // 买卖
    BfOffset offset = 7;        // 开平
    
}

// 发单本地返回的对象类
message BfOrderResp{
    int32 orderId = 1;          // 报单号,是本地自己分配的
}

// 撤单时传入的对象类
message BfCancelOrderReq{

    // 代码编号相关
    string symbol = 1;          // 合约代码
    string exchange = 2;        // 交易所代码
    
    int32 orderId = 3;          // 报单号,是本地自己分配的
    int32 frontID = 4;          // 前置机号,Ctp/Lts
    int32 sessionID = 5;        // 会话号,Ctp/Lts 
}

// 连接时传入的对象类
message BfConnectReq{
    
    // Robot相关
    string robotId = 1;         // 策略名,用于日志分析和ui显示
    string robotIp = 2;         // 机器人服务,"localhost"
    int32 robotPort = 3;        // 机器人端口,50053    
}

// 连接时返回的对象类
message BfConnectResp{
    bool exchangeOpened = 1;    // 交易所是否连通
}

// 获取合约信息传入的对象类
message BfGetContractReq{
    // 代码编号相关
    string symbol = 1;          // 合约代码
    string exchange = 2;        // 交易所代码
}

//============================

// 获取历史Tick数据的对象类（1分钟整存整取）
message BfGetTickPackReq{
    // 代码编号相关
    string symbol = 1;              // 合约代码
    string exchange = 2;            // 交易所代码

    string toDate = 3;              // 截止日期
    string toTime = 4;              // 截止时间
    int32 count = 5;                // 获取条数
}

// 获取历史Bar数据的对象类
message BfGetBarReq{
    // 代码编号相关
    string symbol = 1;              // 合约代码
    string exchange = 2;            // 交易所代码

    BfPeriod period = 3;            // 周期
    string toDate = 4;              // 截止日期
    string toTime = 5;              // 截止时间
    int32 count = 6;                // 获取条数
}
