// Code generated by protoc-gen-go.
// source: bfrobot.proto
// DO NOT EDIT!

/*
Package bftrader_bfrobot is a generated protocol buffer package.

It is generated from these files:
	bfrobot.proto

It has these top-level messages:
*/
package bftrader_bfrobot

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import bftrader "."

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion1

// Client API for BfRobotService service

type BfRobotServiceClient interface {
	// 行情回报
	OnTick(ctx context.Context, in *bftrader.BfTickData, opts ...grpc.CallOption) (*bftrader.BfVoid, error)
	// 命令/回报错误
	OnError(ctx context.Context, in *bftrader.BfErrorData, opts ...grpc.CallOption) (*bftrader.BfVoid, error)
	// 日志回调，目前没有使用
	// 官网端日志统一在gateway的ui里面显示：交易日志和系统日志
	// robot端日志，通过strategy::onlog来输出，如警告 调试=
	OnLog(ctx context.Context, in *bftrader.BfLogData, opts ...grpc.CallOption) (*bftrader.BfVoid, error)
	// 成交回报
	OnTrade(ctx context.Context, in *bftrader.BfTradeData, opts ...grpc.CallOption) (*bftrader.BfVoid, error)
	// 委托回报
	OnOrder(ctx context.Context, in *bftrader.BfOrderData, opts ...grpc.CallOption) (*bftrader.BfVoid, error)
	// 合约信息回报，目前没有使用，请使用BfGateway.GetContractList
	OnContract(ctx context.Context, in *bftrader.BfContractData, opts ...grpc.CallOption) (*bftrader.BfVoid, error)
	// 持仓回报
	OnPosition(ctx context.Context, in *bftrader.BfPositionData, opts ...grpc.CallOption) (*bftrader.BfVoid, error)
	// 账号信息回报
	OnAccount(ctx context.Context, in *bftrader.BfAccountData, opts ...grpc.CallOption) (*bftrader.BfVoid, error)
	// 收盘通知
	OnTradeClosed(ctx context.Context, in *bftrader.BfVoid, opts ...grpc.CallOption) (*bftrader.BfVoid, error)
}

type bfRobotServiceClient struct {
	cc *grpc.ClientConn
}

func NewBfRobotServiceClient(cc *grpc.ClientConn) BfRobotServiceClient {
	return &bfRobotServiceClient{cc}
}

func (c *bfRobotServiceClient) OnTick(ctx context.Context, in *bftrader.BfTickData, opts ...grpc.CallOption) (*bftrader.BfVoid, error) {
	out := new(bftrader.BfVoid)
	err := grpc.Invoke(ctx, "/bftrader.bfrobot.BfRobotService/OnTick", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bfRobotServiceClient) OnError(ctx context.Context, in *bftrader.BfErrorData, opts ...grpc.CallOption) (*bftrader.BfVoid, error) {
	out := new(bftrader.BfVoid)
	err := grpc.Invoke(ctx, "/bftrader.bfrobot.BfRobotService/OnError", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bfRobotServiceClient) OnLog(ctx context.Context, in *bftrader.BfLogData, opts ...grpc.CallOption) (*bftrader.BfVoid, error) {
	out := new(bftrader.BfVoid)
	err := grpc.Invoke(ctx, "/bftrader.bfrobot.BfRobotService/OnLog", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bfRobotServiceClient) OnTrade(ctx context.Context, in *bftrader.BfTradeData, opts ...grpc.CallOption) (*bftrader.BfVoid, error) {
	out := new(bftrader.BfVoid)
	err := grpc.Invoke(ctx, "/bftrader.bfrobot.BfRobotService/OnTrade", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bfRobotServiceClient) OnOrder(ctx context.Context, in *bftrader.BfOrderData, opts ...grpc.CallOption) (*bftrader.BfVoid, error) {
	out := new(bftrader.BfVoid)
	err := grpc.Invoke(ctx, "/bftrader.bfrobot.BfRobotService/OnOrder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bfRobotServiceClient) OnContract(ctx context.Context, in *bftrader.BfContractData, opts ...grpc.CallOption) (*bftrader.BfVoid, error) {
	out := new(bftrader.BfVoid)
	err := grpc.Invoke(ctx, "/bftrader.bfrobot.BfRobotService/OnContract", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bfRobotServiceClient) OnPosition(ctx context.Context, in *bftrader.BfPositionData, opts ...grpc.CallOption) (*bftrader.BfVoid, error) {
	out := new(bftrader.BfVoid)
	err := grpc.Invoke(ctx, "/bftrader.bfrobot.BfRobotService/OnPosition", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bfRobotServiceClient) OnAccount(ctx context.Context, in *bftrader.BfAccountData, opts ...grpc.CallOption) (*bftrader.BfVoid, error) {
	out := new(bftrader.BfVoid)
	err := grpc.Invoke(ctx, "/bftrader.bfrobot.BfRobotService/OnAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bfRobotServiceClient) OnTradeClosed(ctx context.Context, in *bftrader.BfVoid, opts ...grpc.CallOption) (*bftrader.BfVoid, error) {
	out := new(bftrader.BfVoid)
	err := grpc.Invoke(ctx, "/bftrader.bfrobot.BfRobotService/OnTradeClosed", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BfRobotService service

type BfRobotServiceServer interface {
	// 行情回报
	OnTick(context.Context, *bftrader.BfTickData) (*bftrader.BfVoid, error)
	// 命令/回报错误
	OnError(context.Context, *bftrader.BfErrorData) (*bftrader.BfVoid, error)
	// 日志回调，目前没有使用
	// 官网端日志统一在gateway的ui里面显示：交易日志和系统日志
	// robot端日志，通过strategy::onlog来输出，如警告 调试=
	OnLog(context.Context, *bftrader.BfLogData) (*bftrader.BfVoid, error)
	// 成交回报
	OnTrade(context.Context, *bftrader.BfTradeData) (*bftrader.BfVoid, error)
	// 委托回报
	OnOrder(context.Context, *bftrader.BfOrderData) (*bftrader.BfVoid, error)
	// 合约信息回报，目前没有使用，请使用BfGateway.GetContractList
	OnContract(context.Context, *bftrader.BfContractData) (*bftrader.BfVoid, error)
	// 持仓回报
	OnPosition(context.Context, *bftrader.BfPositionData) (*bftrader.BfVoid, error)
	// 账号信息回报
	OnAccount(context.Context, *bftrader.BfAccountData) (*bftrader.BfVoid, error)
	// 收盘通知
	OnTradeClosed(context.Context, *bftrader.BfVoid) (*bftrader.BfVoid, error)
}

func RegisterBfRobotServiceServer(s *grpc.Server, srv BfRobotServiceServer) {
	s.RegisterService(&_BfRobotService_serviceDesc, srv)
}

func _BfRobotService_OnTick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(bftrader.BfTickData)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BfRobotServiceServer).OnTick(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _BfRobotService_OnError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(bftrader.BfErrorData)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BfRobotServiceServer).OnError(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _BfRobotService_OnLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(bftrader.BfLogData)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BfRobotServiceServer).OnLog(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _BfRobotService_OnTrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(bftrader.BfTradeData)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BfRobotServiceServer).OnTrade(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _BfRobotService_OnOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(bftrader.BfOrderData)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BfRobotServiceServer).OnOrder(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _BfRobotService_OnContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(bftrader.BfContractData)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BfRobotServiceServer).OnContract(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _BfRobotService_OnPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(bftrader.BfPositionData)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BfRobotServiceServer).OnPosition(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _BfRobotService_OnAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(bftrader.BfAccountData)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BfRobotServiceServer).OnAccount(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _BfRobotService_OnTradeClosed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(bftrader.BfVoid)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BfRobotServiceServer).OnTradeClosed(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _BfRobotService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bftrader.bfrobot.BfRobotService",
	HandlerType: (*BfRobotServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OnTick",
			Handler:    _BfRobotService_OnTick_Handler,
		},
		{
			MethodName: "OnError",
			Handler:    _BfRobotService_OnError_Handler,
		},
		{
			MethodName: "OnLog",
			Handler:    _BfRobotService_OnLog_Handler,
		},
		{
			MethodName: "OnTrade",
			Handler:    _BfRobotService_OnTrade_Handler,
		},
		{
			MethodName: "OnOrder",
			Handler:    _BfRobotService_OnOrder_Handler,
		},
		{
			MethodName: "OnContract",
			Handler:    _BfRobotService_OnContract_Handler,
		},
		{
			MethodName: "OnPosition",
			Handler:    _BfRobotService_OnPosition_Handler,
		},
		{
			MethodName: "OnAccount",
			Handler:    _BfRobotService_OnAccount_Handler,
		},
		{
			MethodName: "OnTradeClosed",
			Handler:    _BfRobotService_OnTradeClosed_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 239 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0xd2, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0xc6, 0x71, 0x8b, 0x5a, 0x71, 0xa0, 0xa5, 0x8c, 0x8a, 0xd2, 0xa3, 0x0f, 0x10, 0xa4, 0x2a,
	0x88, 0x37, 0x53, 0xbd, 0x09, 0x2b, 0x5a, 0xbc, 0x27, 0x9b, 0x5d, 0x59, 0x94, 0x19, 0x99, 0xae,
	0xde, 0x7d, 0x6b, 0x8f, 0x26, 0x4b, 0x1a, 0x36, 0xd8, 0xcd, 0xf5, 0x37, 0xdf, 0x9f, 0x85, 0x10,
	0x98, 0x94, 0x56, 0xb8, 0x64, 0x9f, 0x7d, 0x0a, 0x7b, 0xc6, 0x59, 0x69, 0xbd, 0x14, 0x95, 0x91,
	0xac, 0xf5, 0xf9, 0xb4, 0x93, 0xb0, 0x58, 0xfc, 0xec, 0xc1, 0x34, 0xb7, 0xcf, 0xcd, 0xed, 0xc5,
	0xc8, 0xb7, 0xd3, 0x06, 0x17, 0x30, 0x56, 0xb4, 0x72, 0xfa, 0x1d, 0x8f, 0xb3, 0x6e, 0x9d, 0xdb,
	0x46, 0xee, 0x0b, 0x5f, 0xcc, 0x67, 0xb1, 0xbe, 0xb2, 0xab, 0xce, 0x77, 0xf0, 0x0a, 0x0e, 0x14,
	0x3d, 0x88, 0xb0, 0xe0, 0x49, 0x7c, 0x0e, 0x94, 0xac, 0x2e, 0x60, 0x5f, 0xd1, 0x23, 0xbf, 0xe1,
	0x51, 0x7c, 0xac, 0x61, 0xf8, 0x9d, 0x55, 0x83, 0xfd, 0x77, 0x02, 0x0d, 0x57, 0x4a, 0x6a, 0xeb,
	0x57, 0x81, 0x92, 0xd5, 0x2d, 0x80, 0xa2, 0x25, 0x53, 0xed, 0xda, 0xe3, 0x59, 0xbc, 0xd8, 0xe8,
	0x70, 0xfb, 0xc4, 0x6b, 0xe7, 0x1d, 0x53, 0xbf, 0xdd, 0x68, 0xb2, 0xbd, 0x81, 0x43, 0x45, 0x77,
	0x5a, 0xf3, 0x17, 0x79, 0x3c, 0x8d, 0x07, 0x2d, 0x26, 0xcb, 0x6b, 0x98, 0xb4, 0x5f, 0x67, 0xf9,
	0xc1, 0x6b, 0x53, 0xe1, 0xbf, 0xd1, 0xb6, 0x2c, 0xdf, 0xfd, 0x1d, 0x8d, 0xca, 0x71, 0xf8, 0x1f,
	0x2e, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x94, 0x27, 0xc3, 0x66, 0x42, 0x02, 0x00, 0x00,
}
