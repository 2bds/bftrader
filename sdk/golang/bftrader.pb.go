// Code generated by protoc-gen-go.
// source: bftrader.proto
// DO NOT EDIT!

/*
Package bftrader is a generated protocol buffer package.

It is generated from these files:
	bftrader.proto

It has these top-level messages:
	BfVoid
	BfTickData
	BfTradeData
	BfOrderData
	BfPositionData
	BfAccountData
	BfErrorData
	BfLogData
	BfContractData
	BfSubscribeReq
	BfSendOrderReq
	BfSendOrderResp
	BfCancelOrderReq
	BfConnectReq
	BfConnectResp
	BfGetContractReq
	BfPingData
*/
package bftrader

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

// 方向常量
type BfDirection int32

const (
	BfDirection_DIRECTION_UNKNOWN BfDirection = 0
	BfDirection_DIRECTION_LONG    BfDirection = 1
	BfDirection_DIRECTION_SHORT   BfDirection = 2
	BfDirection_DIRECTION_NET     BfDirection = 3
)

var BfDirection_name = map[int32]string{
	0: "DIRECTION_UNKNOWN",
	1: "DIRECTION_LONG",
	2: "DIRECTION_SHORT",
	3: "DIRECTION_NET",
}
var BfDirection_value = map[string]int32{
	"DIRECTION_UNKNOWN": 0,
	"DIRECTION_LONG":    1,
	"DIRECTION_SHORT":   2,
	"DIRECTION_NET":     3,
}

func (x BfDirection) String() string {
	return proto.EnumName(BfDirection_name, int32(x))
}
func (BfDirection) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// 开平常量
type BfOffset int32

const (
	BfOffset_OFFSET_UNKNOWN        BfOffset = 0
	BfOffset_OFFSET_OPEN           BfOffset = 1
	BfOffset_OFFSET_CLOSE          BfOffset = 2
	BfOffset_OFFSET_CLOSETODAY     BfOffset = 3
	BfOffset_OFFSET_CLOSEYESTERDAY BfOffset = 4
)

var BfOffset_name = map[int32]string{
	0: "OFFSET_UNKNOWN",
	1: "OFFSET_OPEN",
	2: "OFFSET_CLOSE",
	3: "OFFSET_CLOSETODAY",
	4: "OFFSET_CLOSEYESTERDAY",
}
var BfOffset_value = map[string]int32{
	"OFFSET_UNKNOWN":        0,
	"OFFSET_OPEN":           1,
	"OFFSET_CLOSE":          2,
	"OFFSET_CLOSETODAY":     3,
	"OFFSET_CLOSEYESTERDAY": 4,
}

func (x BfOffset) String() string {
	return proto.EnumName(BfOffset_name, int32(x))
}
func (BfOffset) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// 状态常量
type BfStatus int32

const (
	BfStatus_STATUS_UNKNOWN    BfStatus = 0
	BfStatus_STATUS_NOTTRADED  BfStatus = 1
	BfStatus_STATUS_PARTTRADED BfStatus = 2
	BfStatus_STATUS_ALLTRADED  BfStatus = 3
	BfStatus_STATUS_CANCELLED  BfStatus = 4
)

var BfStatus_name = map[int32]string{
	0: "STATUS_UNKNOWN",
	1: "STATUS_NOTTRADED",
	2: "STATUS_PARTTRADED",
	3: "STATUS_ALLTRADED",
	4: "STATUS_CANCELLED",
}
var BfStatus_value = map[string]int32{
	"STATUS_UNKNOWN":    0,
	"STATUS_NOTTRADED":  1,
	"STATUS_PARTTRADED": 2,
	"STATUS_ALLTRADED":  3,
	"STATUS_CANCELLED":  4,
}

func (x BfStatus) String() string {
	return proto.EnumName(BfStatus_name, int32(x))
}
func (BfStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// 合约类型常量
type BfProduct int32

const (
	BfProduct_PRODUCT_UNKNOWN BfProduct = 0
	BfProduct_PRODUCT_EQUITY  BfProduct = 1
	BfProduct_PRODUCT_FUTURES BfProduct = 2
)

var BfProduct_name = map[int32]string{
	0: "PRODUCT_UNKNOWN",
	1: "PRODUCT_EQUITY",
	2: "PRODUCT_FUTURES",
}
var BfProduct_value = map[string]int32{
	"PRODUCT_UNKNOWN": 0,
	"PRODUCT_EQUITY":  1,
	"PRODUCT_FUTURES": 2,
}

func (x BfProduct) String() string {
	return proto.EnumName(BfProduct_name, int32(x))
}
func (BfProduct) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

// 价格类型常量
type BfPriceType int32

const (
	BfPriceType_PRICETYPE_UNKONWN     BfPriceType = 0
	BfPriceType_PRICETYPE_LIMITPRICE  BfPriceType = 1
	BfPriceType_PRICETYPE_MARKETPRICE BfPriceType = 2
)

var BfPriceType_name = map[int32]string{
	0: "PRICETYPE_UNKONWN",
	1: "PRICETYPE_LIMITPRICE",
	2: "PRICETYPE_MARKETPRICE",
}
var BfPriceType_value = map[string]int32{
	"PRICETYPE_UNKONWN":     0,
	"PRICETYPE_LIMITPRICE":  1,
	"PRICETYPE_MARKETPRICE": 2,
}

func (x BfPriceType) String() string {
	return proto.EnumName(BfPriceType_name, int32(x))
}
func (BfPriceType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

// 空参数
type BfVoid struct {
}

func (m *BfVoid) Reset()                    { *m = BfVoid{} }
func (m *BfVoid) String() string            { return proto.CompactTextString(m) }
func (*BfVoid) ProtoMessage()               {}
func (*BfVoid) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// Tick行情数据类
type BfTickData struct {
	// 代码相关
	Symbol   string `protobuf:"bytes,1,opt,name=symbol" json:"symbol,omitempty"`
	Exchange string `protobuf:"bytes,2,opt,name=exchange" json:"exchange,omitempty"`
	// 成交数据
	ActionDate   string  `protobuf:"bytes,3,opt,name=actionDate" json:"actionDate,omitempty"`
	TickTime     string  `protobuf:"bytes,4,opt,name=tickTime" json:"tickTime,omitempty"`
	LastPrice    float64 `protobuf:"fixed64,5,opt,name=lastPrice" json:"lastPrice,omitempty"`
	Volume       int32   `protobuf:"varint,6,opt,name=volume" json:"volume,omitempty"`
	OpenInterest float64 `protobuf:"fixed64,7,opt,name=openInterest" json:"openInterest,omitempty"`
	LastVolume   int32   `protobuf:"varint,8,opt,name=lastVolume" json:"lastVolume,omitempty"`
	// 常规行情
	OpenPrice     float64 `protobuf:"fixed64,9,opt,name=openPrice" json:"openPrice,omitempty"`
	HighPrice     float64 `protobuf:"fixed64,10,opt,name=highPrice" json:"highPrice,omitempty"`
	LowPrice      float64 `protobuf:"fixed64,11,opt,name=lowPrice" json:"lowPrice,omitempty"`
	PreClosePrice float64 `protobuf:"fixed64,12,opt,name=preClosePrice" json:"preClosePrice,omitempty"`
	UpperLimit    float64 `protobuf:"fixed64,13,opt,name=upperLimit" json:"upperLimit,omitempty"`
	LowerLimit    float64 `protobuf:"fixed64,14,opt,name=lowerLimit" json:"lowerLimit,omitempty"`
	// x档行情
	BidPrice1  float64 `protobuf:"fixed64,15,opt,name=bidPrice1" json:"bidPrice1,omitempty"`
	AskPrice1  float64 `protobuf:"fixed64,16,opt,name=askPrice1" json:"askPrice1,omitempty"`
	BidVolume1 int32   `protobuf:"varint,17,opt,name=bidVolume1" json:"bidVolume1,omitempty"`
	AskVolume1 int32   `protobuf:"varint,18,opt,name=askVolume1" json:"askVolume1,omitempty"`
}

func (m *BfTickData) Reset()                    { *m = BfTickData{} }
func (m *BfTickData) String() string            { return proto.CompactTextString(m) }
func (*BfTickData) ProtoMessage()               {}
func (*BfTickData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// 成交数据类
type BfTradeData struct {
	// 代码编号相关
	Symbol   string `protobuf:"bytes,1,opt,name=symbol" json:"symbol,omitempty"`
	Exchange string `protobuf:"bytes,2,opt,name=exchange" json:"exchange,omitempty"`
	TradeId  string `protobuf:"bytes,3,opt,name=tradeId" json:"tradeId,omitempty"`
	// 对于ctp/lts是frontid.sessioni.orderref
	// ctp/lts的trade里面没有frontid+sessionid
	// 内部通过sysOrderId是做了映射trade到Order
	BfOrderId string `protobuf:"bytes,4,opt,name=bfOrderId" json:"bfOrderId,omitempty"`
	// 成交相关
	Direction BfDirection `protobuf:"varint,5,opt,name=direction,enum=bftrader.BfDirection" json:"direction,omitempty"`
	Offset    BfOffset    `protobuf:"varint,6,opt,name=offset,enum=bftrader.BfOffset" json:"offset,omitempty"`
	Price     float64     `protobuf:"fixed64,7,opt,name=price" json:"price,omitempty"`
	Volume    int32       `protobuf:"varint,8,opt,name=volume" json:"volume,omitempty"`
	TradeDate string      `protobuf:"bytes,9,opt,name=tradeDate" json:"tradeDate,omitempty"`
	TradeTime string      `protobuf:"bytes,10,opt,name=tradeTime" json:"tradeTime,omitempty"`
}

func (m *BfTradeData) Reset()                    { *m = BfTradeData{} }
func (m *BfTradeData) String() string            { return proto.CompactTextString(m) }
func (*BfTradeData) ProtoMessage()               {}
func (*BfTradeData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// 订单数据类
type BfOrderData struct {
	// 代码编号相关
	Symbol    string `protobuf:"bytes,1,opt,name=symbol" json:"symbol,omitempty"`
	Exchange  string `protobuf:"bytes,2,opt,name=exchange" json:"exchange,omitempty"`
	BfOrderId string `protobuf:"bytes,3,opt,name=bfOrderId" json:"bfOrderId,omitempty"`
	// 报单相关
	Direction    BfDirection `protobuf:"varint,4,opt,name=direction,enum=bftrader.BfDirection" json:"direction,omitempty"`
	Offset       BfOffset    `protobuf:"varint,5,opt,name=offset,enum=bftrader.BfOffset" json:"offset,omitempty"`
	Price        float64     `protobuf:"fixed64,6,opt,name=price" json:"price,omitempty"`
	TotalVolume  int32       `protobuf:"varint,7,opt,name=totalVolume" json:"totalVolume,omitempty"`
	TradedVolume int32       `protobuf:"varint,8,opt,name=tradedVolume" json:"tradedVolume,omitempty"`
	Status       BfStatus    `protobuf:"varint,9,opt,name=status,enum=bftrader.BfStatus" json:"status,omitempty"`
	InsertDate   string      `protobuf:"bytes,10,opt,name=insertDate" json:"insertDate,omitempty"`
	InsertTime   string      `protobuf:"bytes,11,opt,name=insertTime" json:"insertTime,omitempty"`
	CancelTime   string      `protobuf:"bytes,12,opt,name=cancelTime" json:"cancelTime,omitempty"`
}

func (m *BfOrderData) Reset()                    { *m = BfOrderData{} }
func (m *BfOrderData) String() string            { return proto.CompactTextString(m) }
func (*BfOrderData) ProtoMessage()               {}
func (*BfOrderData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

// 持仓数据类
type BfPositionData struct {
	// 代码编号相关
	Symbol   string `protobuf:"bytes,1,opt,name=symbol" json:"symbol,omitempty"`
	Exchange string `protobuf:"bytes,2,opt,name=exchange" json:"exchange,omitempty"`
	// 持仓相关
	Direction  BfDirection `protobuf:"varint,3,opt,name=direction,enum=bftrader.BfDirection" json:"direction,omitempty"`
	Position   int32       `protobuf:"varint,4,opt,name=position" json:"position,omitempty"`
	Frozen     int32       `protobuf:"varint,5,opt,name=frozen" json:"frozen,omitempty"`
	Price      float64     `protobuf:"fixed64,6,opt,name=price" json:"price,omitempty"`
	YdPosition int32       `protobuf:"varint,7,opt,name=ydPosition" json:"ydPosition,omitempty"`
}

func (m *BfPositionData) Reset()                    { *m = BfPositionData{} }
func (m *BfPositionData) String() string            { return proto.CompactTextString(m) }
func (*BfPositionData) ProtoMessage()               {}
func (*BfPositionData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

// 账户数据类
type BfAccountData struct {
	// 账号代码相关
	AccountId string `protobuf:"bytes,1,opt,name=accountId" json:"accountId,omitempty"`
	// 数值相关
	PreBalance     float64 `protobuf:"fixed64,2,opt,name=preBalance" json:"preBalance,omitempty"`
	Balance        float64 `protobuf:"fixed64,3,opt,name=balance" json:"balance,omitempty"`
	Available      float64 `protobuf:"fixed64,4,opt,name=available" json:"available,omitempty"`
	Commission     float64 `protobuf:"fixed64,5,opt,name=commission" json:"commission,omitempty"`
	FrozenMargin   float64 `protobuf:"fixed64,6,opt,name=frozenMargin" json:"frozenMargin,omitempty"`
	CloseProfit    float64 `protobuf:"fixed64,7,opt,name=closeProfit" json:"closeProfit,omitempty"`
	PositionProfit float64 `protobuf:"fixed64,8,opt,name=positionProfit" json:"positionProfit,omitempty"`
}

func (m *BfAccountData) Reset()                    { *m = BfAccountData{} }
func (m *BfAccountData) String() string            { return proto.CompactTextString(m) }
func (*BfAccountData) ProtoMessage()               {}
func (*BfAccountData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

// 错误数据类
type BfErrorData struct {
	ErrorId        int32  `protobuf:"varint,1,opt,name=errorId" json:"errorId,omitempty"`
	ErrorMsg       string `protobuf:"bytes,2,opt,name=errorMsg" json:"errorMsg,omitempty"`
	AdditionalInfo string `protobuf:"bytes,3,opt,name=additionalInfo" json:"additionalInfo,omitempty"`
}

func (m *BfErrorData) Reset()                    { *m = BfErrorData{} }
func (m *BfErrorData) String() string            { return proto.CompactTextString(m) }
func (*BfErrorData) ProtoMessage()               {}
func (*BfErrorData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

// 日志数据类
type BfLogData struct {
	When    string `protobuf:"bytes,1,opt,name=when" json:"when,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *BfLogData) Reset()                    { *m = BfLogData{} }
func (m *BfLogData) String() string            { return proto.CompactTextString(m) }
func (*BfLogData) ProtoMessage()               {}
func (*BfLogData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

// 合约详细信息类
type BfContractData struct {
	// 代码编号相关
	Symbol         string    `protobuf:"bytes,1,opt,name=symbol" json:"symbol,omitempty"`
	Exchange       string    `protobuf:"bytes,2,opt,name=exchange" json:"exchange,omitempty"`
	Name           string    `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	ProductClass   BfProduct `protobuf:"varint,4,opt,name=productClass,enum=bftrader.BfProduct" json:"productClass,omitempty"`
	VolumeMultiple int32     `protobuf:"varint,5,opt,name=volumeMultiple" json:"volumeMultiple,omitempty"`
	PriceTick      float64   `protobuf:"fixed64,6,opt,name=priceTick" json:"priceTick,omitempty"`
	MaxLimit       int32     `protobuf:"varint,7,opt,name=maxLimit" json:"maxLimit,omitempty"`
	MinLimit       int32     `protobuf:"varint,8,opt,name=minLimit" json:"minLimit,omitempty"`
	MaxMarket      int32     `protobuf:"varint,9,opt,name=maxMarket" json:"maxMarket,omitempty"`
	MinMartet      int32     `protobuf:"varint,10,opt,name=minMartet" json:"minMartet,omitempty"`
}

func (m *BfContractData) Reset()                    { *m = BfContractData{} }
func (m *BfContractData) String() string            { return proto.CompactTextString(m) }
func (*BfContractData) ProtoMessage()               {}
func (*BfContractData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

// 订阅行情时传入的对象类
type BfSubscribeReq struct {
	// 代码编号相关
	Symbol   string `protobuf:"bytes,1,opt,name=symbol" json:"symbol,omitempty"`
	Exchange string `protobuf:"bytes,2,opt,name=exchange" json:"exchange,omitempty"`
}

func (m *BfSubscribeReq) Reset()                    { *m = BfSubscribeReq{} }
func (m *BfSubscribeReq) String() string            { return proto.CompactTextString(m) }
func (*BfSubscribeReq) ProtoMessage()               {}
func (*BfSubscribeReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

// 发单时传入的对象类
type BfSendOrderReq struct {
	// 代码编号相关
	Symbol    string      `protobuf:"bytes,1,opt,name=symbol" json:"symbol,omitempty"`
	Exchange  string      `protobuf:"bytes,2,opt,name=exchange" json:"exchange,omitempty"`
	Price     float64     `protobuf:"fixed64,3,opt,name=price" json:"price,omitempty"`
	Volume    int32       `protobuf:"varint,4,opt,name=volume" json:"volume,omitempty"`
	PriceType BfPriceType `protobuf:"varint,5,opt,name=priceType,enum=bftrader.BfPriceType" json:"priceType,omitempty"`
	Direction BfDirection `protobuf:"varint,6,opt,name=direction,enum=bftrader.BfDirection" json:"direction,omitempty"`
	Offset    BfOffset    `protobuf:"varint,7,opt,name=offset,enum=bftrader.BfOffset" json:"offset,omitempty"`
}

func (m *BfSendOrderReq) Reset()                    { *m = BfSendOrderReq{} }
func (m *BfSendOrderReq) String() string            { return proto.CompactTextString(m) }
func (*BfSendOrderReq) ProtoMessage()               {}
func (*BfSendOrderReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

// 发单本地返回的对象类
type BfSendOrderResp struct {
	BfOrderId string `protobuf:"bytes,1,opt,name=bfOrderId" json:"bfOrderId,omitempty"`
}

func (m *BfSendOrderResp) Reset()                    { *m = BfSendOrderResp{} }
func (m *BfSendOrderResp) String() string            { return proto.CompactTextString(m) }
func (*BfSendOrderResp) ProtoMessage()               {}
func (*BfSendOrderResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

// 撤单时传入的对象类
type BfCancelOrderReq struct {
	// 代码编号相关
	Symbol    string `protobuf:"bytes,1,opt,name=symbol" json:"symbol,omitempty"`
	Exchange  string `protobuf:"bytes,2,opt,name=exchange" json:"exchange,omitempty"`
	BfOrderId string `protobuf:"bytes,3,opt,name=bfOrderId" json:"bfOrderId,omitempty"`
}

func (m *BfCancelOrderReq) Reset()                    { *m = BfCancelOrderReq{} }
func (m *BfCancelOrderReq) String() string            { return proto.CompactTextString(m) }
func (*BfCancelOrderReq) ProtoMessage()               {}
func (*BfCancelOrderReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

// 连接时传入的对象类
type BfConnectReq struct {
	// 唯一英文代号
	ProxyId string `protobuf:"bytes,1,opt,name=proxyId" json:"proxyId,omitempty"`
	// 服务地址和端口
	ProxyIp   string `protobuf:"bytes,2,opt,name=proxyIp" json:"proxyIp,omitempty"`
	ProxyPort int32  `protobuf:"varint,3,opt,name=proxyPort" json:"proxyPort,omitempty"`
	// 角色类别，可多选，注意：OnTradeWillBegin OnPing都必须实现
	TickHandler  bool `protobuf:"varint,4,opt,name=tickHandler" json:"tickHandler,omitempty"`
	TradeHandler bool `protobuf:"varint,5,opt,name=tradeHandler" json:"tradeHandler,omitempty"`
	LogHandler   bool `protobuf:"varint,6,opt,name=logHandler" json:"logHandler,omitempty"`
	// tickHandler相关
	Symbol   string `protobuf:"bytes,7,opt,name=symbol" json:"symbol,omitempty"`
	Exchange string `protobuf:"bytes,8,opt,name=exchange" json:"exchange,omitempty"`
}

func (m *BfConnectReq) Reset()                    { *m = BfConnectReq{} }
func (m *BfConnectReq) String() string            { return proto.CompactTextString(m) }
func (*BfConnectReq) ProtoMessage()               {}
func (*BfConnectReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

// 连接时返回的对象类
type BfConnectResp struct {
	ErrorCode int32  `protobuf:"varint,1,opt,name=errorCode" json:"errorCode,omitempty"`
	ErrorMsg  string `protobuf:"bytes,2,opt,name=errorMsg" json:"errorMsg,omitempty"`
}

func (m *BfConnectResp) Reset()                    { *m = BfConnectResp{} }
func (m *BfConnectResp) String() string            { return proto.CompactTextString(m) }
func (*BfConnectResp) ProtoMessage()               {}
func (*BfConnectResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

// 获取合约信息传入的对象类
type BfGetContractReq struct {
	// 代码编号相关
	Symbol   string `protobuf:"bytes,1,opt,name=symbol" json:"symbol,omitempty"`
	Exchange string `protobuf:"bytes,2,opt,name=exchange" json:"exchange,omitempty"`
	// 获取全部合约时候可以用index来枚举，从0开始，返回空结束
	Index int32 `protobuf:"varint,3,opt,name=index" json:"index,omitempty"`
	// 过滤条件，指定是否要求已经订阅
	Subscribled bool `protobuf:"varint,4,opt,name=subscribled" json:"subscribled,omitempty"`
}

func (m *BfGetContractReq) Reset()                    { *m = BfGetContractReq{} }
func (m *BfGetContractReq) String() string            { return proto.CompactTextString(m) }
func (*BfGetContractReq) ProtoMessage()               {}
func (*BfGetContractReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

// Ping/Pong检测传入的对象类
// 同ctp一样，5秒一次
type BfPingData struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *BfPingData) Reset()                    { *m = BfPingData{} }
func (m *BfPingData) String() string            { return proto.CompactTextString(m) }
func (*BfPingData) ProtoMessage()               {}
func (*BfPingData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func init() {
	proto.RegisterType((*BfVoid)(nil), "bftrader.BfVoid")
	proto.RegisterType((*BfTickData)(nil), "bftrader.BfTickData")
	proto.RegisterType((*BfTradeData)(nil), "bftrader.BfTradeData")
	proto.RegisterType((*BfOrderData)(nil), "bftrader.BfOrderData")
	proto.RegisterType((*BfPositionData)(nil), "bftrader.BfPositionData")
	proto.RegisterType((*BfAccountData)(nil), "bftrader.BfAccountData")
	proto.RegisterType((*BfErrorData)(nil), "bftrader.BfErrorData")
	proto.RegisterType((*BfLogData)(nil), "bftrader.BfLogData")
	proto.RegisterType((*BfContractData)(nil), "bftrader.BfContractData")
	proto.RegisterType((*BfSubscribeReq)(nil), "bftrader.BfSubscribeReq")
	proto.RegisterType((*BfSendOrderReq)(nil), "bftrader.BfSendOrderReq")
	proto.RegisterType((*BfSendOrderResp)(nil), "bftrader.BfSendOrderResp")
	proto.RegisterType((*BfCancelOrderReq)(nil), "bftrader.BfCancelOrderReq")
	proto.RegisterType((*BfConnectReq)(nil), "bftrader.BfConnectReq")
	proto.RegisterType((*BfConnectResp)(nil), "bftrader.BfConnectResp")
	proto.RegisterType((*BfGetContractReq)(nil), "bftrader.BfGetContractReq")
	proto.RegisterType((*BfPingData)(nil), "bftrader.BfPingData")
	proto.RegisterEnum("bftrader.BfDirection", BfDirection_name, BfDirection_value)
	proto.RegisterEnum("bftrader.BfOffset", BfOffset_name, BfOffset_value)
	proto.RegisterEnum("bftrader.BfStatus", BfStatus_name, BfStatus_value)
	proto.RegisterEnum("bftrader.BfProduct", BfProduct_name, BfProduct_value)
	proto.RegisterEnum("bftrader.BfPriceType", BfPriceType_name, BfPriceType_value)
}

var fileDescriptor0 = []byte{
	// 1382 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x57, 0x4d, 0x6f, 0xdb, 0x46,
	0x13, 0x7e, 0xf5, 0x69, 0x69, 0x2d, 0xcb, 0x32, 0x63, 0xbf, 0x50, 0x8b, 0xa2, 0x08, 0x88, 0x22,
	0x28, 0x74, 0x48, 0x91, 0xf8, 0x50, 0xf4, 0xa8, 0x0f, 0x3a, 0x11, 0x22, 0x8b, 0x2a, 0x45, 0xa5,
	0xf0, 0xa9, 0xa5, 0xc8, 0xa5, 0x4c, 0x98, 0x22, 0x55, 0x92, 0x8a, 0xed, 0x1e, 0x7a, 0xee, 0xbd,
	0x7f, 0xa2, 0xc7, 0xfe, 0x88, 0xde, 0xfa, 0x33, 0xfa, 0x27, 0x8a, 0x9e, 0xba, 0x33, 0xbb, 0xcb,
	0x0f, 0x21, 0x71, 0x13, 0xe5, 0xa6, 0x79, 0x9e, 0xd9, 0xd9, 0xdd, 0x99, 0x67, 0x67, 0x28, 0xd2,
	0x5e, 0xba, 0x49, 0x64, 0x39, 0x34, 0x7a, 0xba, 0x89, 0xc2, 0x24, 0x54, 0x1a, 0xd2, 0x56, 0x1b,
	0xa4, 0x3e, 0x70, 0x5f, 0x87, 0x9e, 0xa3, 0xfe, 0x5e, 0x25, 0x64, 0xe0, 0x9a, 0x9e, 0x7d, 0x33,
	0xb2, 0x12, 0x4b, 0xf9, 0x3f, 0xa9, 0xc7, 0xf7, 0xeb, 0x65, 0xe8, 0x77, 0x4b, 0x8f, 0x4b, 0x5f,
	0x36, 0x0d, 0x61, 0x29, 0x9f, 0x92, 0x06, 0xbd, 0xb3, 0xaf, 0xad, 0x60, 0x45, 0xbb, 0x65, 0x64,
	0x52, 0x5b, 0xf9, 0x9c, 0x10, 0xcb, 0x4e, 0xbc, 0x30, 0x60, 0x11, 0x68, 0xb7, 0x82, 0x6c, 0x0e,
	0x81, 0xb5, 0x09, 0x8b, 0x6f, 0x7a, 0x6b, 0xda, 0xad, 0xf2, 0xb5, 0xd2, 0x56, 0x3e, 0x23, 0x4d,
	0xdf, 0x8a, 0x93, 0x59, 0xe4, 0xd9, 0xb4, 0x5b, 0x63, 0x64, 0xc9, 0xc8, 0x00, 0x38, 0xcd, 0x9b,
	0xd0, 0xdf, 0xb2, 0x75, 0x75, 0x46, 0xd5, 0x0c, 0x61, 0x29, 0x2a, 0x69, 0x85, 0x1b, 0x1a, 0x8c,
	0x83, 0x84, 0x46, 0x34, 0x4e, 0xba, 0x07, 0xb8, 0xb0, 0x80, 0xc1, 0xa9, 0x20, 0xd0, 0x6b, 0xbe,
	0xbe, 0x81, 0xeb, 0x73, 0x08, 0xec, 0x0c, 0xfe, 0x7c, 0xe7, 0x26, 0xdf, 0x39, 0x05, 0x80, 0xbd,
	0xf6, 0x56, 0xd7, 0x9c, 0x25, 0x9c, 0x4d, 0x01, 0xb8, 0x91, 0x1f, 0xde, 0x72, 0xf2, 0x10, 0xc9,
	0xd4, 0x56, 0xbe, 0x20, 0x47, 0x9b, 0x88, 0x0e, 0xfd, 0x30, 0xa6, 0xdc, 0xa1, 0x85, 0x0e, 0x45,
	0x10, 0x4e, 0xb7, 0xdd, 0x6c, 0x68, 0x34, 0xf1, 0xd6, 0x5e, 0xd2, 0x3d, 0x42, 0x97, 0x1c, 0x82,
	0xa7, 0x0f, 0x6f, 0x25, 0xdf, 0xe6, 0x7c, 0x86, 0xc0, 0xf9, 0x96, 0x9e, 0x83, 0xb1, 0x9e, 0x75,
	0x8f, 0xf9, 0xf9, 0x52, 0x00, 0x58, 0x2b, 0xbe, 0x11, 0x6c, 0x87, 0xb3, 0x29, 0x00, 0xb1, 0x99,
	0x2b, 0x4f, 0xc3, 0xb3, 0xee, 0x09, 0xcf, 0x4c, 0x86, 0x60, 0x3d, 0xe3, 0x1b, 0xc9, 0x2b, 0x9c,
	0xcf, 0x10, 0xf5, 0x8f, 0x32, 0x39, 0x64, 0x92, 0x01, 0x25, 0xed, 0xad, 0x99, 0x2e, 0x39, 0x40,
	0x29, 0x8e, 0x1d, 0x21, 0x18, 0x69, 0xe2, 0xcd, 0x5c, 0x3d, 0x62, 0x2a, 0x65, 0x1c, 0x97, 0x4b,
	0x06, 0x28, 0xe7, 0xa4, 0xe9, 0x78, 0x11, 0x45, 0x71, 0xa1, 0x5e, 0xda, 0xcf, 0xcf, 0x9e, 0xa6,
	0x32, 0x1f, 0xb8, 0x23, 0x49, 0x1a, 0x99, 0x9f, 0xd2, 0x23, 0xf5, 0xd0, 0x75, 0x63, 0x9a, 0xa0,
	0x8c, 0xda, 0xcf, 0x95, 0xfc, 0x0a, 0x1d, 0x19, 0x43, 0x78, 0x28, 0xa7, 0xa4, 0xb6, 0xc1, 0xb2,
	0x71, 0x4d, 0x71, 0x23, 0x27, 0xc4, 0x46, 0x41, 0x88, 0xec, 0xb0, 0x89, 0xc8, 0x03, 0x17, 0x11,
	0x3b, 0x6c, 0x0a, 0xa4, 0x2c, 0x2a, 0x9f, 0xe4, 0x58, 0x00, 0xd4, 0xdf, 0x2a, 0x90, 0x46, 0xbc,
	0xd8, 0xde, 0x69, 0x2c, 0x24, 0xab, 0xf2, 0x60, 0xb2, 0xaa, 0x1f, 0x9c, 0xac, 0xda, 0xfb, 0x27,
	0xab, 0x9e, 0x4f, 0xd6, 0x63, 0x72, 0x98, 0x84, 0x89, 0xe5, 0x8b, 0xa7, 0x77, 0x80, 0x19, 0xcb,
	0x43, 0xf0, 0x7e, 0x31, 0xa4, 0x53, 0x78, 0x9d, 0x05, 0x0c, 0xce, 0x11, 0x27, 0x56, 0xb2, 0x8d,
	0x31, 0xaf, 0x3b, 0xe7, 0x98, 0x23, 0x63, 0x08, 0x0f, 0x50, 0xac, 0x17, 0xc4, 0x34, 0x4a, 0xb0,
	0x0e, 0x3c, 0xd3, 0x39, 0x24, 0xe3, 0xb1, 0x12, 0x87, 0x79, 0x1e, 0xbb, 0x10, 0xe3, 0x6d, 0x2b,
	0xb0, 0xa9, 0x8f, 0x7c, 0x8b, 0xf3, 0x19, 0xa2, 0xfe, 0x55, 0x22, 0xed, 0x81, 0x3b, 0x0b, 0x63,
	0x4f, 0x34, 0xb5, 0xfd, 0xaa, 0x55, 0xa8, 0x47, 0xe5, 0x3d, 0xeb, 0xc1, 0x02, 0x6e, 0xc4, 0xc6,
	0x58, 0xc3, 0x9a, 0x91, 0xda, 0x70, 0x08, 0x37, 0x0a, 0x7f, 0xa2, 0xfc, 0x29, 0x30, 0x59, 0x72,
	0xeb, 0x1d, 0x75, 0x61, 0xb7, 0xbc, 0x77, 0xe4, 0x25, 0x44, 0x59, 0x72, 0x88, 0xfa, 0x6b, 0x99,
	0x1c, 0x0d, 0xdc, 0xbe, 0x6d, 0x87, 0xdb, 0x20, 0xc1, 0x4b, 0x42, 0x1f, 0xe1, 0x26, 0x93, 0x17,
	0xbf, 0x67, 0x06, 0x40, 0x3c, 0xd6, 0xd4, 0x06, 0x96, 0x0f, 0x89, 0xc2, 0xcb, 0xb2, 0x1e, 0x95,
	0x21, 0xf0, 0xc6, 0x97, 0x82, 0xac, 0x20, 0x29, 0x4d, 0x8c, 0xfb, 0xc6, 0xf2, 0x7c, 0x6b, 0xe9,
	0xf3, 0x91, 0x00, 0xfd, 0x49, 0x02, 0x58, 0x8d, 0x70, 0xbd, 0xf6, 0xe2, 0x58, 0x3e, 0x72, 0x16,
	0x37, 0x43, 0x40, 0x3d, 0xfc, 0x9e, 0x97, 0x56, 0xb4, 0xf2, 0x02, 0x71, 0xc9, 0x02, 0x06, 0x1a,
	0xb4, 0x79, 0xb7, 0x0d, 0x5d, 0x4f, 0x0e, 0x88, 0x3c, 0xa4, 0x3c, 0x21, 0x6d, 0x99, 0x47, 0xe1,
	0xd4, 0x40, 0xa7, 0x1d, 0x54, 0xbd, 0x81, 0x57, 0xaa, 0x45, 0x51, 0xc8, 0x5f, 0x29, 0xbb, 0x14,
	0x05, 0x43, 0x24, 0xa4, 0x66, 0x48, 0x13, 0x2b, 0x0f, 0x3f, 0x2f, 0xe3, 0x55, 0x5a, 0x79, 0x61,
	0xc3, 0x66, 0x96, 0xe3, 0x60, 0x58, 0xcb, 0x1f, 0x07, 0x6e, 0x28, 0x1e, 0xeb, 0x0e, 0xaa, 0x7e,
	0x43, 0x9a, 0x03, 0x77, 0x12, 0xae, 0x70, 0x2b, 0x85, 0x54, 0x6f, 0xaf, 0x59, 0x6d, 0x79, 0xe2,
	0xf1, 0x37, 0x6c, 0xbf, 0xa6, 0x71, 0x6c, 0xa5, 0xea, 0x92, 0xa6, 0xfa, 0x67, 0x19, 0x34, 0x3a,
	0x0c, 0x03, 0x26, 0x27, 0x3b, 0xd9, 0x5b, 0xa3, 0x6c, 0xd3, 0xc0, 0x5a, 0xcb, 0x31, 0x8e, 0xbf,
	0x95, 0xaf, 0x49, 0x8b, 0x7d, 0x40, 0x38, 0x5b, 0x3b, 0x19, 0xb2, 0x01, 0x1a, 0x8b, 0x56, 0xf2,
	0x28, 0x2f, 0xdd, 0x19, 0xe7, 0x8d, 0x82, 0x23, 0x5c, 0x9b, 0x37, 0xca, 0xcb, 0xad, 0x9f, 0x78,
	0x1b, 0x9f, 0x0a, 0x9d, 0xee, 0xa0, 0xa0, 0x07, 0x94, 0x28, 0x7c, 0x86, 0x88, 0x72, 0x66, 0x00,
	0x1c, 0x77, 0x6d, 0xdd, 0xf1, 0x49, 0xc8, 0x55, 0x9b, 0xda, 0xc8, 0x79, 0x01, 0xe7, 0x1a, 0x82,
	0x13, 0x36, 0x44, 0x65, 0x7e, 0x4c, 0x10, 0x37, 0xac, 0x99, 0x35, 0x91, 0xcc, 0x00, 0x64, 0x3d,
	0x90, 0x4b, 0xc2, 0x58, 0x22, 0x58, 0x09, 0xa8, 0x23, 0x48, 0xe6, 0x7c, 0xbb, 0x8c, 0xed, 0xc8,
	0x5b, 0x52, 0x83, 0xfe, 0xb8, 0x4f, 0x32, 0xd5, 0x5f, 0xb0, 0x26, 0x73, 0x1a, 0x38, 0xd8, 0x92,
	0xf7, 0x0c, 0x93, 0x3d, 0xe7, 0xca, 0xdb, 0x67, 0x52, 0xb5, 0x30, 0x93, 0xce, 0x65, 0x32, 0xef,
	0x37, 0xf4, 0x6d, 0x23, 0x72, 0x26, 0x49, 0x23, 0xf3, 0x2b, 0xb6, 0xa6, 0xfa, 0x07, 0x8f, 0x8a,
	0x83, 0xff, 0x1a, 0x15, 0xea, 0x57, 0xe4, 0xb8, 0x90, 0x89, 0x78, 0x53, 0x1c, 0x5e, 0xa5, 0x9d,
	0xe1, 0xa5, 0x3a, 0xa4, 0xc3, 0xe4, 0x8c, 0x3d, 0xf8, 0xa3, 0x92, 0xf7, 0xe0, 0x88, 0x54, 0xff,
	0x29, 0x91, 0x16, 0xbe, 0x9a, 0x80, 0xdd, 0x09, 0xb6, 0x60, 0x0f, 0x8c, 0x49, 0xf8, 0xee, 0x3e,
	0x3d, 0x92, 0x34, 0x33, 0x66, 0x23, 0x9f, 0x9e, 0x30, 0xb9, 0x7c, 0xd9, 0xcf, 0x59, 0x18, 0x25,
	0xb8, 0x45, 0xcd, 0xc8, 0x00, 0x1c, 0x87, 0x4c, 0xc6, 0x2f, 0xad, 0xc0, 0xf1, 0x69, 0x84, 0xc5,
	0x6a, 0x18, 0x79, 0x28, 0x1d, 0x87, 0xd2, 0xa5, 0x86, 0x2e, 0x05, 0x8c, 0x7f, 0x10, 0xae, 0xa4,
	0x47, 0x1d, 0x3d, 0x72, 0x48, 0x2e, 0x35, 0x07, 0xef, 0x4c, 0x4d, 0x63, 0x47, 0x9e, 0x63, 0xe8,
	0xf7, 0xe9, 0xdd, 0x79, 0x45, 0xb0, 0x65, 0x0d, 0x43, 0x87, 0x8a, 0xf6, 0x96, 0x01, 0x0f, 0x35,
	0x38, 0xf5, 0x67, 0xa8, 0xd6, 0x0b, 0x9a, 0xc8, 0xfe, 0xf3, 0x11, 0x52, 0xf7, 0x02, 0x87, 0xde,
	0x89, 0x34, 0x72, 0x03, 0x52, 0x18, 0x8b, 0xb7, 0xe8, 0x53, 0x47, 0xa6, 0x30, 0x07, 0xa9, 0x4f,
	0xe0, 0x5f, 0xcc, 0xcc, 0x0b, 0x56, 0xb2, 0x49, 0xcb, 0x2e, 0x59, 0x2a, 0x74, 0xc9, 0xde, 0x0f,
	0xd0, 0xcd, 0x53, 0x31, 0x2b, 0x67, 0xe4, 0x64, 0x34, 0x36, 0xb4, 0xa1, 0x39, 0xd6, 0xa7, 0xdf,
	0x2f, 0xa6, 0xaf, 0xa6, 0xfa, 0x77, 0xd3, 0xce, 0xff, 0x58, 0x13, 0x6c, 0x67, 0xf0, 0x44, 0x9f,
	0xbe, 0xe8, 0x94, 0x94, 0x47, 0xe4, 0x38, 0xc3, 0xe6, 0x2f, 0x75, 0xc3, 0xec, 0x94, 0x95, 0x13,
	0x72, 0x94, 0x81, 0x53, 0xcd, 0xec, 0x54, 0x7a, 0x31, 0x69, 0x48, 0xf1, 0x43, 0x1c, 0xfd, 0xe2,
	0x62, 0xae, 0x99, 0xb9, 0xd8, 0xc7, 0xe4, 0x50, 0x60, 0xfa, 0x4c, 0x9b, 0xb2, 0xc0, 0x1d, 0xd2,
	0x12, 0xc0, 0x70, 0xa2, 0xcf, 0x35, 0x16, 0x95, 0x9d, 0x2a, 0x8f, 0x98, 0xfa, 0xa8, 0x7f, 0xd5,
	0xa9, 0x28, 0x9f, 0x90, 0xb3, 0x3c, 0x7c, 0xa5, 0xcd, 0x4d, 0xcd, 0x00, 0xaa, 0xda, 0xbb, 0x85,
	0x4d, 0xf9, 0x47, 0x11, 0x6c, 0x3a, 0x37, 0xfb, 0xe6, 0x62, 0x9e, 0xdb, 0xf4, 0x94, 0x74, 0x04,
	0x36, 0xd5, 0x4d, 0xd3, 0xe8, 0x8f, 0xb4, 0x11, 0xdb, 0x99, 0xed, 0x23, 0xd0, 0x59, 0xdf, 0x90,
	0x70, 0x39, 0xe7, 0xdc, 0x9f, 0x4c, 0x04, 0x5a, 0xc9, 0xa1, 0xc3, 0xfe, 0x74, 0xa8, 0x4d, 0x26,
	0x0c, 0xad, 0xf6, 0xc6, 0x30, 0xb0, 0x44, 0xf3, 0x87, 0x14, 0xcd, 0x0c, 0x7d, 0xb4, 0x18, 0x9a,
	0xc5, 0x5c, 0x4a, 0x50, 0xfb, 0x76, 0x31, 0x36, 0xaf, 0x78, 0x2e, 0x25, 0x76, 0xb1, 0x30, 0x17,
	0x86, 0x36, 0xef, 0x94, 0x7b, 0x57, 0x50, 0x9a, 0xb4, 0x39, 0xc1, 0xe1, 0x66, 0xc6, 0x78, 0xa8,
	0x99, 0x57, 0x33, 0x0d, 0xc2, 0xe9, 0x53, 0x0c, 0xd7, 0x25, 0xa7, 0x19, 0x3c, 0x19, 0x5f, 0x8e,
	0x4d, 0x34, 0x59, 0x50, 0x96, 0x9e, 0x8c, 0xb9, 0xec, 0x1b, 0xaf, 0x34, 0x41, 0x95, 0x07, 0x95,
	0xbf, 0x4b, 0xa5, 0x65, 0x1d, 0xff, 0x04, 0x9f, 0xff, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x9b, 0x42,
	0xdb, 0xd1, 0x16, 0x0f, 0x00, 0x00,
}
