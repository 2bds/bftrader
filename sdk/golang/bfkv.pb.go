// Code generated by protoc-gen-go.
// source: bfkv.proto
// DO NOT EDIT!

/*
Package bftrader_bfkv is a generated protocol buffer package.

It is generated from these files:
	bfkv.proto

It has these top-level messages:
*/
package bftrader_bfkv

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import bftrader "."

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion1

// Client API for BfKvService service

type BfKvServiceClient interface {
	// 活跃检测
	Ping(ctx context.Context, in *bftrader.BfPingData, opts ...grpc.CallOption) (*bftrader.BfPingData, error)
	PingStreamCS(ctx context.Context, opts ...grpc.CallOption) (BfKvService_PingStreamCSClient, error)
	PingStreamC(ctx context.Context, opts ...grpc.CallOption) (BfKvService_PingStreamCClient, error)
	PingStreamS(ctx context.Context, in *bftrader.BfPingData, opts ...grpc.CallOption) (BfKvService_PingStreamSClient, error)
	// Kv服务
	SetKv(ctx context.Context, in *bftrader.BfKvData, opts ...grpc.CallOption) (*bftrader.BfVoid, error)
	GetKv(ctx context.Context, in *bftrader.BfKvData, opts ...grpc.CallOption) (*bftrader.BfKvData, error)
}

type bfKvServiceClient struct {
	cc *grpc.ClientConn
}

func NewBfKvServiceClient(cc *grpc.ClientConn) BfKvServiceClient {
	return &bfKvServiceClient{cc}
}

func (c *bfKvServiceClient) Ping(ctx context.Context, in *bftrader.BfPingData, opts ...grpc.CallOption) (*bftrader.BfPingData, error) {
	out := new(bftrader.BfPingData)
	err := grpc.Invoke(ctx, "/bftrader.bfkv.BfKvService/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bfKvServiceClient) PingStreamCS(ctx context.Context, opts ...grpc.CallOption) (BfKvService_PingStreamCSClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_BfKvService_serviceDesc.Streams[0], c.cc, "/bftrader.bfkv.BfKvService/PingStreamCS", opts...)
	if err != nil {
		return nil, err
	}
	x := &bfKvServicePingStreamCSClient{stream}
	return x, nil
}

type BfKvService_PingStreamCSClient interface {
	Send(*bftrader.BfPingData) error
	Recv() (*bftrader.BfPingData, error)
	grpc.ClientStream
}

type bfKvServicePingStreamCSClient struct {
	grpc.ClientStream
}

func (x *bfKvServicePingStreamCSClient) Send(m *bftrader.BfPingData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *bfKvServicePingStreamCSClient) Recv() (*bftrader.BfPingData, error) {
	m := new(bftrader.BfPingData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bfKvServiceClient) PingStreamC(ctx context.Context, opts ...grpc.CallOption) (BfKvService_PingStreamCClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_BfKvService_serviceDesc.Streams[1], c.cc, "/bftrader.bfkv.BfKvService/PingStreamC", opts...)
	if err != nil {
		return nil, err
	}
	x := &bfKvServicePingStreamCClient{stream}
	return x, nil
}

type BfKvService_PingStreamCClient interface {
	Send(*bftrader.BfPingData) error
	CloseAndRecv() (*bftrader.BfPingData, error)
	grpc.ClientStream
}

type bfKvServicePingStreamCClient struct {
	grpc.ClientStream
}

func (x *bfKvServicePingStreamCClient) Send(m *bftrader.BfPingData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *bfKvServicePingStreamCClient) CloseAndRecv() (*bftrader.BfPingData, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(bftrader.BfPingData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bfKvServiceClient) PingStreamS(ctx context.Context, in *bftrader.BfPingData, opts ...grpc.CallOption) (BfKvService_PingStreamSClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_BfKvService_serviceDesc.Streams[2], c.cc, "/bftrader.bfkv.BfKvService/PingStreamS", opts...)
	if err != nil {
		return nil, err
	}
	x := &bfKvServicePingStreamSClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BfKvService_PingStreamSClient interface {
	Recv() (*bftrader.BfPingData, error)
	grpc.ClientStream
}

type bfKvServicePingStreamSClient struct {
	grpc.ClientStream
}

func (x *bfKvServicePingStreamSClient) Recv() (*bftrader.BfPingData, error) {
	m := new(bftrader.BfPingData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bfKvServiceClient) SetKv(ctx context.Context, in *bftrader.BfKvData, opts ...grpc.CallOption) (*bftrader.BfVoid, error) {
	out := new(bftrader.BfVoid)
	err := grpc.Invoke(ctx, "/bftrader.bfkv.BfKvService/SetKv", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bfKvServiceClient) GetKv(ctx context.Context, in *bftrader.BfKvData, opts ...grpc.CallOption) (*bftrader.BfKvData, error) {
	out := new(bftrader.BfKvData)
	err := grpc.Invoke(ctx, "/bftrader.bfkv.BfKvService/GetKv", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BfKvService service

type BfKvServiceServer interface {
	// 活跃检测
	Ping(context.Context, *bftrader.BfPingData) (*bftrader.BfPingData, error)
	PingStreamCS(BfKvService_PingStreamCSServer) error
	PingStreamC(BfKvService_PingStreamCServer) error
	PingStreamS(*bftrader.BfPingData, BfKvService_PingStreamSServer) error
	// Kv服务
	SetKv(context.Context, *bftrader.BfKvData) (*bftrader.BfVoid, error)
	GetKv(context.Context, *bftrader.BfKvData) (*bftrader.BfKvData, error)
}

func RegisterBfKvServiceServer(s *grpc.Server, srv BfKvServiceServer) {
	s.RegisterService(&_BfKvService_serviceDesc, srv)
}

func _BfKvService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(bftrader.BfPingData)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BfKvServiceServer).Ping(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _BfKvService_PingStreamCS_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BfKvServiceServer).PingStreamCS(&bfKvServicePingStreamCSServer{stream})
}

type BfKvService_PingStreamCSServer interface {
	Send(*bftrader.BfPingData) error
	Recv() (*bftrader.BfPingData, error)
	grpc.ServerStream
}

type bfKvServicePingStreamCSServer struct {
	grpc.ServerStream
}

func (x *bfKvServicePingStreamCSServer) Send(m *bftrader.BfPingData) error {
	return x.ServerStream.SendMsg(m)
}

func (x *bfKvServicePingStreamCSServer) Recv() (*bftrader.BfPingData, error) {
	m := new(bftrader.BfPingData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _BfKvService_PingStreamC_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BfKvServiceServer).PingStreamC(&bfKvServicePingStreamCServer{stream})
}

type BfKvService_PingStreamCServer interface {
	SendAndClose(*bftrader.BfPingData) error
	Recv() (*bftrader.BfPingData, error)
	grpc.ServerStream
}

type bfKvServicePingStreamCServer struct {
	grpc.ServerStream
}

func (x *bfKvServicePingStreamCServer) SendAndClose(m *bftrader.BfPingData) error {
	return x.ServerStream.SendMsg(m)
}

func (x *bfKvServicePingStreamCServer) Recv() (*bftrader.BfPingData, error) {
	m := new(bftrader.BfPingData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _BfKvService_PingStreamS_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(bftrader.BfPingData)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BfKvServiceServer).PingStreamS(m, &bfKvServicePingStreamSServer{stream})
}

type BfKvService_PingStreamSServer interface {
	Send(*bftrader.BfPingData) error
	grpc.ServerStream
}

type bfKvServicePingStreamSServer struct {
	grpc.ServerStream
}

func (x *bfKvServicePingStreamSServer) Send(m *bftrader.BfPingData) error {
	return x.ServerStream.SendMsg(m)
}

func _BfKvService_SetKv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(bftrader.BfKvData)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BfKvServiceServer).SetKv(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _BfKvService_GetKv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(bftrader.BfKvData)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BfKvServiceServer).GetKv(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _BfKvService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bftrader.bfkv.BfKvService",
	HandlerType: (*BfKvServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _BfKvService_Ping_Handler,
		},
		{
			MethodName: "SetKv",
			Handler:    _BfKvService_SetKv_Handler,
		},
		{
			MethodName: "GetKv",
			Handler:    _BfKvService_GetKv_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PingStreamCS",
			Handler:       _BfKvService_PingStreamCS_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "PingStreamC",
			Handler:       _BfKvService_PingStreamC_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "PingStreamS",
			Handler:       _BfKvService_PingStreamS_Handler,
			ServerStreams: true,
		},
	},
}

var fileDescriptor0 = []byte{
	// 173 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x4a, 0x4a, 0xcb, 0x2e,
	0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x4d, 0x4a, 0x2b, 0x29, 0x4a, 0x4c, 0x49, 0x2d,
	0xd2, 0x03, 0x09, 0x4a, 0xf1, 0xc1, 0xb9, 0x60, 0x69, 0xa3, 0xe7, 0x4c, 0x5c, 0xdc, 0x4e, 0x69,
	0xde, 0x65, 0xc1, 0xa9, 0x45, 0x65, 0x99, 0xc9, 0xa9, 0x42, 0x26, 0x5c, 0x2c, 0x01, 0x99, 0x79,
	0xe9, 0x42, 0x22, 0x7a, 0x70, 0x85, 0x4e, 0x69, 0x20, 0x11, 0x97, 0xc4, 0x92, 0x44, 0x29, 0xac,
	0xa2, 0x4a, 0x0c, 0x42, 0x0e, 0x5c, 0x3c, 0x20, 0x5e, 0x70, 0x49, 0x51, 0x6a, 0x62, 0xae, 0x73,
	0x30, 0x69, 0xba, 0x35, 0x18, 0x0d, 0x18, 0x85, 0x6c, 0xb9, 0xb8, 0x91, 0x4c, 0x20, 0xd5, 0x00,
	0x54, 0xed, 0x24, 0xda, 0x0f, 0xb4, 0x5d, 0x9f, 0x8b, 0x35, 0x38, 0xb5, 0xc4, 0xbb, 0x4c, 0x48,
	0x08, 0x59, 0x89, 0x77, 0x19, 0x58, 0x9b, 0x00, 0xb2, 0x58, 0x58, 0x7e, 0x66, 0x0a, 0xd0, 0xc3,
	0x86, 0x5c, 0xac, 0xee, 0x38, 0x35, 0x60, 0x11, 0x53, 0x62, 0x48, 0x62, 0x03, 0x07, 0xb8, 0x31,
	0x20, 0x00, 0x00, 0xff, 0xff, 0x93, 0x70, 0xbe, 0x91, 0x9d, 0x01, 0x00, 0x00,
}
