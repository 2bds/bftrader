// Code generated by protoc-gen-go.
// source: bfkv.proto
// DO NOT EDIT!

/*
Package bftrader_bfkv is a generated protocol buffer package.

It is generated from these files:
	bfkv.proto

It has these top-level messages:
*/
package bftrader_bfkv

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import bftrader "."

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion1

// Client API for BfKvService service

type BfKvServiceClient interface {
	SetKv(ctx context.Context, in *bftrader.BfKvData, opts ...grpc.CallOption) (*bftrader.BfVoid, error)
	GetKv(ctx context.Context, in *bftrader.BfKvData, opts ...grpc.CallOption) (*bftrader.BfKvData, error)
}

type bfKvServiceClient struct {
	cc *grpc.ClientConn
}

func NewBfKvServiceClient(cc *grpc.ClientConn) BfKvServiceClient {
	return &bfKvServiceClient{cc}
}

func (c *bfKvServiceClient) SetKv(ctx context.Context, in *bftrader.BfKvData, opts ...grpc.CallOption) (*bftrader.BfVoid, error) {
	out := new(bftrader.BfVoid)
	err := grpc.Invoke(ctx, "/bftrader.bfkv.BfKvService/SetKv", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bfKvServiceClient) GetKv(ctx context.Context, in *bftrader.BfKvData, opts ...grpc.CallOption) (*bftrader.BfKvData, error) {
	out := new(bftrader.BfKvData)
	err := grpc.Invoke(ctx, "/bftrader.bfkv.BfKvService/GetKv", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BfKvService service

type BfKvServiceServer interface {
	SetKv(context.Context, *bftrader.BfKvData) (*bftrader.BfVoid, error)
	GetKv(context.Context, *bftrader.BfKvData) (*bftrader.BfKvData, error)
}

func RegisterBfKvServiceServer(s *grpc.Server, srv BfKvServiceServer) {
	s.RegisterService(&_BfKvService_serviceDesc, srv)
}

func _BfKvService_SetKv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(bftrader.BfKvData)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BfKvServiceServer).SetKv(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _BfKvService_GetKv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(bftrader.BfKvData)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BfKvServiceServer).GetKv(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _BfKvService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bftrader.bfkv.BfKvService",
	HandlerType: (*BfKvServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetKv",
			Handler:    _BfKvService_SetKv_Handler,
		},
		{
			MethodName: "GetKv",
			Handler:    _BfKvService_GetKv_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 116 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x4a, 0x4a, 0xcb, 0x2e,
	0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x4d, 0x4a, 0x2b, 0x29, 0x4a, 0x4c, 0x49, 0x2d,
	0xd2, 0x03, 0x09, 0x4a, 0xf1, 0xc1, 0xb9, 0x60, 0x69, 0xa3, 0x42, 0x2e, 0x6e, 0xa7, 0x34, 0xef,
	0xb2, 0xe0, 0xd4, 0xa2, 0xb2, 0xcc, 0xe4, 0x54, 0x21, 0x7d, 0x2e, 0xd6, 0xe0, 0xd4, 0x12, 0xef,
	0x32, 0x21, 0x21, 0x3d, 0xb8, 0x42, 0x90, 0xbc, 0x4b, 0x62, 0x49, 0xa2, 0x94, 0x00, 0xb2, 0x58,
	0x58, 0x7e, 0x66, 0x8a, 0x12, 0x83, 0x90, 0x21, 0x17, 0xab, 0x3b, 0x4e, 0x0d, 0x58, 0xc4, 0x94,
	0x18, 0x92, 0xd8, 0xc0, 0x36, 0x1b, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x19, 0xbd, 0xf5, 0xbf,
	0xa6, 0x00, 0x00, 0x00,
}
