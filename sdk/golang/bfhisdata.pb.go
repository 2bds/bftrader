// Code generated by protoc-gen-go.
// source: bfhisdata.proto
// DO NOT EDIT!

/*
Package bftrader_bfhisdata is a generated protocol buffer package.

It is generated from these files:
	bfhisdata.proto

It has these top-level messages:
*/
package bftrader_bfhisdata

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import bftrader "."

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion1

// Client API for BfHisDataService service

type BfHisDataServiceClient interface {
	// 保存tick，1分钟一打包，(todo:改成req，增加key需要的参数，ticks直接发bytes)
	InsertTickPack(ctx context.Context, in *bftrader.BfTickPackData, opts ...grpc.CallOption) (*bftrader.BfVoid, error)
	// 保存bar (todo:改成req，增加key需要的参数，bar直接发bytes)
	InsertBar(ctx context.Context, in *bftrader.BfBarData, opts ...grpc.CallOption) (*bftrader.BfVoid, error)
	// 获取tick
	GetTickPack(ctx context.Context, in *bftrader.BfGetTickPackReq, opts ...grpc.CallOption) (BfHisDataService_GetTickPackClient, error)
	// 获取bar
	GetBar(ctx context.Context, in *bftrader.BfGetBarReq, opts ...grpc.CallOption) (BfHisDataService_GetBarClient, error)
}

type bfHisDataServiceClient struct {
	cc *grpc.ClientConn
}

func NewBfHisDataServiceClient(cc *grpc.ClientConn) BfHisDataServiceClient {
	return &bfHisDataServiceClient{cc}
}

func (c *bfHisDataServiceClient) InsertTickPack(ctx context.Context, in *bftrader.BfTickPackData, opts ...grpc.CallOption) (*bftrader.BfVoid, error) {
	out := new(bftrader.BfVoid)
	err := grpc.Invoke(ctx, "/bftrader.bfhisdata.BfHisDataService/InsertTickPack", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bfHisDataServiceClient) InsertBar(ctx context.Context, in *bftrader.BfBarData, opts ...grpc.CallOption) (*bftrader.BfVoid, error) {
	out := new(bftrader.BfVoid)
	err := grpc.Invoke(ctx, "/bftrader.bfhisdata.BfHisDataService/InsertBar", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bfHisDataServiceClient) GetTickPack(ctx context.Context, in *bftrader.BfGetTickPackReq, opts ...grpc.CallOption) (BfHisDataService_GetTickPackClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_BfHisDataService_serviceDesc.Streams[0], c.cc, "/bftrader.bfhisdata.BfHisDataService/GetTickPack", opts...)
	if err != nil {
		return nil, err
	}
	x := &bfHisDataServiceGetTickPackClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BfHisDataService_GetTickPackClient interface {
	Recv() (*bftrader.BfTickPackData, error)
	grpc.ClientStream
}

type bfHisDataServiceGetTickPackClient struct {
	grpc.ClientStream
}

func (x *bfHisDataServiceGetTickPackClient) Recv() (*bftrader.BfTickPackData, error) {
	m := new(bftrader.BfTickPackData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bfHisDataServiceClient) GetBar(ctx context.Context, in *bftrader.BfGetBarReq, opts ...grpc.CallOption) (BfHisDataService_GetBarClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_BfHisDataService_serviceDesc.Streams[1], c.cc, "/bftrader.bfhisdata.BfHisDataService/GetBar", opts...)
	if err != nil {
		return nil, err
	}
	x := &bfHisDataServiceGetBarClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BfHisDataService_GetBarClient interface {
	Recv() (*bftrader.BfBarData, error)
	grpc.ClientStream
}

type bfHisDataServiceGetBarClient struct {
	grpc.ClientStream
}

func (x *bfHisDataServiceGetBarClient) Recv() (*bftrader.BfBarData, error) {
	m := new(bftrader.BfBarData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for BfHisDataService service

type BfHisDataServiceServer interface {
	// 保存tick，1分钟一打包，(todo:改成req，增加key需要的参数，ticks直接发bytes)
	InsertTickPack(context.Context, *bftrader.BfTickPackData) (*bftrader.BfVoid, error)
	// 保存bar (todo:改成req，增加key需要的参数，bar直接发bytes)
	InsertBar(context.Context, *bftrader.BfBarData) (*bftrader.BfVoid, error)
	// 获取tick
	GetTickPack(*bftrader.BfGetTickPackReq, BfHisDataService_GetTickPackServer) error
	// 获取bar
	GetBar(*bftrader.BfGetBarReq, BfHisDataService_GetBarServer) error
}

func RegisterBfHisDataServiceServer(s *grpc.Server, srv BfHisDataServiceServer) {
	s.RegisterService(&_BfHisDataService_serviceDesc, srv)
}

func _BfHisDataService_InsertTickPack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(bftrader.BfTickPackData)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BfHisDataServiceServer).InsertTickPack(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _BfHisDataService_InsertBar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(bftrader.BfBarData)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BfHisDataServiceServer).InsertBar(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _BfHisDataService_GetTickPack_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(bftrader.BfGetTickPackReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BfHisDataServiceServer).GetTickPack(m, &bfHisDataServiceGetTickPackServer{stream})
}

type BfHisDataService_GetTickPackServer interface {
	Send(*bftrader.BfTickPackData) error
	grpc.ServerStream
}

type bfHisDataServiceGetTickPackServer struct {
	grpc.ServerStream
}

func (x *bfHisDataServiceGetTickPackServer) Send(m *bftrader.BfTickPackData) error {
	return x.ServerStream.SendMsg(m)
}

func _BfHisDataService_GetBar_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(bftrader.BfGetBarReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BfHisDataServiceServer).GetBar(m, &bfHisDataServiceGetBarServer{stream})
}

type BfHisDataService_GetBarServer interface {
	Send(*bftrader.BfBarData) error
	grpc.ServerStream
}

type bfHisDataServiceGetBarServer struct {
	grpc.ServerStream
}

func (x *bfHisDataServiceGetBarServer) Send(m *bftrader.BfBarData) error {
	return x.ServerStream.SendMsg(m)
}

var _BfHisDataService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bftrader.bfhisdata.BfHisDataService",
	HandlerType: (*BfHisDataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsertTickPack",
			Handler:    _BfHisDataService_InsertTickPack_Handler,
		},
		{
			MethodName: "InsertBar",
			Handler:    _BfHisDataService_InsertBar_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetTickPack",
			Handler:       _BfHisDataService_GetTickPack_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetBar",
			Handler:       _BfHisDataService_GetBar_Handler,
			ServerStreams: true,
		},
	},
}

var fileDescriptor0 = []byte{
	// 189 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x4f, 0x4a, 0xcb, 0xc8,
	0x2c, 0x4e, 0x49, 0x2c, 0x49, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x4a, 0x4a, 0x2b,
	0x29, 0x4a, 0x4c, 0x49, 0x2d, 0xd2, 0x83, 0xcb, 0x48, 0xf1, 0xc1, 0xc5, 0xc0, 0x6a, 0x8c, 0xba,
	0x99, 0xb8, 0x04, 0x9c, 0xd2, 0x3c, 0x32, 0x8b, 0x5d, 0x80, 0xb2, 0xc1, 0xa9, 0x45, 0x65, 0x99,
	0xc9, 0xa9, 0x42, 0x76, 0x5c, 0x7c, 0x9e, 0x79, 0xc5, 0xa9, 0x45, 0x25, 0x21, 0x99, 0xc9, 0xd9,
	0x01, 0x89, 0xc9, 0xd9, 0x42, 0x12, 0x7a, 0x70, 0x7d, 0x4e, 0x69, 0x30, 0x51, 0x90, 0x16, 0x29,
	0x01, 0x64, 0x99, 0xb0, 0xfc, 0xcc, 0x14, 0x25, 0x06, 0x21, 0x13, 0x2e, 0x4e, 0x88, 0x7e, 0xa7,
	0xc4, 0x22, 0x21, 0x61, 0x64, 0x05, 0x40, 0x01, 0x9c, 0xba, 0xdc, 0xb9, 0xb8, 0xdd, 0x53, 0x11,
	0x56, 0x4a, 0x21, 0x2b, 0x41, 0x92, 0x08, 0x4a, 0x2d, 0x94, 0xc2, 0xe9, 0x1c, 0x25, 0x06, 0x03,
	0x46, 0x21, 0x0b, 0x2e, 0x36, 0xa0, 0x7a, 0x90, 0xdd, 0xa2, 0x68, 0x66, 0x00, 0xc5, 0x40, 0xda,
	0xb1, 0x39, 0x09, 0xa4, 0xd3, 0x89, 0xf9, 0x07, 0x23, 0x63, 0x12, 0x1b, 0x38, 0x64, 0x8c, 0x01,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x12, 0xa1, 0x2a, 0xfd, 0x50, 0x01, 0x00, 0x00,
}
