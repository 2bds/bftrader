// Code generated by protoc-gen-go.
// source: bfcta.proto
// DO NOT EDIT!

/*
Package bftrader is a generated protocol buffer package.

package bftrader.bfcta;

It is generated from these files:
	bfcta.proto

It has these top-level messages:
	BfModelData
	BfRobotData
	BfGatewayData
	BfOrderExData
*/
package bftrader

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import bftrader1 "."
import google_protobuf "google/protobuf"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

// 模型实现采用的语言和发布方式
type BfModelLangType int32

const (
	BfModelLangType_MODELLANG_UNKNOWN      BfModelLangType = 0
	BfModelLangType_MODELLANG_PYTHONSCRIPT BfModelLangType = 1
	BfModelLangType_MODELLANG_GOLANGEXE    BfModelLangType = 2
	BfModelLangType_MODELLANG_CPPEXE       BfModelLangType = 3
	BfModelLangType_MODELLANG_CPPDLL       BfModelLangType = 4
)

var BfModelLangType_name = map[int32]string{
	0: "MODELLANG_UNKNOWN",
	1: "MODELLANG_PYTHONSCRIPT",
	2: "MODELLANG_GOLANGEXE",
	3: "MODELLANG_CPPEXE",
	4: "MODELLANG_CPPDLL",
}
var BfModelLangType_value = map[string]int32{
	"MODELLANG_UNKNOWN":      0,
	"MODELLANG_PYTHONSCRIPT": 1,
	"MODELLANG_GOLANGEXE":    2,
	"MODELLANG_CPPEXE":       3,
	"MODELLANG_CPPDLL":       4,
}

func (x BfModelLangType) String() string {
	return proto.EnumName(BfModelLangType_name, int32(x))
}
func (BfModelLangType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// 模型信息类
type BfModelData struct {
	ModelId  string          `protobuf:"bytes,1,opt,name=modelId" json:"modelId,omitempty"`
	LangType BfModelLangType `protobuf:"varint,2,opt,name=langType,enum=bftrader.BfModelLangType" json:"langType,omitempty"`
	Path     string          `protobuf:"bytes,3,opt,name=path" json:"path,omitempty"`
}

func (m *BfModelData) Reset()                    { *m = BfModelData{} }
func (m *BfModelData) String() string            { return proto.CompactTextString(m) }
func (*BfModelData) ProtoMessage()               {}
func (*BfModelData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// 机器人信息类
type BfRobotData struct {
	RobotId   string `protobuf:"bytes,1,opt,name=robotId" json:"robotId,omitempty"`
	ModelId   string `protobuf:"bytes,2,opt,name=modelId" json:"modelId,omitempty"`
	GatewayId string `protobuf:"bytes,3,opt,name=gatewayId" json:"gatewayId,omitempty"`
	Symbol    string `protobuf:"bytes,4,opt,name=symbol" json:"symbol,omitempty"`
	Exchange  string `protobuf:"bytes,5,opt,name=exchange" json:"exchange,omitempty"`
}

func (m *BfRobotData) Reset()                    { *m = BfRobotData{} }
func (m *BfRobotData) String() string            { return proto.CompactTextString(m) }
func (*BfRobotData) ProtoMessage()               {}
func (*BfRobotData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// 网关信息类
type BfGatewayData struct {
	GatewayId string `protobuf:"bytes,1,opt,name=gatewayId" json:"gatewayId,omitempty"`
	Port      int32  `protobuf:"varint,2,opt,name=port" json:"port,omitempty"`
	Ip        string `protobuf:"bytes,3,opt,name=ip" json:"ip,omitempty"`
}

func (m *BfGatewayData) Reset()                    { *m = BfGatewayData{} }
func (m *BfGatewayData) String() string            { return proto.CompactTextString(m) }
func (*BfGatewayData) ProtoMessage()               {}
func (*BfGatewayData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// 委托<-->机器人映射信息类
type BfOrderExData struct {
	BfOrderId string `protobuf:"bytes,1,opt,name=bfOrderId" json:"bfOrderId,omitempty"`
	RobotId   string `protobuf:"bytes,2,opt,name=robotId" json:"robotId,omitempty"`
}

func (m *BfOrderExData) Reset()                    { *m = BfOrderExData{} }
func (m *BfOrderExData) String() string            { return proto.CompactTextString(m) }
func (*BfOrderExData) ProtoMessage()               {}
func (*BfOrderExData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*BfModelData)(nil), "bftrader.BfModelData")
	proto.RegisterType((*BfRobotData)(nil), "bftrader.BfRobotData")
	proto.RegisterType((*BfGatewayData)(nil), "bftrader.BfGatewayData")
	proto.RegisterType((*BfOrderExData)(nil), "bftrader.BfOrderExData")
	proto.RegisterEnum("bftrader.BfModelLangType", BfModelLangType_name, BfModelLangType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion1

// Client API for BfCtaService service

type BfCtaServiceClient interface {
	// 请求push
	Connect(ctx context.Context, in *bftrader1.BfConnectReq, opts ...grpc.CallOption) (BfCtaService_ConnectClient, error)
	// 断开push
	Disconnect(ctx context.Context, in *bftrader1.BfVoid, opts ...grpc.CallOption) (*bftrader1.BfVoid, error)
	// 活跃检测
	Ping(ctx context.Context, in *bftrader1.BfPingData, opts ...grpc.CallOption) (*bftrader1.BfPingData, error)
	// 获取策略信息，如position，用kv最方便
	GetRobotInfo(ctx context.Context, in *bftrader1.BfKvData, opts ...grpc.CallOption) (*bftrader1.BfKvData, error)
	// 发单
	SendOrder(ctx context.Context, in *bftrader1.BfSendOrderReq, opts ...grpc.CallOption) (*bftrader1.BfSendOrderResp, error)
	// 撤单
	CancelOrder(ctx context.Context, in *bftrader1.BfCancelOrderReq, opts ...grpc.CallOption) (*bftrader1.BfVoid, error)
}

type bfCtaServiceClient struct {
	cc *grpc.ClientConn
}

func NewBfCtaServiceClient(cc *grpc.ClientConn) BfCtaServiceClient {
	return &bfCtaServiceClient{cc}
}

func (c *bfCtaServiceClient) Connect(ctx context.Context, in *bftrader1.BfConnectReq, opts ...grpc.CallOption) (BfCtaService_ConnectClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_BfCtaService_serviceDesc.Streams[0], c.cc, "/bftrader.BfCtaService/Connect", opts...)
	if err != nil {
		return nil, err
	}
	x := &bfCtaServiceConnectClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BfCtaService_ConnectClient interface {
	Recv() (*google_protobuf.Any, error)
	grpc.ClientStream
}

type bfCtaServiceConnectClient struct {
	grpc.ClientStream
}

func (x *bfCtaServiceConnectClient) Recv() (*google_protobuf.Any, error) {
	m := new(google_protobuf.Any)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bfCtaServiceClient) Disconnect(ctx context.Context, in *bftrader1.BfVoid, opts ...grpc.CallOption) (*bftrader1.BfVoid, error) {
	out := new(bftrader1.BfVoid)
	err := grpc.Invoke(ctx, "/bftrader.BfCtaService/Disconnect", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bfCtaServiceClient) Ping(ctx context.Context, in *bftrader1.BfPingData, opts ...grpc.CallOption) (*bftrader1.BfPingData, error) {
	out := new(bftrader1.BfPingData)
	err := grpc.Invoke(ctx, "/bftrader.BfCtaService/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bfCtaServiceClient) GetRobotInfo(ctx context.Context, in *bftrader1.BfKvData, opts ...grpc.CallOption) (*bftrader1.BfKvData, error) {
	out := new(bftrader1.BfKvData)
	err := grpc.Invoke(ctx, "/bftrader.BfCtaService/GetRobotInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bfCtaServiceClient) SendOrder(ctx context.Context, in *bftrader1.BfSendOrderReq, opts ...grpc.CallOption) (*bftrader1.BfSendOrderResp, error) {
	out := new(bftrader1.BfSendOrderResp)
	err := grpc.Invoke(ctx, "/bftrader.BfCtaService/SendOrder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bfCtaServiceClient) CancelOrder(ctx context.Context, in *bftrader1.BfCancelOrderReq, opts ...grpc.CallOption) (*bftrader1.BfVoid, error) {
	out := new(bftrader1.BfVoid)
	err := grpc.Invoke(ctx, "/bftrader.BfCtaService/CancelOrder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BfCtaService service

type BfCtaServiceServer interface {
	// 请求push
	Connect(*bftrader1.BfConnectReq, BfCtaService_ConnectServer) error
	// 断开push
	Disconnect(context.Context, *bftrader1.BfVoid) (*bftrader1.BfVoid, error)
	// 活跃检测
	Ping(context.Context, *bftrader1.BfPingData) (*bftrader1.BfPingData, error)
	// 获取策略信息，如position，用kv最方便
	GetRobotInfo(context.Context, *bftrader1.BfKvData) (*bftrader1.BfKvData, error)
	// 发单
	SendOrder(context.Context, *bftrader1.BfSendOrderReq) (*bftrader1.BfSendOrderResp, error)
	// 撤单
	CancelOrder(context.Context, *bftrader1.BfCancelOrderReq) (*bftrader1.BfVoid, error)
}

func RegisterBfCtaServiceServer(s *grpc.Server, srv BfCtaServiceServer) {
	s.RegisterService(&_BfCtaService_serviceDesc, srv)
}

func _BfCtaService_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(bftrader1.BfConnectReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BfCtaServiceServer).Connect(m, &bfCtaServiceConnectServer{stream})
}

type BfCtaService_ConnectServer interface {
	Send(*google_protobuf.Any) error
	grpc.ServerStream
}

type bfCtaServiceConnectServer struct {
	grpc.ServerStream
}

func (x *bfCtaServiceConnectServer) Send(m *google_protobuf.Any) error {
	return x.ServerStream.SendMsg(m)
}

func _BfCtaService_Disconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(bftrader1.BfVoid)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BfCtaServiceServer).Disconnect(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _BfCtaService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(bftrader1.BfPingData)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BfCtaServiceServer).Ping(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _BfCtaService_GetRobotInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(bftrader1.BfKvData)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BfCtaServiceServer).GetRobotInfo(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _BfCtaService_SendOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(bftrader1.BfSendOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BfCtaServiceServer).SendOrder(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _BfCtaService_CancelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(bftrader1.BfCancelOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BfCtaServiceServer).CancelOrder(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _BfCtaService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bftrader.BfCtaService",
	HandlerType: (*BfCtaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Disconnect",
			Handler:    _BfCtaService_Disconnect_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _BfCtaService_Ping_Handler,
		},
		{
			MethodName: "GetRobotInfo",
			Handler:    _BfCtaService_GetRobotInfo_Handler,
		},
		{
			MethodName: "SendOrder",
			Handler:    _BfCtaService_SendOrder_Handler,
		},
		{
			MethodName: "CancelOrder",
			Handler:    _BfCtaService_CancelOrder_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _BfCtaService_Connect_Handler,
			ServerStreams: true,
		},
	},
}

var fileDescriptor0 = []byte{
	// 515 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x52, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0xad, 0xdd, 0xb4, 0x4d, 0x26, 0xa5, 0x35, 0x4b, 0x08, 0x8e, 0xc5, 0x01, 0xf9, 0x84, 0x38,
	0xb8, 0x28, 0x80, 0x84, 0x84, 0x38, 0x34, 0x1f, 0x0a, 0x51, 0xd3, 0xd8, 0x38, 0xe1, 0xeb, 0x84,
	0xd6, 0xf6, 0xda, 0xb5, 0xe4, 0x7a, 0x8d, 0xb3, 0x94, 0xe6, 0x27, 0x70, 0xe6, 0x9f, 0xf2, 0x0b,
	0xf0, 0xae, 0xed, 0xd8, 0x69, 0xc3, 0xc9, 0x3b, 0xef, 0xcd, 0xbc, 0x99, 0x79, 0x1e, 0x68, 0x3b,
	0xbe, 0xcb, 0xb0, 0x91, 0xa4, 0x94, 0x51, 0xd4, 0x74, 0x7c, 0x96, 0x62, 0x8f, 0xa4, 0xda, 0xa9,
	0xe3, 0x07, 0x98, 0x91, 0x5f, 0x78, 0x9d, 0x53, 0x5a, 0x2f, 0xa0, 0x34, 0x88, 0xc8, 0x99, 0x88,
	0x9c, 0x9f, 0xfe, 0x19, 0x8e, 0x0b, 0x4a, 0x4f, 0xa1, 0x3d, 0xf0, 0x2f, 0xa9, 0x47, 0xa2, 0x11,
	0x66, 0x18, 0xa9, 0x70, 0x74, 0xcd, 0x83, 0xa9, 0xa7, 0x4a, 0xcf, 0xa4, 0xe7, 0x2d, 0xbb, 0x0c,
	0xd1, 0x1b, 0x68, 0x46, 0x38, 0x0e, 0x96, 0xeb, 0x84, 0xa8, 0x72, 0x46, 0x9d, 0xf4, 0x7b, 0x46,
	0xd9, 0xd1, 0x28, 0x24, 0x66, 0x45, 0x82, 0xbd, 0x49, 0x45, 0x08, 0x1a, 0x09, 0x66, 0x57, 0xea,
	0xbe, 0x50, 0x13, 0x6f, 0xfd, 0x8f, 0xc4, 0x9b, 0xda, 0xd4, 0xa1, 0xac, 0x6c, 0x9a, 0xf2, 0xa0,
	0x6a, 0x5a, 0x84, 0xf5, 0x71, 0xe4, 0xed, 0x71, 0x9e, 0x42, 0xab, 0xd8, 0x31, 0xe3, 0x72, 0xf1,
	0x0a, 0x40, 0x5d, 0x38, 0x5c, 0xad, 0xaf, 0x1d, 0x1a, 0xa9, 0x0d, 0x41, 0x15, 0x11, 0xd2, 0xa0,
	0x49, 0x6e, 0xdd, 0xab, 0x6c, 0x38, 0xa2, 0x1e, 0x08, 0x66, 0x13, 0xeb, 0x1f, 0xe1, 0xc1, 0xc0,
	0x9f, 0xe4, 0x12, 0x62, 0xac, 0xad, 0x16, 0xd2, 0xdd, 0x16, 0x7c, 0x31, 0x9a, 0x32, 0x31, 0xd7,
	0x81, 0x2d, 0xde, 0xe8, 0x04, 0xe4, 0x30, 0x29, 0xa6, 0xc9, 0x5e, 0xfa, 0x84, 0x4b, 0x9a, 0x69,
	0xe6, 0xd0, 0xf8, 0xb6, 0x94, 0x74, 0x72, 0xa0, 0x92, 0xdc, 0x00, 0x75, 0x1f, 0xe4, 0x2d, 0x1f,
	0x5e, 0xfc, 0x96, 0xe0, 0xf4, 0x8e, 0xc7, 0xe8, 0x31, 0x3c, 0xbc, 0x34, 0x47, 0xe3, 0xd9, 0xec,
	0x7c, 0x3e, 0xf9, 0xfe, 0x69, 0x7e, 0x31, 0x37, 0xbf, 0xcc, 0x95, 0xbd, 0x6c, 0xc5, 0x6e, 0x05,
	0x5b, 0xdf, 0x96, 0x1f, 0xcc, 0xf9, 0x62, 0x68, 0x4f, 0xad, 0xa5, 0x22, 0xa1, 0x27, 0xf0, 0xa8,
	0xe2, 0x26, 0x26, 0xff, 0x8c, 0xbf, 0x8e, 0x15, 0x19, 0x75, 0x40, 0xa9, 0x88, 0xa1, 0x65, 0x71,
	0x74, 0xff, 0x1e, 0x3a, 0x9a, 0xcd, 0x94, 0x46, 0xff, 0xaf, 0x0c, 0xc7, 0x03, 0x7f, 0xc8, 0xf0,
	0x82, 0xa4, 0x37, 0xa1, 0x4b, 0xd0, 0x3b, 0x38, 0x1a, 0xd2, 0x38, 0x26, 0x2e, 0x43, 0xdd, 0xfa,
	0x49, 0x14, 0xa0, 0x4d, 0x7e, 0x68, 0x1d, 0x23, 0xbf, 0x40, 0xa3, 0xbc, 0x40, 0xe3, 0x3c, 0x5e,
	0xeb, 0x7b, 0x2f, 0x25, 0xd4, 0x07, 0x18, 0x85, 0x2b, 0xb7, 0xa8, 0x57, 0xea, 0xf5, 0x9f, 0x69,
	0xe8, 0x69, 0xf7, 0x10, 0x7d, 0x0f, 0xbd, 0x86, 0x86, 0x15, 0xc6, 0x01, 0xea, 0xd4, 0x39, 0x8e,
	0x70, 0x8f, 0xb5, 0x9d, 0x68, 0x56, 0xf5, 0x16, 0x8e, 0x27, 0x84, 0x89, 0xab, 0x9b, 0xc6, 0x3e,
	0x45, 0xa8, 0x9e, 0x77, 0x71, 0x23, 0x6a, 0x77, 0x60, 0x59, 0xe5, 0x00, 0x5a, 0x0b, 0x12, 0x7b,
	0xe2, 0x37, 0x21, 0xb5, 0x9e, 0xb2, 0x81, 0xf9, 0x92, 0xbd, 0xff, 0x30, 0xab, 0x24, 0xd3, 0x78,
	0x0f, 0xed, 0x21, 0x8e, 0x5d, 0x12, 0xe5, 0x2a, 0xda, 0x96, 0x51, 0x15, 0xc1, 0x75, 0x76, 0xac,
	0xec, 0x1c, 0x0a, 0xe3, 0x5e, 0xfd, 0x0b, 0x00, 0x00, 0xff, 0xff, 0xcf, 0x02, 0x89, 0x74, 0xf2,
	0x03, 0x00, 0x00,
}
