// Code generated by protoc-gen-go.
// source: bfgateway.proto
// DO NOT EDIT!

/*
Package bftrader_bfgateway is a generated protocol buffer package.

It is generated from these files:
	bfgateway.proto

It has these top-level messages:
*/
package bftrader_bfgateway

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import bftrader "."

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion1

// Client API for BfGatewayService service

type BfGatewayServiceClient interface {
	// 策略间交换数据服务,不需要connect
	// 由于涉及交易，交易又分实盘和回测，所以放到网关比较合适
	SetKv(ctx context.Context, in *bftrader.BfKvData, opts ...grpc.CallOption) (*bftrader.BfVoid, error)
	GetKv(ctx context.Context, in *bftrader.BfKvData, opts ...grpc.CallOption) (*bftrader.BfKvData, error)
	// 获取可交易合约信息,不需要connect
	GetContract(ctx context.Context, in *bftrader.BfGetContractReq, opts ...grpc.CallOption) (*bftrader.BfContractData, error)
	GetContractList(ctx context.Context, in *bftrader.BfVoid, opts ...grpc.CallOption) (BfGatewayService_GetContractListClient, error)
	// 建立连接
	//
	// 策略间是完全隔离的，gateway在connect时候分配robot线程
	// robot对象，将robot对象移动到robot线程，并记录<peer,robotobj>
	// map<peer,robotobj> 用于分离rpc命令,servercontext::get_peer
	// map<reqid,robotobj> 用于分离请求的回报
	// map<orderid,robotobj> 用于分离委托推送
	// map<orderref,orderid> 分离撮合平台委托回报比如CTP
	// map<sysid,orderid> 分离交易所委托回报
	// map<tradeid,robotobj> 用于分离成交推送
	// map<symbol,robotobjlist> 用于分离行情推送
	Connect(ctx context.Context, in *bftrader.BfConnectReq, opts ...grpc.CallOption) (*bftrader.BfVoid, error)
	// 订阅行情
	Subscribe(ctx context.Context, in *bftrader.BfSubscribeReq, opts ...grpc.CallOption) (*bftrader.BfVoid, error)
	// 发单
	SendOrder(ctx context.Context, in *bftrader.BfOrderReq, opts ...grpc.CallOption) (*bftrader.BfOrderResponse, error)
	// 撤单
	CancelOrder(ctx context.Context, in *bftrader.BfCancelOrderReq, opts ...grpc.CallOption) (*bftrader.BfVoid, error)
	// 查询账户信息
	QueryAccount(ctx context.Context, in *bftrader.BfVoid, opts ...grpc.CallOption) (*bftrader.BfVoid, error)
	// 查询持仓信息
	QueryPosition(ctx context.Context, in *bftrader.BfVoid, opts ...grpc.CallOption) (*bftrader.BfVoid, error)
	// 关闭连接
	Close(ctx context.Context, in *bftrader.BfVoid, opts ...grpc.CallOption) (*bftrader.BfVoid, error)
}

type bfGatewayServiceClient struct {
	cc *grpc.ClientConn
}

func NewBfGatewayServiceClient(cc *grpc.ClientConn) BfGatewayServiceClient {
	return &bfGatewayServiceClient{cc}
}

func (c *bfGatewayServiceClient) SetKv(ctx context.Context, in *bftrader.BfKvData, opts ...grpc.CallOption) (*bftrader.BfVoid, error) {
	out := new(bftrader.BfVoid)
	err := grpc.Invoke(ctx, "/bftrader.bfgateway.BfGatewayService/SetKv", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bfGatewayServiceClient) GetKv(ctx context.Context, in *bftrader.BfKvData, opts ...grpc.CallOption) (*bftrader.BfKvData, error) {
	out := new(bftrader.BfKvData)
	err := grpc.Invoke(ctx, "/bftrader.bfgateway.BfGatewayService/GetKv", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bfGatewayServiceClient) GetContract(ctx context.Context, in *bftrader.BfGetContractReq, opts ...grpc.CallOption) (*bftrader.BfContractData, error) {
	out := new(bftrader.BfContractData)
	err := grpc.Invoke(ctx, "/bftrader.bfgateway.BfGatewayService/GetContract", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bfGatewayServiceClient) GetContractList(ctx context.Context, in *bftrader.BfVoid, opts ...grpc.CallOption) (BfGatewayService_GetContractListClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_BfGatewayService_serviceDesc.Streams[0], c.cc, "/bftrader.bfgateway.BfGatewayService/GetContractList", opts...)
	if err != nil {
		return nil, err
	}
	x := &bfGatewayServiceGetContractListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BfGatewayService_GetContractListClient interface {
	Recv() (*bftrader.BfContractData, error)
	grpc.ClientStream
}

type bfGatewayServiceGetContractListClient struct {
	grpc.ClientStream
}

func (x *bfGatewayServiceGetContractListClient) Recv() (*bftrader.BfContractData, error) {
	m := new(bftrader.BfContractData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bfGatewayServiceClient) Connect(ctx context.Context, in *bftrader.BfConnectReq, opts ...grpc.CallOption) (*bftrader.BfVoid, error) {
	out := new(bftrader.BfVoid)
	err := grpc.Invoke(ctx, "/bftrader.bfgateway.BfGatewayService/Connect", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bfGatewayServiceClient) Subscribe(ctx context.Context, in *bftrader.BfSubscribeReq, opts ...grpc.CallOption) (*bftrader.BfVoid, error) {
	out := new(bftrader.BfVoid)
	err := grpc.Invoke(ctx, "/bftrader.bfgateway.BfGatewayService/Subscribe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bfGatewayServiceClient) SendOrder(ctx context.Context, in *bftrader.BfOrderReq, opts ...grpc.CallOption) (*bftrader.BfOrderResponse, error) {
	out := new(bftrader.BfOrderResponse)
	err := grpc.Invoke(ctx, "/bftrader.bfgateway.BfGatewayService/SendOrder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bfGatewayServiceClient) CancelOrder(ctx context.Context, in *bftrader.BfCancelOrderReq, opts ...grpc.CallOption) (*bftrader.BfVoid, error) {
	out := new(bftrader.BfVoid)
	err := grpc.Invoke(ctx, "/bftrader.bfgateway.BfGatewayService/CancelOrder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bfGatewayServiceClient) QueryAccount(ctx context.Context, in *bftrader.BfVoid, opts ...grpc.CallOption) (*bftrader.BfVoid, error) {
	out := new(bftrader.BfVoid)
	err := grpc.Invoke(ctx, "/bftrader.bfgateway.BfGatewayService/QueryAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bfGatewayServiceClient) QueryPosition(ctx context.Context, in *bftrader.BfVoid, opts ...grpc.CallOption) (*bftrader.BfVoid, error) {
	out := new(bftrader.BfVoid)
	err := grpc.Invoke(ctx, "/bftrader.bfgateway.BfGatewayService/QueryPosition", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bfGatewayServiceClient) Close(ctx context.Context, in *bftrader.BfVoid, opts ...grpc.CallOption) (*bftrader.BfVoid, error) {
	out := new(bftrader.BfVoid)
	err := grpc.Invoke(ctx, "/bftrader.bfgateway.BfGatewayService/Close", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BfGatewayService service

type BfGatewayServiceServer interface {
	// 策略间交换数据服务,不需要connect
	// 由于涉及交易，交易又分实盘和回测，所以放到网关比较合适
	SetKv(context.Context, *bftrader.BfKvData) (*bftrader.BfVoid, error)
	GetKv(context.Context, *bftrader.BfKvData) (*bftrader.BfKvData, error)
	// 获取可交易合约信息,不需要connect
	GetContract(context.Context, *bftrader.BfGetContractReq) (*bftrader.BfContractData, error)
	GetContractList(*bftrader.BfVoid, BfGatewayService_GetContractListServer) error
	// 建立连接
	//
	// 策略间是完全隔离的，gateway在connect时候分配robot线程
	// robot对象，将robot对象移动到robot线程，并记录<peer,robotobj>
	// map<peer,robotobj> 用于分离rpc命令,servercontext::get_peer
	// map<reqid,robotobj> 用于分离请求的回报
	// map<orderid,robotobj> 用于分离委托推送
	// map<orderref,orderid> 分离撮合平台委托回报比如CTP
	// map<sysid,orderid> 分离交易所委托回报
	// map<tradeid,robotobj> 用于分离成交推送
	// map<symbol,robotobjlist> 用于分离行情推送
	Connect(context.Context, *bftrader.BfConnectReq) (*bftrader.BfVoid, error)
	// 订阅行情
	Subscribe(context.Context, *bftrader.BfSubscribeReq) (*bftrader.BfVoid, error)
	// 发单
	SendOrder(context.Context, *bftrader.BfOrderReq) (*bftrader.BfOrderResponse, error)
	// 撤单
	CancelOrder(context.Context, *bftrader.BfCancelOrderReq) (*bftrader.BfVoid, error)
	// 查询账户信息
	QueryAccount(context.Context, *bftrader.BfVoid) (*bftrader.BfVoid, error)
	// 查询持仓信息
	QueryPosition(context.Context, *bftrader.BfVoid) (*bftrader.BfVoid, error)
	// 关闭连接
	Close(context.Context, *bftrader.BfVoid) (*bftrader.BfVoid, error)
}

func RegisterBfGatewayServiceServer(s *grpc.Server, srv BfGatewayServiceServer) {
	s.RegisterService(&_BfGatewayService_serviceDesc, srv)
}

func _BfGatewayService_SetKv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(bftrader.BfKvData)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BfGatewayServiceServer).SetKv(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _BfGatewayService_GetKv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(bftrader.BfKvData)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BfGatewayServiceServer).GetKv(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _BfGatewayService_GetContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(bftrader.BfGetContractReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BfGatewayServiceServer).GetContract(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _BfGatewayService_GetContractList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(bftrader.BfVoid)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BfGatewayServiceServer).GetContractList(m, &bfGatewayServiceGetContractListServer{stream})
}

type BfGatewayService_GetContractListServer interface {
	Send(*bftrader.BfContractData) error
	grpc.ServerStream
}

type bfGatewayServiceGetContractListServer struct {
	grpc.ServerStream
}

func (x *bfGatewayServiceGetContractListServer) Send(m *bftrader.BfContractData) error {
	return x.ServerStream.SendMsg(m)
}

func _BfGatewayService_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(bftrader.BfConnectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BfGatewayServiceServer).Connect(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _BfGatewayService_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(bftrader.BfSubscribeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BfGatewayServiceServer).Subscribe(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _BfGatewayService_SendOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(bftrader.BfOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BfGatewayServiceServer).SendOrder(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _BfGatewayService_CancelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(bftrader.BfCancelOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BfGatewayServiceServer).CancelOrder(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _BfGatewayService_QueryAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(bftrader.BfVoid)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BfGatewayServiceServer).QueryAccount(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _BfGatewayService_QueryPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(bftrader.BfVoid)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BfGatewayServiceServer).QueryPosition(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _BfGatewayService_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(bftrader.BfVoid)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BfGatewayServiceServer).Close(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _BfGatewayService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bftrader.bfgateway.BfGatewayService",
	HandlerType: (*BfGatewayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetKv",
			Handler:    _BfGatewayService_SetKv_Handler,
		},
		{
			MethodName: "GetKv",
			Handler:    _BfGatewayService_GetKv_Handler,
		},
		{
			MethodName: "GetContract",
			Handler:    _BfGatewayService_GetContract_Handler,
		},
		{
			MethodName: "Connect",
			Handler:    _BfGatewayService_Connect_Handler,
		},
		{
			MethodName: "Subscribe",
			Handler:    _BfGatewayService_Subscribe_Handler,
		},
		{
			MethodName: "SendOrder",
			Handler:    _BfGatewayService_SendOrder_Handler,
		},
		{
			MethodName: "CancelOrder",
			Handler:    _BfGatewayService_CancelOrder_Handler,
		},
		{
			MethodName: "QueryAccount",
			Handler:    _BfGatewayService_QueryAccount_Handler,
		},
		{
			MethodName: "QueryPosition",
			Handler:    _BfGatewayService_QueryPosition_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _BfGatewayService_Close_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetContractList",
			Handler:       _BfGatewayService_GetContractList_Handler,
			ServerStreams: true,
		},
	},
}

var fileDescriptor0 = []byte{
	// 298 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x92, 0x4d, 0x4b, 0xc3, 0x40,
	0x10, 0x86, 0x0d, 0x12, 0xc5, 0xa9, 0xda, 0xb2, 0x88, 0x68, 0x8e, 0xde, 0x8d, 0x9f, 0x3d, 0x78,
	0x50, 0x68, 0xa2, 0xf4, 0x50, 0xc1, 0x8f, 0x80, 0xf7, 0xcd, 0x66, 0x22, 0x0b, 0x65, 0xb7, 0xee,
	0x6e, 0x22, 0xfd, 0x11, 0xfe, 0x5f, 0x8f, 0x6e, 0x52, 0x0d, 0x5b, 0x4d, 0xa4, 0xd7, 0xe7, 0x7d,
	0x9f, 0xd9, 0xc9, 0x10, 0xe8, 0xa7, 0xf9, 0x2b, 0x35, 0xf8, 0x4e, 0xe7, 0xe1, 0x4c, 0x49, 0x23,
	0x09, 0x49, 0x73, 0xa3, 0x68, 0x86, 0x2a, 0x6c, 0x92, 0x60, 0xb7, 0x61, 0x75, 0xe7, 0xfc, 0xc3,
	0x87, 0x41, 0x94, 0x8f, 0x17, 0x69, 0x82, 0xaa, 0xe4, 0x0c, 0xc9, 0x09, 0xf8, 0x09, 0x9a, 0x49,
	0x49, 0x48, 0xd8, 0xd4, 0xa3, 0x7c, 0x52, 0xde, 0x52, 0x43, 0x83, 0x81, 0xcb, 0x5e, 0x24, 0xcf,
	0x8e, 0xd6, 0xc8, 0x19, 0xf8, 0xe3, 0x4e, 0xa1, 0x85, 0x59, 0xe5, 0x0e, 0x7a, 0x56, 0x89, 0xa5,
	0xb0, 0x11, 0x33, 0x24, 0x70, 0x4b, 0x4e, 0xf0, 0x8c, 0x6f, 0xc1, 0x81, 0x9b, 0xfd, 0x04, 0xdf,
	0x63, 0x46, 0xd0, 0x77, 0xda, 0xf7, 0x5c, 0x1b, 0xf2, 0x67, 0xc1, 0xff, 0x06, 0x9c, 0x7a, 0x64,
	0x08, 0x9b, 0x96, 0x09, 0xb4, 0x5b, 0xec, 0xff, 0x2a, 0x56, 0xb0, 0xda, 0xa0, 0xed, 0x9b, 0xaf,
	0x60, 0x2b, 0x29, 0x52, 0xcd, 0x14, 0x4f, 0x91, 0x2c, 0xbd, 0xd0, 0xe0, 0x2e, 0xf5, 0xc6, 0xaa,
	0x28, 0xb2, 0x07, 0x65, 0x29, 0xd9, 0x73, 0x0b, 0x35, 0xaa, 0xb4, 0xc3, 0x16, 0xaa, 0x67, 0x52,
	0x68, 0xb4, 0xfe, 0x35, 0xf4, 0x62, 0x2a, 0x18, 0x4e, 0x17, 0x13, 0x96, 0x6e, 0xe7, 0x04, 0x5d,
	0xcf, 0x5f, 0xc2, 0xf6, 0x53, 0x81, 0x6a, 0x3e, 0x62, 0x4c, 0x16, 0xa2, 0xed, 0x60, 0x6d, 0xd6,
	0x10, 0x76, 0x6a, 0xeb, 0x51, 0x6a, 0x6e, 0xb8, 0x14, 0x2b, 0x6a, 0xc7, 0xe0, 0xc7, 0x53, 0xa9,
	0x71, 0xb5, 0x7a, 0xb4, 0xfe, 0xe9, 0x79, 0xe9, 0x46, 0xfd, 0x6f, 0x5e, 0x7c, 0x05, 0x00, 0x00,
	0xff, 0xff, 0x97, 0x71, 0x5d, 0x03, 0xd2, 0x02, 0x00, 0x00,
}
