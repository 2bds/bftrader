// Code generated by protoc-gen-go.
// source: bfdatafeed.proto
// DO NOT EDIT!

/*
Package bftrader_bfdatafeed is a generated protocol buffer package.

It is generated from these files:
	bfdatafeed.proto

It has these top-level messages:
*/
package bftrader_bfdatafeed

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import bftrader "."

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion1

// Client API for BfDatafeedService service

type BfDatafeedServiceClient interface {
	// 保存tick
	InsertTick(ctx context.Context, in *bftrader.BfTickData, opts ...grpc.CallOption) (*bftrader.BfVoid, error)
	// 保存bar (todo:改成req，增加key需要的参数，bar直接发bytes)
	InsertBar(ctx context.Context, in *bftrader.BfBarData, opts ...grpc.CallOption) (*bftrader.BfVoid, error)
	// 获取tick
	GetTickPack(ctx context.Context, in *bftrader.BfGetTickReq, opts ...grpc.CallOption) (BfDatafeedService_GetTickPackClient, error)
	// 获取bar
	GetBar(ctx context.Context, in *bftrader.BfGetBarReq, opts ...grpc.CallOption) (BfDatafeedService_GetBarClient, error)
}

type bfDatafeedServiceClient struct {
	cc *grpc.ClientConn
}

func NewBfDatafeedServiceClient(cc *grpc.ClientConn) BfDatafeedServiceClient {
	return &bfDatafeedServiceClient{cc}
}

func (c *bfDatafeedServiceClient) InsertTick(ctx context.Context, in *bftrader.BfTickData, opts ...grpc.CallOption) (*bftrader.BfVoid, error) {
	out := new(bftrader.BfVoid)
	err := grpc.Invoke(ctx, "/bftrader.bfdatafeed.BfDatafeedService/InsertTick", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bfDatafeedServiceClient) InsertBar(ctx context.Context, in *bftrader.BfBarData, opts ...grpc.CallOption) (*bftrader.BfVoid, error) {
	out := new(bftrader.BfVoid)
	err := grpc.Invoke(ctx, "/bftrader.bfdatafeed.BfDatafeedService/InsertBar", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bfDatafeedServiceClient) GetTickPack(ctx context.Context, in *bftrader.BfGetTickReq, opts ...grpc.CallOption) (BfDatafeedService_GetTickPackClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_BfDatafeedService_serviceDesc.Streams[0], c.cc, "/bftrader.bfdatafeed.BfDatafeedService/GetTickPack", opts...)
	if err != nil {
		return nil, err
	}
	x := &bfDatafeedServiceGetTickPackClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BfDatafeedService_GetTickPackClient interface {
	Recv() (*bftrader.BfTickData, error)
	grpc.ClientStream
}

type bfDatafeedServiceGetTickPackClient struct {
	grpc.ClientStream
}

func (x *bfDatafeedServiceGetTickPackClient) Recv() (*bftrader.BfTickData, error) {
	m := new(bftrader.BfTickData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bfDatafeedServiceClient) GetBar(ctx context.Context, in *bftrader.BfGetBarReq, opts ...grpc.CallOption) (BfDatafeedService_GetBarClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_BfDatafeedService_serviceDesc.Streams[1], c.cc, "/bftrader.bfdatafeed.BfDatafeedService/GetBar", opts...)
	if err != nil {
		return nil, err
	}
	x := &bfDatafeedServiceGetBarClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BfDatafeedService_GetBarClient interface {
	Recv() (*bftrader.BfBarData, error)
	grpc.ClientStream
}

type bfDatafeedServiceGetBarClient struct {
	grpc.ClientStream
}

func (x *bfDatafeedServiceGetBarClient) Recv() (*bftrader.BfBarData, error) {
	m := new(bftrader.BfBarData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for BfDatafeedService service

type BfDatafeedServiceServer interface {
	// 保存tick
	InsertTick(context.Context, *bftrader.BfTickData) (*bftrader.BfVoid, error)
	// 保存bar (todo:改成req，增加key需要的参数，bar直接发bytes)
	InsertBar(context.Context, *bftrader.BfBarData) (*bftrader.BfVoid, error)
	// 获取tick
	GetTickPack(*bftrader.BfGetTickReq, BfDatafeedService_GetTickPackServer) error
	// 获取bar
	GetBar(*bftrader.BfGetBarReq, BfDatafeedService_GetBarServer) error
}

func RegisterBfDatafeedServiceServer(s *grpc.Server, srv BfDatafeedServiceServer) {
	s.RegisterService(&_BfDatafeedService_serviceDesc, srv)
}

func _BfDatafeedService_InsertTick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(bftrader.BfTickData)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BfDatafeedServiceServer).InsertTick(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _BfDatafeedService_InsertBar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(bftrader.BfBarData)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BfDatafeedServiceServer).InsertBar(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _BfDatafeedService_GetTickPack_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(bftrader.BfGetTickReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BfDatafeedServiceServer).GetTickPack(m, &bfDatafeedServiceGetTickPackServer{stream})
}

type BfDatafeedService_GetTickPackServer interface {
	Send(*bftrader.BfTickData) error
	grpc.ServerStream
}

type bfDatafeedServiceGetTickPackServer struct {
	grpc.ServerStream
}

func (x *bfDatafeedServiceGetTickPackServer) Send(m *bftrader.BfTickData) error {
	return x.ServerStream.SendMsg(m)
}

func _BfDatafeedService_GetBar_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(bftrader.BfGetBarReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BfDatafeedServiceServer).GetBar(m, &bfDatafeedServiceGetBarServer{stream})
}

type BfDatafeedService_GetBarServer interface {
	Send(*bftrader.BfBarData) error
	grpc.ServerStream
}

type bfDatafeedServiceGetBarServer struct {
	grpc.ServerStream
}

func (x *bfDatafeedServiceGetBarServer) Send(m *bftrader.BfBarData) error {
	return x.ServerStream.SendMsg(m)
}

var _BfDatafeedService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bftrader.bfdatafeed.BfDatafeedService",
	HandlerType: (*BfDatafeedServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsertTick",
			Handler:    _BfDatafeedService_InsertTick_Handler,
		},
		{
			MethodName: "InsertBar",
			Handler:    _BfDatafeedService_InsertBar_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetTickPack",
			Handler:       _BfDatafeedService_GetTickPack_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetBar",
			Handler:       _BfDatafeedService_GetBar_Handler,
			ServerStreams: true,
		},
	},
}

var fileDescriptor0 = []byte{
	// 187 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0x48, 0x4a, 0x4b, 0x49,
	0x2c, 0x49, 0x4c, 0x4b, 0x4d, 0x4d, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x4e, 0x4a,
	0x2b, 0x29, 0x4a, 0x4c, 0x49, 0x2d, 0xd2, 0x43, 0x48, 0x49, 0xf1, 0xc1, 0x05, 0xc1, 0x8a, 0x8c,
	0xfe, 0x30, 0x72, 0x09, 0x3a, 0xa5, 0xb9, 0x40, 0xa5, 0x83, 0x53, 0x8b, 0xca, 0x32, 0x93, 0x53,
	0x85, 0xcc, 0xb8, 0xb8, 0x3c, 0xf3, 0x8a, 0x53, 0x8b, 0x4a, 0x42, 0x32, 0x93, 0xb3, 0x85, 0x44,
	0xf4, 0xe0, 0x9a, 0x9c, 0xd2, 0x40, 0x22, 0x20, 0xe5, 0x52, 0x02, 0xc8, 0xa2, 0x61, 0xf9, 0x99,
	0x29, 0x4a, 0x0c, 0x42, 0x26, 0x5c, 0x9c, 0x10, 0x7d, 0x4e, 0x89, 0x45, 0x42, 0xc2, 0xc8, 0x0a,
	0x80, 0x02, 0x38, 0x75, 0xd9, 0x73, 0x71, 0xbb, 0xa7, 0x82, 0xad, 0x0a, 0x48, 0x04, 0x5a, 0x27,
	0x86, 0xac, 0x04, 0x2a, 0x11, 0x94, 0x5a, 0x28, 0x85, 0xd5, 0x19, 0x4a, 0x0c, 0x06, 0x8c, 0x42,
	0x16, 0x5c, 0x6c, 0x40, 0x75, 0x20, 0x3b, 0x45, 0xd1, 0xf4, 0x02, 0xc5, 0x40, 0x5a, 0xb1, 0x39,
	0x05, 0xa4, 0xd3, 0x89, 0xf9, 0x07, 0x23, 0x63, 0x12, 0x1b, 0x38, 0x28, 0x8c, 0x01, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x86, 0x91, 0x3b, 0xb8, 0x43, 0x01, 0x00, 0x00,
}
