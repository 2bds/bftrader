// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bftrader.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "bftrader.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace bftrader {

namespace {

const ::google::protobuf::Descriptor* BfVoid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BfVoid_reflection_ = NULL;
const ::google::protobuf::Descriptor* BfDailyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BfDailyInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BfBidAskInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BfBidAskInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BfOHLCInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BfOHLCInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BfTickData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BfTickData_reflection_ = NULL;
const ::google::protobuf::Descriptor* BfTickPackData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BfTickPackData_reflection_ = NULL;
const ::google::protobuf::Descriptor* BfBarData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BfBarData_reflection_ = NULL;
const ::google::protobuf::Descriptor* BfTradeData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BfTradeData_reflection_ = NULL;
const ::google::protobuf::Descriptor* BfOrderData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BfOrderData_reflection_ = NULL;
const ::google::protobuf::Descriptor* BfPositionData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BfPositionData_reflection_ = NULL;
const ::google::protobuf::Descriptor* BfAccountData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BfAccountData_reflection_ = NULL;
const ::google::protobuf::Descriptor* BfErrorData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BfErrorData_reflection_ = NULL;
const ::google::protobuf::Descriptor* BfLogData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BfLogData_reflection_ = NULL;
const ::google::protobuf::Descriptor* BfContractData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BfContractData_reflection_ = NULL;
const ::google::protobuf::Descriptor* BfKvData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BfKvData_reflection_ = NULL;
const ::google::protobuf::Descriptor* BfSubscribeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BfSubscribeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* BfOrderReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BfOrderReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* BfOrderResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BfOrderResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* BfCancelOrderReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BfCancelOrderReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* BfConnectReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BfConnectReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* BfGetContractReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BfGetContractReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* BfGetTickPackReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BfGetTickPackReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* BfGetBarReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BfGetBarReq_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BfDirection_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BfOffset_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BfStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BfProduct_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BfPriceType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BfExchange_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BfPeriod_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_bftrader_2eproto() {
  protobuf_AddDesc_bftrader_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "bftrader.proto");
  GOOGLE_CHECK(file != NULL);
  BfVoid_descriptor_ = file->message_type(0);
  static const int BfVoid_offsets_[1] = {
  };
  BfVoid_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BfVoid_descriptor_,
      BfVoid::default_instance_,
      BfVoid_offsets_,
      -1,
      -1,
      -1,
      sizeof(BfVoid),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfVoid, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfVoid, _is_default_instance_));
  BfDailyInfo_descriptor_ = file->message_type(1);
  static const int BfDailyInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfDailyInfo, openprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfDailyInfo, highprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfDailyInfo, lowprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfDailyInfo, precloseprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfDailyInfo, upperlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfDailyInfo, lowerlimit_),
  };
  BfDailyInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BfDailyInfo_descriptor_,
      BfDailyInfo::default_instance_,
      BfDailyInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(BfDailyInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfDailyInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfDailyInfo, _is_default_instance_));
  BfBidAskInfo_descriptor_ = file->message_type(2);
  static const int BfBidAskInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfBidAskInfo, bidprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfBidAskInfo, askprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfBidAskInfo, bidvolume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfBidAskInfo, askvolume_),
  };
  BfBidAskInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BfBidAskInfo_descriptor_,
      BfBidAskInfo::default_instance_,
      BfBidAskInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(BfBidAskInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfBidAskInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfBidAskInfo, _is_default_instance_));
  BfOHLCInfo_descriptor_ = file->message_type(3);
  static const int BfOHLCInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfOHLCInfo, openprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfOHLCInfo, highprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfOHLCInfo, lowprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfOHLCInfo, closeprice_),
  };
  BfOHLCInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BfOHLCInfo_descriptor_,
      BfOHLCInfo::default_instance_,
      BfOHLCInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(BfOHLCInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfOHLCInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfOHLCInfo, _is_default_instance_));
  BfTickData_descriptor_ = file->message_type(4);
  static const int BfTickData_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfTickData, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfTickData, exchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfTickData, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfTickData, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfTickData, lastprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfTickData, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfTickData, openinterest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfTickData, lastvolume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfTickData, lastopeninterest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfTickData, bidaskinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfTickData, dailyinfo_),
  };
  BfTickData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BfTickData_descriptor_,
      BfTickData::default_instance_,
      BfTickData_offsets_,
      -1,
      -1,
      -1,
      sizeof(BfTickData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfTickData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfTickData, _is_default_instance_));
  BfTickPackData_descriptor_ = file->message_type(5);
  static const int BfTickPackData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfTickPackData, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfTickPackData, exchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfTickPackData, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfTickPackData, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfTickPackData, ticks_),
  };
  BfTickPackData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BfTickPackData_descriptor_,
      BfTickPackData::default_instance_,
      BfTickPackData_offsets_,
      -1,
      -1,
      -1,
      sizeof(BfTickPackData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfTickPackData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfTickPackData, _is_default_instance_));
  BfBarData_descriptor_ = file->message_type(6);
  static const int BfBarData_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfBarData, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfBarData, exchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfBarData, period_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfBarData, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfBarData, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfBarData, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfBarData, openinterest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfBarData, lastvolume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfBarData, lastopeninterest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfBarData, ohlcinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfBarData, dailyinfo_),
  };
  BfBarData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BfBarData_descriptor_,
      BfBarData::default_instance_,
      BfBarData_offsets_,
      -1,
      -1,
      -1,
      sizeof(BfBarData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfBarData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfBarData, _is_default_instance_));
  BfTradeData_descriptor_ = file->message_type(7);
  static const int BfTradeData_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfTradeData, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfTradeData, exchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfTradeData, tradeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfTradeData, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfTradeData, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfTradeData, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfTradeData, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfTradeData, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfTradeData, tradetime_),
  };
  BfTradeData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BfTradeData_descriptor_,
      BfTradeData::default_instance_,
      BfTradeData_offsets_,
      -1,
      -1,
      -1,
      sizeof(BfTradeData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfTradeData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfTradeData, _is_default_instance_));
  BfOrderData_descriptor_ = file->message_type(8);
  static const int BfOrderData_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfOrderData, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfOrderData, exchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfOrderData, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfOrderData, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfOrderData, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfOrderData, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfOrderData, totalvolume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfOrderData, tradedvolume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfOrderData, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfOrderData, ordertime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfOrderData, canceltime_),
  };
  BfOrderData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BfOrderData_descriptor_,
      BfOrderData::default_instance_,
      BfOrderData_offsets_,
      -1,
      -1,
      -1,
      sizeof(BfOrderData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfOrderData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfOrderData, _is_default_instance_));
  BfPositionData_descriptor_ = file->message_type(9);
  static const int BfPositionData_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfPositionData, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfPositionData, exchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfPositionData, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfPositionData, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfPositionData, frozen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfPositionData, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfPositionData, ydposition_),
  };
  BfPositionData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BfPositionData_descriptor_,
      BfPositionData::default_instance_,
      BfPositionData_offsets_,
      -1,
      -1,
      -1,
      sizeof(BfPositionData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfPositionData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfPositionData, _is_default_instance_));
  BfAccountData_descriptor_ = file->message_type(10);
  static const int BfAccountData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfAccountData, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfAccountData, prebalance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfAccountData, balance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfAccountData, available_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfAccountData, commission_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfAccountData, margin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfAccountData, closeprofit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfAccountData, positionprofit_),
  };
  BfAccountData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BfAccountData_descriptor_,
      BfAccountData::default_instance_,
      BfAccountData_offsets_,
      -1,
      -1,
      -1,
      sizeof(BfAccountData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfAccountData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfAccountData, _is_default_instance_));
  BfErrorData_descriptor_ = file->message_type(11);
  static const int BfErrorData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfErrorData, errorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfErrorData, errormsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfErrorData, additionalinfo_),
  };
  BfErrorData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BfErrorData_descriptor_,
      BfErrorData::default_instance_,
      BfErrorData_offsets_,
      -1,
      -1,
      -1,
      sizeof(BfErrorData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfErrorData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfErrorData, _is_default_instance_));
  BfLogData_descriptor_ = file->message_type(12);
  static const int BfLogData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfLogData, logtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfLogData, logcontent_),
  };
  BfLogData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BfLogData_descriptor_,
      BfLogData::default_instance_,
      BfLogData_offsets_,
      -1,
      -1,
      -1,
      sizeof(BfLogData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfLogData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfLogData, _is_default_instance_));
  BfContractData_descriptor_ = file->message_type(13);
  static const int BfContractData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfContractData, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfContractData, exchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfContractData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfContractData, productclass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfContractData, volumemultiple_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfContractData, pricetick_),
  };
  BfContractData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BfContractData_descriptor_,
      BfContractData::default_instance_,
      BfContractData_offsets_,
      -1,
      -1,
      -1,
      sizeof(BfContractData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfContractData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfContractData, _is_default_instance_));
  BfKvData_descriptor_ = file->message_type(14);
  static const int BfKvData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfKvData, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfKvData, value_),
  };
  BfKvData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BfKvData_descriptor_,
      BfKvData::default_instance_,
      BfKvData_offsets_,
      -1,
      -1,
      -1,
      sizeof(BfKvData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfKvData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfKvData, _is_default_instance_));
  BfSubscribeReq_descriptor_ = file->message_type(15);
  static const int BfSubscribeReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfSubscribeReq, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfSubscribeReq, exchange_),
  };
  BfSubscribeReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BfSubscribeReq_descriptor_,
      BfSubscribeReq::default_instance_,
      BfSubscribeReq_offsets_,
      -1,
      -1,
      -1,
      sizeof(BfSubscribeReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfSubscribeReq, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfSubscribeReq, _is_default_instance_));
  BfOrderReq_descriptor_ = file->message_type(16);
  static const int BfOrderReq_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfOrderReq, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfOrderReq, exchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfOrderReq, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfOrderReq, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfOrderReq, pricetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfOrderReq, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfOrderReq, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfOrderReq, reason_),
  };
  BfOrderReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BfOrderReq_descriptor_,
      BfOrderReq::default_instance_,
      BfOrderReq_offsets_,
      -1,
      -1,
      -1,
      sizeof(BfOrderReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfOrderReq, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfOrderReq, _is_default_instance_));
  BfOrderResponse_descriptor_ = file->message_type(17);
  static const int BfOrderResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfOrderResponse, orderid_),
  };
  BfOrderResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BfOrderResponse_descriptor_,
      BfOrderResponse::default_instance_,
      BfOrderResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(BfOrderResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfOrderResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfOrderResponse, _is_default_instance_));
  BfCancelOrderReq_descriptor_ = file->message_type(18);
  static const int BfCancelOrderReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfCancelOrderReq, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfCancelOrderReq, exchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfCancelOrderReq, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfCancelOrderReq, reason_),
  };
  BfCancelOrderReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BfCancelOrderReq_descriptor_,
      BfCancelOrderReq::default_instance_,
      BfCancelOrderReq_offsets_,
      -1,
      -1,
      -1,
      sizeof(BfCancelOrderReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfCancelOrderReq, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfCancelOrderReq, _is_default_instance_));
  BfConnectReq_descriptor_ = file->message_type(19);
  static const int BfConnectReq_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfConnectReq, robotid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfConnectReq, endpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfConnectReq, fromday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfConnectReq, fromtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfConnectReq, today_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfConnectReq, totime_),
  };
  BfConnectReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BfConnectReq_descriptor_,
      BfConnectReq::default_instance_,
      BfConnectReq_offsets_,
      -1,
      -1,
      -1,
      sizeof(BfConnectReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfConnectReq, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfConnectReq, _is_default_instance_));
  BfGetContractReq_descriptor_ = file->message_type(20);
  static const int BfGetContractReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfGetContractReq, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfGetContractReq, exchange_),
  };
  BfGetContractReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BfGetContractReq_descriptor_,
      BfGetContractReq::default_instance_,
      BfGetContractReq_offsets_,
      -1,
      -1,
      -1,
      sizeof(BfGetContractReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfGetContractReq, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfGetContractReq, _is_default_instance_));
  BfGetTickPackReq_descriptor_ = file->message_type(21);
  static const int BfGetTickPackReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfGetTickPackReq, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfGetTickPackReq, exchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfGetTickPackReq, todate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfGetTickPackReq, totime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfGetTickPackReq, count_),
  };
  BfGetTickPackReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BfGetTickPackReq_descriptor_,
      BfGetTickPackReq::default_instance_,
      BfGetTickPackReq_offsets_,
      -1,
      -1,
      -1,
      sizeof(BfGetTickPackReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfGetTickPackReq, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfGetTickPackReq, _is_default_instance_));
  BfGetBarReq_descriptor_ = file->message_type(22);
  static const int BfGetBarReq_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfGetBarReq, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfGetBarReq, exchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfGetBarReq, period_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfGetBarReq, todate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfGetBarReq, totime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfGetBarReq, count_),
  };
  BfGetBarReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BfGetBarReq_descriptor_,
      BfGetBarReq::default_instance_,
      BfGetBarReq_offsets_,
      -1,
      -1,
      -1,
      sizeof(BfGetBarReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfGetBarReq, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfGetBarReq, _is_default_instance_));
  BfDirection_descriptor_ = file->enum_type(0);
  BfOffset_descriptor_ = file->enum_type(1);
  BfStatus_descriptor_ = file->enum_type(2);
  BfProduct_descriptor_ = file->enum_type(3);
  BfPriceType_descriptor_ = file->enum_type(4);
  BfExchange_descriptor_ = file->enum_type(5);
  BfPeriod_descriptor_ = file->enum_type(6);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_bftrader_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BfVoid_descriptor_, &BfVoid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BfDailyInfo_descriptor_, &BfDailyInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BfBidAskInfo_descriptor_, &BfBidAskInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BfOHLCInfo_descriptor_, &BfOHLCInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BfTickData_descriptor_, &BfTickData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BfTickPackData_descriptor_, &BfTickPackData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BfBarData_descriptor_, &BfBarData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BfTradeData_descriptor_, &BfTradeData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BfOrderData_descriptor_, &BfOrderData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BfPositionData_descriptor_, &BfPositionData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BfAccountData_descriptor_, &BfAccountData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BfErrorData_descriptor_, &BfErrorData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BfLogData_descriptor_, &BfLogData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BfContractData_descriptor_, &BfContractData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BfKvData_descriptor_, &BfKvData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BfSubscribeReq_descriptor_, &BfSubscribeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BfOrderReq_descriptor_, &BfOrderReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BfOrderResponse_descriptor_, &BfOrderResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BfCancelOrderReq_descriptor_, &BfCancelOrderReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BfConnectReq_descriptor_, &BfConnectReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BfGetContractReq_descriptor_, &BfGetContractReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BfGetTickPackReq_descriptor_, &BfGetTickPackReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BfGetBarReq_descriptor_, &BfGetBarReq::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_bftrader_2eproto() {
  delete BfVoid::default_instance_;
  delete BfVoid_reflection_;
  delete BfDailyInfo::default_instance_;
  delete BfDailyInfo_reflection_;
  delete BfBidAskInfo::default_instance_;
  delete BfBidAskInfo_reflection_;
  delete BfOHLCInfo::default_instance_;
  delete BfOHLCInfo_reflection_;
  delete BfTickData::default_instance_;
  delete BfTickData_reflection_;
  delete BfTickPackData::default_instance_;
  delete BfTickPackData_reflection_;
  delete BfBarData::default_instance_;
  delete BfBarData_reflection_;
  delete BfTradeData::default_instance_;
  delete BfTradeData_reflection_;
  delete BfOrderData::default_instance_;
  delete BfOrderData_reflection_;
  delete BfPositionData::default_instance_;
  delete BfPositionData_reflection_;
  delete BfAccountData::default_instance_;
  delete BfAccountData_reflection_;
  delete BfErrorData::default_instance_;
  delete BfErrorData_reflection_;
  delete BfLogData::default_instance_;
  delete BfLogData_reflection_;
  delete BfContractData::default_instance_;
  delete BfContractData_reflection_;
  delete BfKvData::default_instance_;
  delete BfKvData_reflection_;
  delete BfSubscribeReq::default_instance_;
  delete BfSubscribeReq_reflection_;
  delete BfOrderReq::default_instance_;
  delete BfOrderReq_reflection_;
  delete BfOrderResponse::default_instance_;
  delete BfOrderResponse_reflection_;
  delete BfCancelOrderReq::default_instance_;
  delete BfCancelOrderReq_reflection_;
  delete BfConnectReq::default_instance_;
  delete BfConnectReq_reflection_;
  delete BfGetContractReq::default_instance_;
  delete BfGetContractReq_reflection_;
  delete BfGetTickPackReq::default_instance_;
  delete BfGetTickPackReq_reflection_;
  delete BfGetBarReq::default_instance_;
  delete BfGetBarReq_reflection_;
}

void protobuf_AddDesc_bftrader_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016bftrader.proto\022\010bftrader\"\010\n\006BfVoid\"\204\001\n"
    "\013BfDailyInfo\022\021\n\topenPrice\030\001 \001(\001\022\021\n\thighP"
    "rice\030\002 \001(\001\022\020\n\010lowPrice\030\003 \001(\001\022\025\n\rpreClose"
    "Price\030\004 \001(\001\022\022\n\nupperLimit\030\005 \001(\001\022\022\n\nlower"
    "Limit\030\006 \001(\001\"X\n\014BfBidAskInfo\022\020\n\010bidPrice\030"
    "\001 \001(\001\022\020\n\010askPrice\030\002 \001(\001\022\021\n\tbidVolume\030\003 \001"
    "(\005\022\021\n\taskVolume\030\004 \001(\005\"X\n\nBfOHLCInfo\022\021\n\to"
    "penPrice\030\001 \001(\001\022\021\n\thighPrice\030\002 \001(\001\022\020\n\010low"
    "Price\030\003 \001(\001\022\022\n\nclosePrice\030\004 \001(\001\"\207\002\n\nBfTi"
    "ckData\022\016\n\006symbol\030\001 \001(\t\022\020\n\010exchange\030\002 \001(\t"
    "\022\014\n\004date\030\003 \001(\t\022\014\n\004time\030\004 \001(\t\022\021\n\tlastPric"
    "e\030\005 \001(\001\022\016\n\006volume\030\006 \001(\005\022\024\n\014openInterest\030"
    "\007 \001(\001\022\022\n\nlastVolume\030\010 \001(\005\022\030\n\020lastOpenInt"
    "erest\030\t \001(\001\022*\n\nbidaskInfo\030\n \003(\0132\026.bftrad"
    "er.BfBidAskInfo\022(\n\tdailyInfo\030\013 \001(\0132\025.bft"
    "rader.BfDailyInfo\"s\n\016BfTickPackData\022\016\n\006s"
    "ymbol\030\001 \001(\t\022\020\n\010exchange\030\002 \001(\t\022\014\n\004date\030\003 "
    "\001(\t\022\014\n\004time\030\004 \001(\t\022#\n\005ticks\030\005 \003(\0132\024.bftra"
    "der.BfTickData\"\223\002\n\tBfBarData\022\016\n\006symbol\030\001"
    " \001(\t\022\020\n\010exchange\030\002 \001(\t\022\"\n\006period\030\003 \001(\0162\022"
    ".bftrader.BfPeriod\022\014\n\004date\030\004 \001(\t\022\014\n\004time"
    "\030\005 \001(\t\022\016\n\006volume\030\006 \001(\005\022\024\n\014openInterest\030\007"
    " \001(\001\022\022\n\nlastVolume\030\010 \001(\005\022\030\n\020lastOpenInte"
    "rest\030\t \001(\001\022&\n\010ohlcInfo\030\n \001(\0132\024.bftrader."
    "BfOHLCInfo\022(\n\tdailyInfo\030\013 \001(\0132\025.bftrader"
    ".BfDailyInfo\"\321\001\n\013BfTradeData\022\016\n\006symbol\030\001"
    " \001(\t\022\020\n\010exchange\030\002 \001(\t\022\017\n\007tradeId\030\003 \001(\t\022"
    "\017\n\007orderId\030\004 \001(\t\022(\n\tdirection\030\005 \001(\0162\025.bf"
    "trader.BfDirection\022\"\n\006offset\030\006 \001(\0162\022.bft"
    "rader.BfOffset\022\r\n\005price\030\007 \001(\001\022\016\n\006volume\030"
    "\010 \001(\005\022\021\n\ttradeTime\030\t \001(\t\"\223\002\n\013BfOrderData"
    "\022\016\n\006symbol\030\001 \001(\t\022\020\n\010exchange\030\002 \001(\t\022\017\n\007or"
    "derId\030\003 \001(\t\022(\n\tdirection\030\004 \001(\0162\025.bftrade"
    "r.BfDirection\022\"\n\006offset\030\005 \001(\0162\022.bftrader"
    ".BfOffset\022\r\n\005price\030\006 \001(\001\022\023\n\013totalVolume\030"
    "\007 \001(\005\022\024\n\014tradedVolume\030\010 \001(\005\022\"\n\006status\030\t "
    "\001(\0162\022.bftrader.BfStatus\022\021\n\torderTime\030\n \001"
    "(\t\022\022\n\ncancelTime\030\013 \001(\t\"\241\001\n\016BfPositionDat"
    "a\022\016\n\006symbol\030\001 \001(\t\022\020\n\010exchange\030\002 \001(\t\022(\n\td"
    "irection\030\003 \001(\0162\025.bftrader.BfDirection\022\020\n"
    "\010position\030\004 \001(\005\022\016\n\006frozen\030\005 \001(\005\022\r\n\005price"
    "\030\006 \001(\001\022\022\n\nydPosition\030\007 \001(\005\"\253\001\n\rBfAccount"
    "Data\022\021\n\taccountId\030\001 \001(\t\022\022\n\npreBalance\030\002 "
    "\001(\001\022\017\n\007balance\030\003 \001(\001\022\021\n\tavailable\030\004 \001(\001\022"
    "\022\n\ncommission\030\005 \001(\001\022\016\n\006margin\030\006 \001(\001\022\023\n\013c"
    "loseProfit\030\007 \001(\001\022\026\n\016positionProfit\030\010 \001(\001"
    "\"H\n\013BfErrorData\022\017\n\007errorId\030\001 \001(\t\022\020\n\010erro"
    "rMsg\030\002 \001(\t\022\026\n\016additionalInfo\030\003 \001(\t\"0\n\tBf"
    "LogData\022\017\n\007logTime\030\001 \001(\t\022\022\n\nlogContent\030\002"
    " \001(\t\"\226\001\n\016BfContractData\022\016\n\006symbol\030\001 \001(\t\022"
    "\020\n\010exchange\030\002 \001(\t\022\014\n\004name\030\003 \001(\t\022)\n\014produ"
    "ctClass\030\004 \001(\0162\023.bftrader.BfProduct\022\026\n\016vo"
    "lumeMultiple\030\005 \001(\005\022\021\n\tpriceTick\030\006 \001(\001\"&\n"
    "\010BfKvData\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\"2\n"
    "\016BfSubscribeReq\022\016\n\006symbol\030\001 \001(\t\022\020\n\010excha"
    "nge\030\002 \001(\t\"\325\001\n\nBfOrderReq\022\016\n\006symbol\030\001 \001(\t"
    "\022\020\n\010exchange\030\002 \001(\t\022\r\n\005price\030\003 \001(\001\022\016\n\006vol"
    "ume\030\004 \001(\005\022(\n\tpriceType\030\005 \001(\0162\025.bftrader."
    "BfPriceType\022(\n\tdirection\030\006 \001(\0162\025.bftrade"
    "r.BfDirection\022\"\n\006offset\030\007 \001(\0162\022.bftrader"
    ".BfOffset\022\016\n\006reason\030\010 \001(\t\"\"\n\017BfOrderResp"
    "onse\022\017\n\007orderId\030\001 \001(\t\"U\n\020BfCancelOrderRe"
    "q\022\016\n\006symbol\030\001 \001(\t\022\020\n\010exchange\030\002 \001(\t\022\017\n\007o"
    "rderId\030\003 \001(\t\022\016\n\006reason\030\004 \001(\t\"s\n\014BfConnec"
    "tReq\022\017\n\007robotId\030\001 \001(\t\022\020\n\010endpoint\030\002 \001(\005\022"
    "\017\n\007fromDay\030\003 \001(\t\022\020\n\010fromTime\030\004 \001(\t\022\r\n\005to"
    "Day\030\005 \001(\t\022\016\n\006toTime\030\006 \001(\t\"4\n\020BfGetContra"
    "ctReq\022\016\n\006symbol\030\001 \001(\t\022\020\n\010exchange\030\002 \001(\t\""
    "c\n\020BfGetTickPackReq\022\016\n\006symbol\030\001 \001(\t\022\020\n\010e"
    "xchange\030\002 \001(\t\022\016\n\006toDate\030\003 \001(\t\022\016\n\006toTime\030"
    "\004 \001(\t\022\r\n\005count\030\005 \001(\005\"\202\001\n\013BfGetBarReq\022\016\n\006"
    "symbol\030\001 \001(\t\022\020\n\010exchange\030\002 \001(\t\022\"\n\006period"
    "\030\003 \001(\0162\022.bftrader.BfPeriod\022\016\n\006toDate\030\004 \001"
    "(\t\022\016\n\006toTime\030\005 \001(\t\022\r\n\005count\030\006 \001(\005*\210\001\n\013Bf"
    "Direction\022\025\n\021DIRECTION_UNKNOWN\020\000\022\022\n\016DIRE"
    "CTION_NONE\020\001\022\022\n\016DIRECTION_LONG\020\002\022\023\n\017DIRE"
    "CTION_SHORT\020\003\022\021\n\rDIRECTION_NET\020\004\022\022\n\016DIRE"
    "CTION_SELL\020\005*\204\001\n\010BfOffset\022\022\n\016OFFSET_UNKN"
    "OWN\020\000\022\017\n\013OFFSET_NONE\020\001\022\017\n\013OFFSET_OPEN\020\002\022"
    "\020\n\014OFFSET_CLOSE\020\003\022\025\n\021OFFSET_CLOSETODAY\020\004"
    "\022\031\n\025OFFSET_CLOSEYESTERDAY\020\005*w\n\010BfStatus\022"
    "\022\n\016STATUS_UNKNOWN\020\000\022\024\n\020STATUS_NOTTRADED\020"
    "\001\022\025\n\021STATUS_PARTTRADED\020\002\022\024\n\020STATUS_ALLTR"
    "ADED\020\003\022\024\n\020STATUS_CANCELLED\020\004*\323\001\n\tBfProdu"
    "ct\022\023\n\017PRODUCT_UNKNOWN\020\000\022\020\n\014PRODUCT_NONE\020"
    "\001\022\022\n\016PRODUCT_EQUITY\020\002\022\023\n\017PRODUCT_FUTURES"
    "\020\003\022\022\n\016PRODUCT_OPTION\020\004\022\021\n\rPRODUCT_INDEX\020"
    "\005\022\027\n\023PRODUCT_COMBINATION\020\006\022\021\n\rPRODUCT_FO"
    "REX\020\007\022\020\n\014PRODUCT_SPOT\020\010\022\021\n\rPRODUCT_DEFER"
    "\020\t*\177\n\013BfPriceType\022\025\n\021PRICETYPE_UNKONWN\020\000"
    "\022\030\n\024PRICETYPE_LIMITPRICE\020\001\022\031\n\025PRICETYPE_"
    "MARKETPRICE\020\002\022\021\n\rPRICETYPE_FAK\020\003\022\021\n\rPRIC"
    "ETYPE_FOK\020\004*\245\001\n\nBfExchange\022\024\n\020EXCHANGE_U"
    "NKNOWN\020\000\022\020\n\014EXCHANGE_SSE\020\001\022\021\n\rEXCHANGE_S"
    "ZSE\020\002\022\022\n\016EXCHANGE_CFFEX\020\003\022\021\n\rEXCHANGE_SH"
    "FE\020\004\022\021\n\rEXCHANGE_CZCE\020\005\022\020\n\014EXCHANGE_DCE\020"
    "\006\022\020\n\014EXCHANGE_SGE\020\007*<\n\010BfPeriod\022\022\n\016PERIO"
    "D_UNKNOWN\020\000\022\r\n\tPERIOD_M1\020\001\022\r\n\tPERIOD_D1\020"
    "\002B\003\370\001\001b\006proto3", 3934);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "bftrader.proto", &protobuf_RegisterTypes);
  BfVoid::default_instance_ = new BfVoid();
  BfDailyInfo::default_instance_ = new BfDailyInfo();
  BfBidAskInfo::default_instance_ = new BfBidAskInfo();
  BfOHLCInfo::default_instance_ = new BfOHLCInfo();
  BfTickData::default_instance_ = new BfTickData();
  BfTickPackData::default_instance_ = new BfTickPackData();
  BfBarData::default_instance_ = new BfBarData();
  BfTradeData::default_instance_ = new BfTradeData();
  BfOrderData::default_instance_ = new BfOrderData();
  BfPositionData::default_instance_ = new BfPositionData();
  BfAccountData::default_instance_ = new BfAccountData();
  BfErrorData::default_instance_ = new BfErrorData();
  BfLogData::default_instance_ = new BfLogData();
  BfContractData::default_instance_ = new BfContractData();
  BfKvData::default_instance_ = new BfKvData();
  BfSubscribeReq::default_instance_ = new BfSubscribeReq();
  BfOrderReq::default_instance_ = new BfOrderReq();
  BfOrderResponse::default_instance_ = new BfOrderResponse();
  BfCancelOrderReq::default_instance_ = new BfCancelOrderReq();
  BfConnectReq::default_instance_ = new BfConnectReq();
  BfGetContractReq::default_instance_ = new BfGetContractReq();
  BfGetTickPackReq::default_instance_ = new BfGetTickPackReq();
  BfGetBarReq::default_instance_ = new BfGetBarReq();
  BfVoid::default_instance_->InitAsDefaultInstance();
  BfDailyInfo::default_instance_->InitAsDefaultInstance();
  BfBidAskInfo::default_instance_->InitAsDefaultInstance();
  BfOHLCInfo::default_instance_->InitAsDefaultInstance();
  BfTickData::default_instance_->InitAsDefaultInstance();
  BfTickPackData::default_instance_->InitAsDefaultInstance();
  BfBarData::default_instance_->InitAsDefaultInstance();
  BfTradeData::default_instance_->InitAsDefaultInstance();
  BfOrderData::default_instance_->InitAsDefaultInstance();
  BfPositionData::default_instance_->InitAsDefaultInstance();
  BfAccountData::default_instance_->InitAsDefaultInstance();
  BfErrorData::default_instance_->InitAsDefaultInstance();
  BfLogData::default_instance_->InitAsDefaultInstance();
  BfContractData::default_instance_->InitAsDefaultInstance();
  BfKvData::default_instance_->InitAsDefaultInstance();
  BfSubscribeReq::default_instance_->InitAsDefaultInstance();
  BfOrderReq::default_instance_->InitAsDefaultInstance();
  BfOrderResponse::default_instance_->InitAsDefaultInstance();
  BfCancelOrderReq::default_instance_->InitAsDefaultInstance();
  BfConnectReq::default_instance_->InitAsDefaultInstance();
  BfGetContractReq::default_instance_->InitAsDefaultInstance();
  BfGetTickPackReq::default_instance_->InitAsDefaultInstance();
  BfGetBarReq::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_bftrader_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_bftrader_2eproto {
  StaticDescriptorInitializer_bftrader_2eproto() {
    protobuf_AddDesc_bftrader_2eproto();
  }
} static_descriptor_initializer_bftrader_2eproto_;
const ::google::protobuf::EnumDescriptor* BfDirection_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BfDirection_descriptor_;
}
bool BfDirection_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BfOffset_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BfOffset_descriptor_;
}
bool BfOffset_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BfStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BfStatus_descriptor_;
}
bool BfStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BfProduct_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BfProduct_descriptor_;
}
bool BfProduct_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BfPriceType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BfPriceType_descriptor_;
}
bool BfPriceType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BfExchange_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BfExchange_descriptor_;
}
bool BfExchange_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BfPeriod_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BfPeriod_descriptor_;
}
bool BfPeriod_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BfVoid::BfVoid()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bftrader.BfVoid)
}

BfVoid::BfVoid(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bftrader.BfVoid)
}

void BfVoid::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BfVoid::BfVoid(const BfVoid& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bftrader.BfVoid)
}

void BfVoid::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

BfVoid::~BfVoid() {
  // @@protoc_insertion_point(destructor:bftrader.BfVoid)
  SharedDtor();
}

void BfVoid::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
  }
}

void BfVoid::ArenaDtor(void* object) {
  BfVoid* _this = reinterpret_cast< BfVoid* >(object);
  (void)_this;
}
void BfVoid::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void BfVoid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BfVoid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BfVoid_descriptor_;
}

const BfVoid& BfVoid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bftrader_2eproto();
  return *default_instance_;
}

BfVoid* BfVoid::default_instance_ = NULL;

BfVoid* BfVoid::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<BfVoid>(arena);
}

void BfVoid::Clear() {
}

bool BfVoid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bftrader.BfVoid)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:bftrader.BfVoid)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bftrader.BfVoid)
  return false;
#undef DO_
}

void BfVoid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bftrader.BfVoid)
  // @@protoc_insertion_point(serialize_end:bftrader.BfVoid)
}

::google::protobuf::uint8* BfVoid::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bftrader.BfVoid)
  // @@protoc_insertion_point(serialize_to_array_end:bftrader.BfVoid)
  return target;
}

int BfVoid::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BfVoid::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BfVoid* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BfVoid>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BfVoid::MergeFrom(const BfVoid& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
}

void BfVoid::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BfVoid::CopyFrom(const BfVoid& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BfVoid::IsInitialized() const {

  return true;
}

void BfVoid::Swap(BfVoid* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    BfVoid temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void BfVoid::UnsafeArenaSwap(BfVoid* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void BfVoid::InternalSwap(BfVoid* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BfVoid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BfVoid_descriptor_;
  metadata.reflection = BfVoid_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BfVoid

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BfDailyInfo::kOpenPriceFieldNumber;
const int BfDailyInfo::kHighPriceFieldNumber;
const int BfDailyInfo::kLowPriceFieldNumber;
const int BfDailyInfo::kPreClosePriceFieldNumber;
const int BfDailyInfo::kUpperLimitFieldNumber;
const int BfDailyInfo::kLowerLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BfDailyInfo::BfDailyInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bftrader.BfDailyInfo)
}

BfDailyInfo::BfDailyInfo(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bftrader.BfDailyInfo)
}

void BfDailyInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BfDailyInfo::BfDailyInfo(const BfDailyInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bftrader.BfDailyInfo)
}

void BfDailyInfo::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  openprice_ = 0;
  highprice_ = 0;
  lowprice_ = 0;
  precloseprice_ = 0;
  upperlimit_ = 0;
  lowerlimit_ = 0;
}

BfDailyInfo::~BfDailyInfo() {
  // @@protoc_insertion_point(destructor:bftrader.BfDailyInfo)
  SharedDtor();
}

void BfDailyInfo::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
  }
}

void BfDailyInfo::ArenaDtor(void* object) {
  BfDailyInfo* _this = reinterpret_cast< BfDailyInfo* >(object);
  (void)_this;
}
void BfDailyInfo::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void BfDailyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BfDailyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BfDailyInfo_descriptor_;
}

const BfDailyInfo& BfDailyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bftrader_2eproto();
  return *default_instance_;
}

BfDailyInfo* BfDailyInfo::default_instance_ = NULL;

BfDailyInfo* BfDailyInfo::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<BfDailyInfo>(arena);
}

void BfDailyInfo::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BfDailyInfo*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(openprice_, lowerlimit_);

#undef ZR_HELPER_
#undef ZR_

}

bool BfDailyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bftrader.BfDailyInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double openPrice = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &openprice_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_highPrice;
        break;
      }

      // optional double highPrice = 2;
      case 2: {
        if (tag == 17) {
         parse_highPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &highprice_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_lowPrice;
        break;
      }

      // optional double lowPrice = 3;
      case 3: {
        if (tag == 25) {
         parse_lowPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lowprice_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_preClosePrice;
        break;
      }

      // optional double preClosePrice = 4;
      case 4: {
        if (tag == 33) {
         parse_preClosePrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &precloseprice_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_upperLimit;
        break;
      }

      // optional double upperLimit = 5;
      case 5: {
        if (tag == 41) {
         parse_upperLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &upperlimit_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_lowerLimit;
        break;
      }

      // optional double lowerLimit = 6;
      case 6: {
        if (tag == 49) {
         parse_lowerLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lowerlimit_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bftrader.BfDailyInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bftrader.BfDailyInfo)
  return false;
#undef DO_
}

void BfDailyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bftrader.BfDailyInfo)
  // optional double openPrice = 1;
  if (this->openprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->openprice(), output);
  }

  // optional double highPrice = 2;
  if (this->highprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->highprice(), output);
  }

  // optional double lowPrice = 3;
  if (this->lowprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->lowprice(), output);
  }

  // optional double preClosePrice = 4;
  if (this->precloseprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->precloseprice(), output);
  }

  // optional double upperLimit = 5;
  if (this->upperlimit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->upperlimit(), output);
  }

  // optional double lowerLimit = 6;
  if (this->lowerlimit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->lowerlimit(), output);
  }

  // @@protoc_insertion_point(serialize_end:bftrader.BfDailyInfo)
}

::google::protobuf::uint8* BfDailyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bftrader.BfDailyInfo)
  // optional double openPrice = 1;
  if (this->openprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->openprice(), target);
  }

  // optional double highPrice = 2;
  if (this->highprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->highprice(), target);
  }

  // optional double lowPrice = 3;
  if (this->lowprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->lowprice(), target);
  }

  // optional double preClosePrice = 4;
  if (this->precloseprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->precloseprice(), target);
  }

  // optional double upperLimit = 5;
  if (this->upperlimit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->upperlimit(), target);
  }

  // optional double lowerLimit = 6;
  if (this->lowerlimit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->lowerlimit(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:bftrader.BfDailyInfo)
  return target;
}

int BfDailyInfo::ByteSize() const {
  int total_size = 0;

  // optional double openPrice = 1;
  if (this->openprice() != 0) {
    total_size += 1 + 8;
  }

  // optional double highPrice = 2;
  if (this->highprice() != 0) {
    total_size += 1 + 8;
  }

  // optional double lowPrice = 3;
  if (this->lowprice() != 0) {
    total_size += 1 + 8;
  }

  // optional double preClosePrice = 4;
  if (this->precloseprice() != 0) {
    total_size += 1 + 8;
  }

  // optional double upperLimit = 5;
  if (this->upperlimit() != 0) {
    total_size += 1 + 8;
  }

  // optional double lowerLimit = 6;
  if (this->lowerlimit() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BfDailyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BfDailyInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BfDailyInfo>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BfDailyInfo::MergeFrom(const BfDailyInfo& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.openprice() != 0) {
    set_openprice(from.openprice());
  }
  if (from.highprice() != 0) {
    set_highprice(from.highprice());
  }
  if (from.lowprice() != 0) {
    set_lowprice(from.lowprice());
  }
  if (from.precloseprice() != 0) {
    set_precloseprice(from.precloseprice());
  }
  if (from.upperlimit() != 0) {
    set_upperlimit(from.upperlimit());
  }
  if (from.lowerlimit() != 0) {
    set_lowerlimit(from.lowerlimit());
  }
}

void BfDailyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BfDailyInfo::CopyFrom(const BfDailyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BfDailyInfo::IsInitialized() const {

  return true;
}

void BfDailyInfo::Swap(BfDailyInfo* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    BfDailyInfo temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void BfDailyInfo::UnsafeArenaSwap(BfDailyInfo* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void BfDailyInfo::InternalSwap(BfDailyInfo* other) {
  std::swap(openprice_, other->openprice_);
  std::swap(highprice_, other->highprice_);
  std::swap(lowprice_, other->lowprice_);
  std::swap(precloseprice_, other->precloseprice_);
  std::swap(upperlimit_, other->upperlimit_);
  std::swap(lowerlimit_, other->lowerlimit_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BfDailyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BfDailyInfo_descriptor_;
  metadata.reflection = BfDailyInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BfDailyInfo

// optional double openPrice = 1;
void BfDailyInfo::clear_openprice() {
  openprice_ = 0;
}
 double BfDailyInfo::openprice() const {
  // @@protoc_insertion_point(field_get:bftrader.BfDailyInfo.openPrice)
  return openprice_;
}
 void BfDailyInfo::set_openprice(double value) {
  
  openprice_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfDailyInfo.openPrice)
}

// optional double highPrice = 2;
void BfDailyInfo::clear_highprice() {
  highprice_ = 0;
}
 double BfDailyInfo::highprice() const {
  // @@protoc_insertion_point(field_get:bftrader.BfDailyInfo.highPrice)
  return highprice_;
}
 void BfDailyInfo::set_highprice(double value) {
  
  highprice_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfDailyInfo.highPrice)
}

// optional double lowPrice = 3;
void BfDailyInfo::clear_lowprice() {
  lowprice_ = 0;
}
 double BfDailyInfo::lowprice() const {
  // @@protoc_insertion_point(field_get:bftrader.BfDailyInfo.lowPrice)
  return lowprice_;
}
 void BfDailyInfo::set_lowprice(double value) {
  
  lowprice_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfDailyInfo.lowPrice)
}

// optional double preClosePrice = 4;
void BfDailyInfo::clear_precloseprice() {
  precloseprice_ = 0;
}
 double BfDailyInfo::precloseprice() const {
  // @@protoc_insertion_point(field_get:bftrader.BfDailyInfo.preClosePrice)
  return precloseprice_;
}
 void BfDailyInfo::set_precloseprice(double value) {
  
  precloseprice_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfDailyInfo.preClosePrice)
}

// optional double upperLimit = 5;
void BfDailyInfo::clear_upperlimit() {
  upperlimit_ = 0;
}
 double BfDailyInfo::upperlimit() const {
  // @@protoc_insertion_point(field_get:bftrader.BfDailyInfo.upperLimit)
  return upperlimit_;
}
 void BfDailyInfo::set_upperlimit(double value) {
  
  upperlimit_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfDailyInfo.upperLimit)
}

// optional double lowerLimit = 6;
void BfDailyInfo::clear_lowerlimit() {
  lowerlimit_ = 0;
}
 double BfDailyInfo::lowerlimit() const {
  // @@protoc_insertion_point(field_get:bftrader.BfDailyInfo.lowerLimit)
  return lowerlimit_;
}
 void BfDailyInfo::set_lowerlimit(double value) {
  
  lowerlimit_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfDailyInfo.lowerLimit)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BfBidAskInfo::kBidPriceFieldNumber;
const int BfBidAskInfo::kAskPriceFieldNumber;
const int BfBidAskInfo::kBidVolumeFieldNumber;
const int BfBidAskInfo::kAskVolumeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BfBidAskInfo::BfBidAskInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bftrader.BfBidAskInfo)
}

BfBidAskInfo::BfBidAskInfo(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bftrader.BfBidAskInfo)
}

void BfBidAskInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BfBidAskInfo::BfBidAskInfo(const BfBidAskInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bftrader.BfBidAskInfo)
}

void BfBidAskInfo::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  bidprice_ = 0;
  askprice_ = 0;
  bidvolume_ = 0;
  askvolume_ = 0;
}

BfBidAskInfo::~BfBidAskInfo() {
  // @@protoc_insertion_point(destructor:bftrader.BfBidAskInfo)
  SharedDtor();
}

void BfBidAskInfo::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
  }
}

void BfBidAskInfo::ArenaDtor(void* object) {
  BfBidAskInfo* _this = reinterpret_cast< BfBidAskInfo* >(object);
  (void)_this;
}
void BfBidAskInfo::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void BfBidAskInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BfBidAskInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BfBidAskInfo_descriptor_;
}

const BfBidAskInfo& BfBidAskInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bftrader_2eproto();
  return *default_instance_;
}

BfBidAskInfo* BfBidAskInfo::default_instance_ = NULL;

BfBidAskInfo* BfBidAskInfo::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<BfBidAskInfo>(arena);
}

void BfBidAskInfo::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BfBidAskInfo*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(bidprice_, askvolume_);

#undef ZR_HELPER_
#undef ZR_

}

bool BfBidAskInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bftrader.BfBidAskInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double bidPrice = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bidprice_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_askPrice;
        break;
      }

      // optional double askPrice = 2;
      case 2: {
        if (tag == 17) {
         parse_askPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &askprice_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_bidVolume;
        break;
      }

      // optional int32 bidVolume = 3;
      case 3: {
        if (tag == 24) {
         parse_bidVolume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bidvolume_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_askVolume;
        break;
      }

      // optional int32 askVolume = 4;
      case 4: {
        if (tag == 32) {
         parse_askVolume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &askvolume_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bftrader.BfBidAskInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bftrader.BfBidAskInfo)
  return false;
#undef DO_
}

void BfBidAskInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bftrader.BfBidAskInfo)
  // optional double bidPrice = 1;
  if (this->bidprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->bidprice(), output);
  }

  // optional double askPrice = 2;
  if (this->askprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->askprice(), output);
  }

  // optional int32 bidVolume = 3;
  if (this->bidvolume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bidvolume(), output);
  }

  // optional int32 askVolume = 4;
  if (this->askvolume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->askvolume(), output);
  }

  // @@protoc_insertion_point(serialize_end:bftrader.BfBidAskInfo)
}

::google::protobuf::uint8* BfBidAskInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bftrader.BfBidAskInfo)
  // optional double bidPrice = 1;
  if (this->bidprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->bidprice(), target);
  }

  // optional double askPrice = 2;
  if (this->askprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->askprice(), target);
  }

  // optional int32 bidVolume = 3;
  if (this->bidvolume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bidvolume(), target);
  }

  // optional int32 askVolume = 4;
  if (this->askvolume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->askvolume(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:bftrader.BfBidAskInfo)
  return target;
}

int BfBidAskInfo::ByteSize() const {
  int total_size = 0;

  // optional double bidPrice = 1;
  if (this->bidprice() != 0) {
    total_size += 1 + 8;
  }

  // optional double askPrice = 2;
  if (this->askprice() != 0) {
    total_size += 1 + 8;
  }

  // optional int32 bidVolume = 3;
  if (this->bidvolume() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->bidvolume());
  }

  // optional int32 askVolume = 4;
  if (this->askvolume() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->askvolume());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BfBidAskInfo::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BfBidAskInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BfBidAskInfo>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BfBidAskInfo::MergeFrom(const BfBidAskInfo& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.bidprice() != 0) {
    set_bidprice(from.bidprice());
  }
  if (from.askprice() != 0) {
    set_askprice(from.askprice());
  }
  if (from.bidvolume() != 0) {
    set_bidvolume(from.bidvolume());
  }
  if (from.askvolume() != 0) {
    set_askvolume(from.askvolume());
  }
}

void BfBidAskInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BfBidAskInfo::CopyFrom(const BfBidAskInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BfBidAskInfo::IsInitialized() const {

  return true;
}

void BfBidAskInfo::Swap(BfBidAskInfo* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    BfBidAskInfo temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void BfBidAskInfo::UnsafeArenaSwap(BfBidAskInfo* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void BfBidAskInfo::InternalSwap(BfBidAskInfo* other) {
  std::swap(bidprice_, other->bidprice_);
  std::swap(askprice_, other->askprice_);
  std::swap(bidvolume_, other->bidvolume_);
  std::swap(askvolume_, other->askvolume_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BfBidAskInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BfBidAskInfo_descriptor_;
  metadata.reflection = BfBidAskInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BfBidAskInfo

// optional double bidPrice = 1;
void BfBidAskInfo::clear_bidprice() {
  bidprice_ = 0;
}
 double BfBidAskInfo::bidprice() const {
  // @@protoc_insertion_point(field_get:bftrader.BfBidAskInfo.bidPrice)
  return bidprice_;
}
 void BfBidAskInfo::set_bidprice(double value) {
  
  bidprice_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfBidAskInfo.bidPrice)
}

// optional double askPrice = 2;
void BfBidAskInfo::clear_askprice() {
  askprice_ = 0;
}
 double BfBidAskInfo::askprice() const {
  // @@protoc_insertion_point(field_get:bftrader.BfBidAskInfo.askPrice)
  return askprice_;
}
 void BfBidAskInfo::set_askprice(double value) {
  
  askprice_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfBidAskInfo.askPrice)
}

// optional int32 bidVolume = 3;
void BfBidAskInfo::clear_bidvolume() {
  bidvolume_ = 0;
}
 ::google::protobuf::int32 BfBidAskInfo::bidvolume() const {
  // @@protoc_insertion_point(field_get:bftrader.BfBidAskInfo.bidVolume)
  return bidvolume_;
}
 void BfBidAskInfo::set_bidvolume(::google::protobuf::int32 value) {
  
  bidvolume_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfBidAskInfo.bidVolume)
}

// optional int32 askVolume = 4;
void BfBidAskInfo::clear_askvolume() {
  askvolume_ = 0;
}
 ::google::protobuf::int32 BfBidAskInfo::askvolume() const {
  // @@protoc_insertion_point(field_get:bftrader.BfBidAskInfo.askVolume)
  return askvolume_;
}
 void BfBidAskInfo::set_askvolume(::google::protobuf::int32 value) {
  
  askvolume_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfBidAskInfo.askVolume)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BfOHLCInfo::kOpenPriceFieldNumber;
const int BfOHLCInfo::kHighPriceFieldNumber;
const int BfOHLCInfo::kLowPriceFieldNumber;
const int BfOHLCInfo::kClosePriceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BfOHLCInfo::BfOHLCInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bftrader.BfOHLCInfo)
}

BfOHLCInfo::BfOHLCInfo(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bftrader.BfOHLCInfo)
}

void BfOHLCInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BfOHLCInfo::BfOHLCInfo(const BfOHLCInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bftrader.BfOHLCInfo)
}

void BfOHLCInfo::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  openprice_ = 0;
  highprice_ = 0;
  lowprice_ = 0;
  closeprice_ = 0;
}

BfOHLCInfo::~BfOHLCInfo() {
  // @@protoc_insertion_point(destructor:bftrader.BfOHLCInfo)
  SharedDtor();
}

void BfOHLCInfo::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  if (this != default_instance_) {
  }
}

void BfOHLCInfo::ArenaDtor(void* object) {
  BfOHLCInfo* _this = reinterpret_cast< BfOHLCInfo* >(object);
  (void)_this;
}
void BfOHLCInfo::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void BfOHLCInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BfOHLCInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BfOHLCInfo_descriptor_;
}

const BfOHLCInfo& BfOHLCInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bftrader_2eproto();
  return *default_instance_;
}

BfOHLCInfo* BfOHLCInfo::default_instance_ = NULL;

BfOHLCInfo* BfOHLCInfo::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<BfOHLCInfo>(arena);
}

void BfOHLCInfo::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BfOHLCInfo*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(openprice_, closeprice_);

#undef ZR_HELPER_
#undef ZR_

}

bool BfOHLCInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bftrader.BfOHLCInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double openPrice = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &openprice_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_highPrice;
        break;
      }

      // optional double highPrice = 2;
      case 2: {
        if (tag == 17) {
         parse_highPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &highprice_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_lowPrice;
        break;
      }

      // optional double lowPrice = 3;
      case 3: {
        if (tag == 25) {
         parse_lowPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lowprice_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_closePrice;
        break;
      }

      // optional double closePrice = 4;
      case 4: {
        if (tag == 33) {
         parse_closePrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &closeprice_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bftrader.BfOHLCInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bftrader.BfOHLCInfo)
  return false;
#undef DO_
}

void BfOHLCInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bftrader.BfOHLCInfo)
  // optional double openPrice = 1;
  if (this->openprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->openprice(), output);
  }

  // optional double highPrice = 2;
  if (this->highprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->highprice(), output);
  }

  // optional double lowPrice = 3;
  if (this->lowprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->lowprice(), output);
  }

  // optional double closePrice = 4;
  if (this->closeprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->closeprice(), output);
  }

  // @@protoc_insertion_point(serialize_end:bftrader.BfOHLCInfo)
}

::google::protobuf::uint8* BfOHLCInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bftrader.BfOHLCInfo)
  // optional double openPrice = 1;
  if (this->openprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->openprice(), target);
  }

  // optional double highPrice = 2;
  if (this->highprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->highprice(), target);
  }

  // optional double lowPrice = 3;
  if (this->lowprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->lowprice(), target);
  }

  // optional double closePrice = 4;
  if (this->closeprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->closeprice(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:bftrader.BfOHLCInfo)
  return target;
}

int BfOHLCInfo::ByteSize() const {
  int total_size = 0;

  // optional double openPrice = 1;
  if (this->openprice() != 0) {
    total_size += 1 + 8;
  }

  // optional double highPrice = 2;
  if (this->highprice() != 0) {
    total_size += 1 + 8;
  }

  // optional double lowPrice = 3;
  if (this->lowprice() != 0) {
    total_size += 1 + 8;
  }

  // optional double closePrice = 4;
  if (this->closeprice() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BfOHLCInfo::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BfOHLCInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BfOHLCInfo>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BfOHLCInfo::MergeFrom(const BfOHLCInfo& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.openprice() != 0) {
    set_openprice(from.openprice());
  }
  if (from.highprice() != 0) {
    set_highprice(from.highprice());
  }
  if (from.lowprice() != 0) {
    set_lowprice(from.lowprice());
  }
  if (from.closeprice() != 0) {
    set_closeprice(from.closeprice());
  }
}

void BfOHLCInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BfOHLCInfo::CopyFrom(const BfOHLCInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BfOHLCInfo::IsInitialized() const {

  return true;
}

void BfOHLCInfo::Swap(BfOHLCInfo* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    BfOHLCInfo temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void BfOHLCInfo::UnsafeArenaSwap(BfOHLCInfo* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void BfOHLCInfo::InternalSwap(BfOHLCInfo* other) {
  std::swap(openprice_, other->openprice_);
  std::swap(highprice_, other->highprice_);
  std::swap(lowprice_, other->lowprice_);
  std::swap(closeprice_, other->closeprice_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BfOHLCInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BfOHLCInfo_descriptor_;
  metadata.reflection = BfOHLCInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BfOHLCInfo

// optional double openPrice = 1;
void BfOHLCInfo::clear_openprice() {
  openprice_ = 0;
}
 double BfOHLCInfo::openprice() const {
  // @@protoc_insertion_point(field_get:bftrader.BfOHLCInfo.openPrice)
  return openprice_;
}
 void BfOHLCInfo::set_openprice(double value) {
  
  openprice_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfOHLCInfo.openPrice)
}

// optional double highPrice = 2;
void BfOHLCInfo::clear_highprice() {
  highprice_ = 0;
}
 double BfOHLCInfo::highprice() const {
  // @@protoc_insertion_point(field_get:bftrader.BfOHLCInfo.highPrice)
  return highprice_;
}
 void BfOHLCInfo::set_highprice(double value) {
  
  highprice_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfOHLCInfo.highPrice)
}

// optional double lowPrice = 3;
void BfOHLCInfo::clear_lowprice() {
  lowprice_ = 0;
}
 double BfOHLCInfo::lowprice() const {
  // @@protoc_insertion_point(field_get:bftrader.BfOHLCInfo.lowPrice)
  return lowprice_;
}
 void BfOHLCInfo::set_lowprice(double value) {
  
  lowprice_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfOHLCInfo.lowPrice)
}

// optional double closePrice = 4;
void BfOHLCInfo::clear_closeprice() {
  closeprice_ = 0;
}
 double BfOHLCInfo::closeprice() const {
  // @@protoc_insertion_point(field_get:bftrader.BfOHLCInfo.closePrice)
  return closeprice_;
}
 void BfOHLCInfo::set_closeprice(double value) {
  
  closeprice_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfOHLCInfo.closePrice)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void BfTickData::_slow_mutable_dailyinfo() {
  dailyinfo_ = ::google::protobuf::Arena::CreateMessage< ::bftrader::BfDailyInfo >(
      GetArenaNoVirtual());
}
::bftrader::BfDailyInfo* BfTickData::_slow_release_dailyinfo() {
  if (dailyinfo_ == NULL) {
    return NULL;
  } else {
    ::bftrader::BfDailyInfo* temp = new ::bftrader::BfDailyInfo;
    temp->MergeFrom(*dailyinfo_);
    dailyinfo_ = NULL;
    return temp;
  }
}
::bftrader::BfDailyInfo* BfTickData::unsafe_arena_release_dailyinfo() {
  
  ::bftrader::BfDailyInfo* temp = dailyinfo_;
  dailyinfo_ = NULL;
  return temp;
}
void BfTickData::_slow_set_allocated_dailyinfo(
    ::google::protobuf::Arena* message_arena, ::bftrader::BfDailyInfo** dailyinfo) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*dailyinfo) == NULL) {
      message_arena->Own(*dailyinfo);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*dailyinfo)) {
      ::bftrader::BfDailyInfo* new_dailyinfo = 
            ::google::protobuf::Arena::CreateMessage< ::bftrader::BfDailyInfo >(
            message_arena);
      new_dailyinfo->CopyFrom(**dailyinfo);
      *dailyinfo = new_dailyinfo;
    }
}
void BfTickData::unsafe_arena_set_allocated_dailyinfo(
    ::bftrader::BfDailyInfo* dailyinfo) {
  if (GetArenaNoVirtual() == NULL) {
    delete dailyinfo_;
  }
  dailyinfo_ = dailyinfo;
  if (dailyinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bftrader.BfTickData.dailyInfo)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BfTickData::kSymbolFieldNumber;
const int BfTickData::kExchangeFieldNumber;
const int BfTickData::kDateFieldNumber;
const int BfTickData::kTimeFieldNumber;
const int BfTickData::kLastPriceFieldNumber;
const int BfTickData::kVolumeFieldNumber;
const int BfTickData::kOpenInterestFieldNumber;
const int BfTickData::kLastVolumeFieldNumber;
const int BfTickData::kLastOpenInterestFieldNumber;
const int BfTickData::kBidaskInfoFieldNumber;
const int BfTickData::kDailyInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BfTickData::BfTickData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bftrader.BfTickData)
}

BfTickData::BfTickData(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  bidaskinfo_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bftrader.BfTickData)
}

void BfTickData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  dailyinfo_ = const_cast< ::bftrader::BfDailyInfo*>(&::bftrader::BfDailyInfo::default_instance());
}

BfTickData::BfTickData(const BfTickData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bftrader.BfTickData)
}

void BfTickData::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lastprice_ = 0;
  volume_ = 0;
  openinterest_ = 0;
  lastvolume_ = 0;
  lastopeninterest_ = 0;
  dailyinfo_ = NULL;
}

BfTickData::~BfTickData() {
  // @@protoc_insertion_point(destructor:bftrader.BfTickData)
  SharedDtor();
}

void BfTickData::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  symbol_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  exchange_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  date_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  time_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
    delete dailyinfo_;
  }
}

void BfTickData::ArenaDtor(void* object) {
  BfTickData* _this = reinterpret_cast< BfTickData* >(object);
  (void)_this;
}
void BfTickData::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void BfTickData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BfTickData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BfTickData_descriptor_;
}

const BfTickData& BfTickData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bftrader_2eproto();
  return *default_instance_;
}

BfTickData* BfTickData::default_instance_ = NULL;

BfTickData* BfTickData::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<BfTickData>(arena);
}

void BfTickData::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BfTickData*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(lastprice_, lastvolume_);
  symbol_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  exchange_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  date_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  time_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  lastopeninterest_ = 0;
  if (GetArenaNoVirtual() == NULL && dailyinfo_ != NULL) delete dailyinfo_;
  dailyinfo_ = NULL;

#undef ZR_HELPER_
#undef ZR_

  bidaskinfo_.Clear();
}

bool BfTickData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bftrader.BfTickData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string symbol = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bftrader.BfTickData.symbol"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_exchange;
        break;
      }

      // optional string exchange = 2;
      case 2: {
        if (tag == 18) {
         parse_exchange:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exchange().data(), this->exchange().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bftrader.BfTickData.exchange"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_date;
        break;
      }

      // optional string date = 3;
      case 3: {
        if (tag == 26) {
         parse_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_date()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->date().data(), this->date().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bftrader.BfTickData.date"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_time;
        break;
      }

      // optional string time = 4;
      case 4: {
        if (tag == 34) {
         parse_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_time()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->time().data(), this->time().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bftrader.BfTickData.time"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_lastPrice;
        break;
      }

      // optional double lastPrice = 5;
      case 5: {
        if (tag == 41) {
         parse_lastPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lastprice_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_volume;
        break;
      }

      // optional int32 volume = 6;
      case 6: {
        if (tag == 48) {
         parse_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volume_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_openInterest;
        break;
      }

      // optional double openInterest = 7;
      case 7: {
        if (tag == 57) {
         parse_openInterest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &openinterest_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_lastVolume;
        break;
      }

      // optional int32 lastVolume = 8;
      case 8: {
        if (tag == 64) {
         parse_lastVolume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastvolume_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_lastOpenInterest;
        break;
      }

      // optional double lastOpenInterest = 9;
      case 9: {
        if (tag == 73) {
         parse_lastOpenInterest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lastopeninterest_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_bidaskInfo;
        break;
      }

      // repeated .bftrader.BfBidAskInfo bidaskInfo = 10;
      case 10: {
        if (tag == 82) {
         parse_bidaskInfo:
          DO_(input->IncrementRecursionDepth());
         parse_loop_bidaskInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_bidaskinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_loop_bidaskInfo;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(90)) goto parse_dailyInfo;
        break;
      }

      // optional .bftrader.BfDailyInfo dailyInfo = 11;
      case 11: {
        if (tag == 90) {
         parse_dailyInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dailyinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bftrader.BfTickData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bftrader.BfTickData)
  return false;
#undef DO_
}

void BfTickData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bftrader.BfTickData)
  // optional string symbol = 1;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfTickData.symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->symbol(), output);
  }

  // optional string exchange = 2;
  if (this->exchange().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfTickData.exchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->exchange(), output);
  }

  // optional string date = 3;
  if (this->date().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->date().data(), this->date().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfTickData.date");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->date(), output);
  }

  // optional string time = 4;
  if (this->time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfTickData.time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->time(), output);
  }

  // optional double lastPrice = 5;
  if (this->lastprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->lastprice(), output);
  }

  // optional int32 volume = 6;
  if (this->volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->volume(), output);
  }

  // optional double openInterest = 7;
  if (this->openinterest() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->openinterest(), output);
  }

  // optional int32 lastVolume = 8;
  if (this->lastvolume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->lastvolume(), output);
  }

  // optional double lastOpenInterest = 9;
  if (this->lastopeninterest() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->lastopeninterest(), output);
  }

  // repeated .bftrader.BfBidAskInfo bidaskInfo = 10;
  for (unsigned int i = 0, n = this->bidaskinfo_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->bidaskinfo(i), output);
  }

  // optional .bftrader.BfDailyInfo dailyInfo = 11;
  if (this->has_dailyinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->dailyinfo_, output);
  }

  // @@protoc_insertion_point(serialize_end:bftrader.BfTickData)
}

::google::protobuf::uint8* BfTickData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bftrader.BfTickData)
  // optional string symbol = 1;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfTickData.symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->symbol(), target);
  }

  // optional string exchange = 2;
  if (this->exchange().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfTickData.exchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->exchange(), target);
  }

  // optional string date = 3;
  if (this->date().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->date().data(), this->date().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfTickData.date");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->date(), target);
  }

  // optional string time = 4;
  if (this->time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfTickData.time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->time(), target);
  }

  // optional double lastPrice = 5;
  if (this->lastprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->lastprice(), target);
  }

  // optional int32 volume = 6;
  if (this->volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->volume(), target);
  }

  // optional double openInterest = 7;
  if (this->openinterest() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->openinterest(), target);
  }

  // optional int32 lastVolume = 8;
  if (this->lastvolume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->lastvolume(), target);
  }

  // optional double lastOpenInterest = 9;
  if (this->lastopeninterest() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->lastopeninterest(), target);
  }

  // repeated .bftrader.BfBidAskInfo bidaskInfo = 10;
  for (unsigned int i = 0, n = this->bidaskinfo_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->bidaskinfo(i), target);
  }

  // optional .bftrader.BfDailyInfo dailyInfo = 11;
  if (this->has_dailyinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, *this->dailyinfo_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:bftrader.BfTickData)
  return target;
}

int BfTickData::ByteSize() const {
  int total_size = 0;

  // optional string symbol = 1;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->symbol());
  }

  // optional string exchange = 2;
  if (this->exchange().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchange());
  }

  // optional string date = 3;
  if (this->date().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->date());
  }

  // optional string time = 4;
  if (this->time().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->time());
  }

  // optional double lastPrice = 5;
  if (this->lastprice() != 0) {
    total_size += 1 + 8;
  }

  // optional int32 volume = 6;
  if (this->volume() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->volume());
  }

  // optional double openInterest = 7;
  if (this->openinterest() != 0) {
    total_size += 1 + 8;
  }

  // optional int32 lastVolume = 8;
  if (this->lastvolume() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lastvolume());
  }

  // optional double lastOpenInterest = 9;
  if (this->lastopeninterest() != 0) {
    total_size += 1 + 8;
  }

  // optional .bftrader.BfDailyInfo dailyInfo = 11;
  if (this->has_dailyinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->dailyinfo_);
  }

  // repeated .bftrader.BfBidAskInfo bidaskInfo = 10;
  total_size += 1 * this->bidaskinfo_size();
  for (int i = 0; i < this->bidaskinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bidaskinfo(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BfTickData::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BfTickData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BfTickData>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BfTickData::MergeFrom(const BfTickData& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  bidaskinfo_.MergeFrom(from.bidaskinfo_);
  if (from.symbol().size() > 0) {
    set_symbol(from.symbol());
  }
  if (from.exchange().size() > 0) {
    set_exchange(from.exchange());
  }
  if (from.date().size() > 0) {
    set_date(from.date());
  }
  if (from.time().size() > 0) {
    set_time(from.time());
  }
  if (from.lastprice() != 0) {
    set_lastprice(from.lastprice());
  }
  if (from.volume() != 0) {
    set_volume(from.volume());
  }
  if (from.openinterest() != 0) {
    set_openinterest(from.openinterest());
  }
  if (from.lastvolume() != 0) {
    set_lastvolume(from.lastvolume());
  }
  if (from.lastopeninterest() != 0) {
    set_lastopeninterest(from.lastopeninterest());
  }
  if (from.has_dailyinfo()) {
    mutable_dailyinfo()->::bftrader::BfDailyInfo::MergeFrom(from.dailyinfo());
  }
}

void BfTickData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BfTickData::CopyFrom(const BfTickData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BfTickData::IsInitialized() const {

  return true;
}

void BfTickData::Swap(BfTickData* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    BfTickData temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void BfTickData::UnsafeArenaSwap(BfTickData* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void BfTickData::InternalSwap(BfTickData* other) {
  symbol_.Swap(&other->symbol_);
  exchange_.Swap(&other->exchange_);
  date_.Swap(&other->date_);
  time_.Swap(&other->time_);
  std::swap(lastprice_, other->lastprice_);
  std::swap(volume_, other->volume_);
  std::swap(openinterest_, other->openinterest_);
  std::swap(lastvolume_, other->lastvolume_);
  std::swap(lastopeninterest_, other->lastopeninterest_);
  bidaskinfo_.UnsafeArenaSwap(&other->bidaskinfo_);
  std::swap(dailyinfo_, other->dailyinfo_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BfTickData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BfTickData_descriptor_;
  metadata.reflection = BfTickData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BfTickData

// optional string symbol = 1;
void BfTickData::clear_symbol() {
  symbol_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& BfTickData::symbol() const {
  // @@protoc_insertion_point(field_get:bftrader.BfTickData.symbol)
  return symbol_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfTickData::set_symbol(const ::std::string& value) {
  
  symbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfTickData.symbol)
}
 void BfTickData::set_symbol(const char* value) {
  
  symbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfTickData.symbol)
}
 void BfTickData::set_symbol(const char* value,
    size_t size) {
  
  symbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfTickData.symbol)
}
 ::std::string* BfTickData::mutable_symbol() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfTickData.symbol)
  return symbol_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfTickData::release_symbol() {
  
  return symbol_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfTickData::unsafe_arena_release_symbol() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return symbol_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void BfTickData::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfTickData.symbol)
}
 void BfTickData::unsafe_arena_set_allocated_symbol(
    ::std::string* symbol) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      symbol, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfTickData.symbol)
}

// optional string exchange = 2;
void BfTickData::clear_exchange() {
  exchange_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& BfTickData::exchange() const {
  // @@protoc_insertion_point(field_get:bftrader.BfTickData.exchange)
  return exchange_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfTickData::set_exchange(const ::std::string& value) {
  
  exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfTickData.exchange)
}
 void BfTickData::set_exchange(const char* value) {
  
  exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfTickData.exchange)
}
 void BfTickData::set_exchange(const char* value,
    size_t size) {
  
  exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfTickData.exchange)
}
 ::std::string* BfTickData::mutable_exchange() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfTickData.exchange)
  return exchange_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfTickData::release_exchange() {
  
  return exchange_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfTickData::unsafe_arena_release_exchange() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return exchange_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void BfTickData::set_allocated_exchange(::std::string* exchange) {
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfTickData.exchange)
}
 void BfTickData::unsafe_arena_set_allocated_exchange(
    ::std::string* exchange) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      exchange, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfTickData.exchange)
}

// optional string date = 3;
void BfTickData::clear_date() {
  date_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& BfTickData::date() const {
  // @@protoc_insertion_point(field_get:bftrader.BfTickData.date)
  return date_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfTickData::set_date(const ::std::string& value) {
  
  date_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfTickData.date)
}
 void BfTickData::set_date(const char* value) {
  
  date_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfTickData.date)
}
 void BfTickData::set_date(const char* value,
    size_t size) {
  
  date_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfTickData.date)
}
 ::std::string* BfTickData::mutable_date() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfTickData.date)
  return date_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfTickData::release_date() {
  
  return date_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfTickData::unsafe_arena_release_date() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return date_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void BfTickData::set_allocated_date(::std::string* date) {
  if (date != NULL) {
    
  } else {
    
  }
  date_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), date,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfTickData.date)
}
 void BfTickData::unsafe_arena_set_allocated_date(
    ::std::string* date) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (date != NULL) {
    
  } else {
    
  }
  date_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      date, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfTickData.date)
}

// optional string time = 4;
void BfTickData::clear_time() {
  time_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& BfTickData::time() const {
  // @@protoc_insertion_point(field_get:bftrader.BfTickData.time)
  return time_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfTickData::set_time(const ::std::string& value) {
  
  time_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfTickData.time)
}
 void BfTickData::set_time(const char* value) {
  
  time_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfTickData.time)
}
 void BfTickData::set_time(const char* value,
    size_t size) {
  
  time_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfTickData.time)
}
 ::std::string* BfTickData::mutable_time() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfTickData.time)
  return time_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfTickData::release_time() {
  
  return time_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfTickData::unsafe_arena_release_time() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return time_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void BfTickData::set_allocated_time(::std::string* time) {
  if (time != NULL) {
    
  } else {
    
  }
  time_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), time,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfTickData.time)
}
 void BfTickData::unsafe_arena_set_allocated_time(
    ::std::string* time) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (time != NULL) {
    
  } else {
    
  }
  time_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      time, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfTickData.time)
}

// optional double lastPrice = 5;
void BfTickData::clear_lastprice() {
  lastprice_ = 0;
}
 double BfTickData::lastprice() const {
  // @@protoc_insertion_point(field_get:bftrader.BfTickData.lastPrice)
  return lastprice_;
}
 void BfTickData::set_lastprice(double value) {
  
  lastprice_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfTickData.lastPrice)
}

// optional int32 volume = 6;
void BfTickData::clear_volume() {
  volume_ = 0;
}
 ::google::protobuf::int32 BfTickData::volume() const {
  // @@protoc_insertion_point(field_get:bftrader.BfTickData.volume)
  return volume_;
}
 void BfTickData::set_volume(::google::protobuf::int32 value) {
  
  volume_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfTickData.volume)
}

// optional double openInterest = 7;
void BfTickData::clear_openinterest() {
  openinterest_ = 0;
}
 double BfTickData::openinterest() const {
  // @@protoc_insertion_point(field_get:bftrader.BfTickData.openInterest)
  return openinterest_;
}
 void BfTickData::set_openinterest(double value) {
  
  openinterest_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfTickData.openInterest)
}

// optional int32 lastVolume = 8;
void BfTickData::clear_lastvolume() {
  lastvolume_ = 0;
}
 ::google::protobuf::int32 BfTickData::lastvolume() const {
  // @@protoc_insertion_point(field_get:bftrader.BfTickData.lastVolume)
  return lastvolume_;
}
 void BfTickData::set_lastvolume(::google::protobuf::int32 value) {
  
  lastvolume_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfTickData.lastVolume)
}

// optional double lastOpenInterest = 9;
void BfTickData::clear_lastopeninterest() {
  lastopeninterest_ = 0;
}
 double BfTickData::lastopeninterest() const {
  // @@protoc_insertion_point(field_get:bftrader.BfTickData.lastOpenInterest)
  return lastopeninterest_;
}
 void BfTickData::set_lastopeninterest(double value) {
  
  lastopeninterest_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfTickData.lastOpenInterest)
}

// repeated .bftrader.BfBidAskInfo bidaskInfo = 10;
int BfTickData::bidaskinfo_size() const {
  return bidaskinfo_.size();
}
void BfTickData::clear_bidaskinfo() {
  bidaskinfo_.Clear();
}
const ::bftrader::BfBidAskInfo& BfTickData::bidaskinfo(int index) const {
  // @@protoc_insertion_point(field_get:bftrader.BfTickData.bidaskInfo)
  return bidaskinfo_.Get(index);
}
::bftrader::BfBidAskInfo* BfTickData::mutable_bidaskinfo(int index) {
  // @@protoc_insertion_point(field_mutable:bftrader.BfTickData.bidaskInfo)
  return bidaskinfo_.Mutable(index);
}
::bftrader::BfBidAskInfo* BfTickData::add_bidaskinfo() {
  // @@protoc_insertion_point(field_add:bftrader.BfTickData.bidaskInfo)
  return bidaskinfo_.Add();
}
::google::protobuf::RepeatedPtrField< ::bftrader::BfBidAskInfo >*
BfTickData::mutable_bidaskinfo() {
  // @@protoc_insertion_point(field_mutable_list:bftrader.BfTickData.bidaskInfo)
  return &bidaskinfo_;
}
const ::google::protobuf::RepeatedPtrField< ::bftrader::BfBidAskInfo >&
BfTickData::bidaskinfo() const {
  // @@protoc_insertion_point(field_list:bftrader.BfTickData.bidaskInfo)
  return bidaskinfo_;
}

// optional .bftrader.BfDailyInfo dailyInfo = 11;
bool BfTickData::has_dailyinfo() const {
  return !_is_default_instance_ && dailyinfo_ != NULL;
}
void BfTickData::clear_dailyinfo() {
  if (GetArenaNoVirtual() == NULL && dailyinfo_ != NULL) delete dailyinfo_;
  dailyinfo_ = NULL;
}
const ::bftrader::BfDailyInfo& BfTickData::dailyinfo() const {
  // @@protoc_insertion_point(field_get:bftrader.BfTickData.dailyInfo)
  return dailyinfo_ != NULL ? *dailyinfo_ : *default_instance_->dailyinfo_;
}
::bftrader::BfDailyInfo* BfTickData::mutable_dailyinfo() {
  
  if (dailyinfo_ == NULL) {
    _slow_mutable_dailyinfo();
  }
  // @@protoc_insertion_point(field_mutable:bftrader.BfTickData.dailyInfo)
  return dailyinfo_;
}
::bftrader::BfDailyInfo* BfTickData::release_dailyinfo() {
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_dailyinfo();
  } else {
    ::bftrader::BfDailyInfo* temp = dailyinfo_;
    dailyinfo_ = NULL;
    return temp;
  }
}
 void BfTickData::set_allocated_dailyinfo(::bftrader::BfDailyInfo* dailyinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete dailyinfo_;
  }
  if (dailyinfo != NULL) {
    _slow_set_allocated_dailyinfo(message_arena, &dailyinfo);
  }
  dailyinfo_ = dailyinfo;
  if (dailyinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfTickData.dailyInfo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BfTickPackData::kSymbolFieldNumber;
const int BfTickPackData::kExchangeFieldNumber;
const int BfTickPackData::kDateFieldNumber;
const int BfTickPackData::kTimeFieldNumber;
const int BfTickPackData::kTicksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BfTickPackData::BfTickPackData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bftrader.BfTickPackData)
}

BfTickPackData::BfTickPackData(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  ticks_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bftrader.BfTickPackData)
}

void BfTickPackData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BfTickPackData::BfTickPackData(const BfTickPackData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bftrader.BfTickPackData)
}

void BfTickPackData::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

BfTickPackData::~BfTickPackData() {
  // @@protoc_insertion_point(destructor:bftrader.BfTickPackData)
  SharedDtor();
}

void BfTickPackData::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  symbol_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  exchange_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  date_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  time_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
  }
}

void BfTickPackData::ArenaDtor(void* object) {
  BfTickPackData* _this = reinterpret_cast< BfTickPackData* >(object);
  (void)_this;
}
void BfTickPackData::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void BfTickPackData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BfTickPackData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BfTickPackData_descriptor_;
}

const BfTickPackData& BfTickPackData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bftrader_2eproto();
  return *default_instance_;
}

BfTickPackData* BfTickPackData::default_instance_ = NULL;

BfTickPackData* BfTickPackData::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<BfTickPackData>(arena);
}

void BfTickPackData::Clear() {
  symbol_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  exchange_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  date_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  time_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ticks_.Clear();
}

bool BfTickPackData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bftrader.BfTickPackData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string symbol = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bftrader.BfTickPackData.symbol"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_exchange;
        break;
      }

      // optional string exchange = 2;
      case 2: {
        if (tag == 18) {
         parse_exchange:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exchange().data(), this->exchange().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bftrader.BfTickPackData.exchange"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_date;
        break;
      }

      // optional string date = 3;
      case 3: {
        if (tag == 26) {
         parse_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_date()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->date().data(), this->date().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bftrader.BfTickPackData.date"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_time;
        break;
      }

      // optional string time = 4;
      case 4: {
        if (tag == 34) {
         parse_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_time()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->time().data(), this->time().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bftrader.BfTickPackData.time"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ticks;
        break;
      }

      // repeated .bftrader.BfTickData ticks = 5;
      case 5: {
        if (tag == 42) {
         parse_ticks:
          DO_(input->IncrementRecursionDepth());
         parse_loop_ticks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_ticks()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_ticks;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bftrader.BfTickPackData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bftrader.BfTickPackData)
  return false;
#undef DO_
}

void BfTickPackData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bftrader.BfTickPackData)
  // optional string symbol = 1;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfTickPackData.symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->symbol(), output);
  }

  // optional string exchange = 2;
  if (this->exchange().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfTickPackData.exchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->exchange(), output);
  }

  // optional string date = 3;
  if (this->date().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->date().data(), this->date().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfTickPackData.date");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->date(), output);
  }

  // optional string time = 4;
  if (this->time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfTickPackData.time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->time(), output);
  }

  // repeated .bftrader.BfTickData ticks = 5;
  for (unsigned int i = 0, n = this->ticks_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->ticks(i), output);
  }

  // @@protoc_insertion_point(serialize_end:bftrader.BfTickPackData)
}

::google::protobuf::uint8* BfTickPackData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bftrader.BfTickPackData)
  // optional string symbol = 1;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfTickPackData.symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->symbol(), target);
  }

  // optional string exchange = 2;
  if (this->exchange().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfTickPackData.exchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->exchange(), target);
  }

  // optional string date = 3;
  if (this->date().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->date().data(), this->date().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfTickPackData.date");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->date(), target);
  }

  // optional string time = 4;
  if (this->time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfTickPackData.time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->time(), target);
  }

  // repeated .bftrader.BfTickData ticks = 5;
  for (unsigned int i = 0, n = this->ticks_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->ticks(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:bftrader.BfTickPackData)
  return target;
}

int BfTickPackData::ByteSize() const {
  int total_size = 0;

  // optional string symbol = 1;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->symbol());
  }

  // optional string exchange = 2;
  if (this->exchange().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchange());
  }

  // optional string date = 3;
  if (this->date().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->date());
  }

  // optional string time = 4;
  if (this->time().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->time());
  }

  // repeated .bftrader.BfTickData ticks = 5;
  total_size += 1 * this->ticks_size();
  for (int i = 0; i < this->ticks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ticks(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BfTickPackData::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BfTickPackData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BfTickPackData>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BfTickPackData::MergeFrom(const BfTickPackData& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  ticks_.MergeFrom(from.ticks_);
  if (from.symbol().size() > 0) {
    set_symbol(from.symbol());
  }
  if (from.exchange().size() > 0) {
    set_exchange(from.exchange());
  }
  if (from.date().size() > 0) {
    set_date(from.date());
  }
  if (from.time().size() > 0) {
    set_time(from.time());
  }
}

void BfTickPackData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BfTickPackData::CopyFrom(const BfTickPackData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BfTickPackData::IsInitialized() const {

  return true;
}

void BfTickPackData::Swap(BfTickPackData* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    BfTickPackData temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void BfTickPackData::UnsafeArenaSwap(BfTickPackData* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void BfTickPackData::InternalSwap(BfTickPackData* other) {
  symbol_.Swap(&other->symbol_);
  exchange_.Swap(&other->exchange_);
  date_.Swap(&other->date_);
  time_.Swap(&other->time_);
  ticks_.UnsafeArenaSwap(&other->ticks_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BfTickPackData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BfTickPackData_descriptor_;
  metadata.reflection = BfTickPackData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BfTickPackData

// optional string symbol = 1;
void BfTickPackData::clear_symbol() {
  symbol_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& BfTickPackData::symbol() const {
  // @@protoc_insertion_point(field_get:bftrader.BfTickPackData.symbol)
  return symbol_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfTickPackData::set_symbol(const ::std::string& value) {
  
  symbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfTickPackData.symbol)
}
 void BfTickPackData::set_symbol(const char* value) {
  
  symbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfTickPackData.symbol)
}
 void BfTickPackData::set_symbol(const char* value,
    size_t size) {
  
  symbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfTickPackData.symbol)
}
 ::std::string* BfTickPackData::mutable_symbol() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfTickPackData.symbol)
  return symbol_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfTickPackData::release_symbol() {
  
  return symbol_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfTickPackData::unsafe_arena_release_symbol() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return symbol_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void BfTickPackData::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfTickPackData.symbol)
}
 void BfTickPackData::unsafe_arena_set_allocated_symbol(
    ::std::string* symbol) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      symbol, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfTickPackData.symbol)
}

// optional string exchange = 2;
void BfTickPackData::clear_exchange() {
  exchange_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& BfTickPackData::exchange() const {
  // @@protoc_insertion_point(field_get:bftrader.BfTickPackData.exchange)
  return exchange_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfTickPackData::set_exchange(const ::std::string& value) {
  
  exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfTickPackData.exchange)
}
 void BfTickPackData::set_exchange(const char* value) {
  
  exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfTickPackData.exchange)
}
 void BfTickPackData::set_exchange(const char* value,
    size_t size) {
  
  exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfTickPackData.exchange)
}
 ::std::string* BfTickPackData::mutable_exchange() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfTickPackData.exchange)
  return exchange_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfTickPackData::release_exchange() {
  
  return exchange_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfTickPackData::unsafe_arena_release_exchange() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return exchange_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void BfTickPackData::set_allocated_exchange(::std::string* exchange) {
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfTickPackData.exchange)
}
 void BfTickPackData::unsafe_arena_set_allocated_exchange(
    ::std::string* exchange) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      exchange, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfTickPackData.exchange)
}

// optional string date = 3;
void BfTickPackData::clear_date() {
  date_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& BfTickPackData::date() const {
  // @@protoc_insertion_point(field_get:bftrader.BfTickPackData.date)
  return date_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfTickPackData::set_date(const ::std::string& value) {
  
  date_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfTickPackData.date)
}
 void BfTickPackData::set_date(const char* value) {
  
  date_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfTickPackData.date)
}
 void BfTickPackData::set_date(const char* value,
    size_t size) {
  
  date_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfTickPackData.date)
}
 ::std::string* BfTickPackData::mutable_date() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfTickPackData.date)
  return date_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfTickPackData::release_date() {
  
  return date_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfTickPackData::unsafe_arena_release_date() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return date_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void BfTickPackData::set_allocated_date(::std::string* date) {
  if (date != NULL) {
    
  } else {
    
  }
  date_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), date,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfTickPackData.date)
}
 void BfTickPackData::unsafe_arena_set_allocated_date(
    ::std::string* date) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (date != NULL) {
    
  } else {
    
  }
  date_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      date, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfTickPackData.date)
}

// optional string time = 4;
void BfTickPackData::clear_time() {
  time_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& BfTickPackData::time() const {
  // @@protoc_insertion_point(field_get:bftrader.BfTickPackData.time)
  return time_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfTickPackData::set_time(const ::std::string& value) {
  
  time_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfTickPackData.time)
}
 void BfTickPackData::set_time(const char* value) {
  
  time_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfTickPackData.time)
}
 void BfTickPackData::set_time(const char* value,
    size_t size) {
  
  time_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfTickPackData.time)
}
 ::std::string* BfTickPackData::mutable_time() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfTickPackData.time)
  return time_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfTickPackData::release_time() {
  
  return time_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfTickPackData::unsafe_arena_release_time() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return time_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void BfTickPackData::set_allocated_time(::std::string* time) {
  if (time != NULL) {
    
  } else {
    
  }
  time_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), time,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfTickPackData.time)
}
 void BfTickPackData::unsafe_arena_set_allocated_time(
    ::std::string* time) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (time != NULL) {
    
  } else {
    
  }
  time_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      time, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfTickPackData.time)
}

// repeated .bftrader.BfTickData ticks = 5;
int BfTickPackData::ticks_size() const {
  return ticks_.size();
}
void BfTickPackData::clear_ticks() {
  ticks_.Clear();
}
const ::bftrader::BfTickData& BfTickPackData::ticks(int index) const {
  // @@protoc_insertion_point(field_get:bftrader.BfTickPackData.ticks)
  return ticks_.Get(index);
}
::bftrader::BfTickData* BfTickPackData::mutable_ticks(int index) {
  // @@protoc_insertion_point(field_mutable:bftrader.BfTickPackData.ticks)
  return ticks_.Mutable(index);
}
::bftrader::BfTickData* BfTickPackData::add_ticks() {
  // @@protoc_insertion_point(field_add:bftrader.BfTickPackData.ticks)
  return ticks_.Add();
}
::google::protobuf::RepeatedPtrField< ::bftrader::BfTickData >*
BfTickPackData::mutable_ticks() {
  // @@protoc_insertion_point(field_mutable_list:bftrader.BfTickPackData.ticks)
  return &ticks_;
}
const ::google::protobuf::RepeatedPtrField< ::bftrader::BfTickData >&
BfTickPackData::ticks() const {
  // @@protoc_insertion_point(field_list:bftrader.BfTickPackData.ticks)
  return ticks_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void BfBarData::_slow_mutable_ohlcinfo() {
  ohlcinfo_ = ::google::protobuf::Arena::CreateMessage< ::bftrader::BfOHLCInfo >(
      GetArenaNoVirtual());
}
::bftrader::BfOHLCInfo* BfBarData::_slow_release_ohlcinfo() {
  if (ohlcinfo_ == NULL) {
    return NULL;
  } else {
    ::bftrader::BfOHLCInfo* temp = new ::bftrader::BfOHLCInfo;
    temp->MergeFrom(*ohlcinfo_);
    ohlcinfo_ = NULL;
    return temp;
  }
}
::bftrader::BfOHLCInfo* BfBarData::unsafe_arena_release_ohlcinfo() {
  
  ::bftrader::BfOHLCInfo* temp = ohlcinfo_;
  ohlcinfo_ = NULL;
  return temp;
}
void BfBarData::_slow_set_allocated_ohlcinfo(
    ::google::protobuf::Arena* message_arena, ::bftrader::BfOHLCInfo** ohlcinfo) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*ohlcinfo) == NULL) {
      message_arena->Own(*ohlcinfo);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*ohlcinfo)) {
      ::bftrader::BfOHLCInfo* new_ohlcinfo = 
            ::google::protobuf::Arena::CreateMessage< ::bftrader::BfOHLCInfo >(
            message_arena);
      new_ohlcinfo->CopyFrom(**ohlcinfo);
      *ohlcinfo = new_ohlcinfo;
    }
}
void BfBarData::unsafe_arena_set_allocated_ohlcinfo(
    ::bftrader::BfOHLCInfo* ohlcinfo) {
  if (GetArenaNoVirtual() == NULL) {
    delete ohlcinfo_;
  }
  ohlcinfo_ = ohlcinfo;
  if (ohlcinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bftrader.BfBarData.ohlcInfo)
}
void BfBarData::_slow_mutable_dailyinfo() {
  dailyinfo_ = ::google::protobuf::Arena::CreateMessage< ::bftrader::BfDailyInfo >(
      GetArenaNoVirtual());
}
::bftrader::BfDailyInfo* BfBarData::_slow_release_dailyinfo() {
  if (dailyinfo_ == NULL) {
    return NULL;
  } else {
    ::bftrader::BfDailyInfo* temp = new ::bftrader::BfDailyInfo;
    temp->MergeFrom(*dailyinfo_);
    dailyinfo_ = NULL;
    return temp;
  }
}
::bftrader::BfDailyInfo* BfBarData::unsafe_arena_release_dailyinfo() {
  
  ::bftrader::BfDailyInfo* temp = dailyinfo_;
  dailyinfo_ = NULL;
  return temp;
}
void BfBarData::_slow_set_allocated_dailyinfo(
    ::google::protobuf::Arena* message_arena, ::bftrader::BfDailyInfo** dailyinfo) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*dailyinfo) == NULL) {
      message_arena->Own(*dailyinfo);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*dailyinfo)) {
      ::bftrader::BfDailyInfo* new_dailyinfo = 
            ::google::protobuf::Arena::CreateMessage< ::bftrader::BfDailyInfo >(
            message_arena);
      new_dailyinfo->CopyFrom(**dailyinfo);
      *dailyinfo = new_dailyinfo;
    }
}
void BfBarData::unsafe_arena_set_allocated_dailyinfo(
    ::bftrader::BfDailyInfo* dailyinfo) {
  if (GetArenaNoVirtual() == NULL) {
    delete dailyinfo_;
  }
  dailyinfo_ = dailyinfo;
  if (dailyinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bftrader.BfBarData.dailyInfo)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BfBarData::kSymbolFieldNumber;
const int BfBarData::kExchangeFieldNumber;
const int BfBarData::kPeriodFieldNumber;
const int BfBarData::kDateFieldNumber;
const int BfBarData::kTimeFieldNumber;
const int BfBarData::kVolumeFieldNumber;
const int BfBarData::kOpenInterestFieldNumber;
const int BfBarData::kLastVolumeFieldNumber;
const int BfBarData::kLastOpenInterestFieldNumber;
const int BfBarData::kOhlcInfoFieldNumber;
const int BfBarData::kDailyInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BfBarData::BfBarData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bftrader.BfBarData)
}

BfBarData::BfBarData(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bftrader.BfBarData)
}

void BfBarData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  ohlcinfo_ = const_cast< ::bftrader::BfOHLCInfo*>(&::bftrader::BfOHLCInfo::default_instance());
  dailyinfo_ = const_cast< ::bftrader::BfDailyInfo*>(&::bftrader::BfDailyInfo::default_instance());
}

BfBarData::BfBarData(const BfBarData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bftrader.BfBarData)
}

void BfBarData::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  period_ = 0;
  date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  volume_ = 0;
  openinterest_ = 0;
  lastvolume_ = 0;
  lastopeninterest_ = 0;
  ohlcinfo_ = NULL;
  dailyinfo_ = NULL;
}

BfBarData::~BfBarData() {
  // @@protoc_insertion_point(destructor:bftrader.BfBarData)
  SharedDtor();
}

void BfBarData::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  symbol_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  exchange_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  date_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  time_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
    delete ohlcinfo_;
    delete dailyinfo_;
  }
}

void BfBarData::ArenaDtor(void* object) {
  BfBarData* _this = reinterpret_cast< BfBarData* >(object);
  (void)_this;
}
void BfBarData::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void BfBarData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BfBarData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BfBarData_descriptor_;
}

const BfBarData& BfBarData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bftrader_2eproto();
  return *default_instance_;
}

BfBarData* BfBarData::default_instance_ = NULL;

BfBarData* BfBarData::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<BfBarData>(arena);
}

void BfBarData::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BfBarData*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(period_, volume_);
  symbol_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  exchange_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  date_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  time_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  openinterest_ = 0;
  lastvolume_ = 0;
  lastopeninterest_ = 0;
  if (GetArenaNoVirtual() == NULL && ohlcinfo_ != NULL) delete ohlcinfo_;
  ohlcinfo_ = NULL;
  if (GetArenaNoVirtual() == NULL && dailyinfo_ != NULL) delete dailyinfo_;
  dailyinfo_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool BfBarData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bftrader.BfBarData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string symbol = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bftrader.BfBarData.symbol"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_exchange;
        break;
      }

      // optional string exchange = 2;
      case 2: {
        if (tag == 18) {
         parse_exchange:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exchange().data(), this->exchange().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bftrader.BfBarData.exchange"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_period;
        break;
      }

      // optional .bftrader.BfPeriod period = 3;
      case 3: {
        if (tag == 24) {
         parse_period:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_period(static_cast< ::bftrader::BfPeriod >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_date;
        break;
      }

      // optional string date = 4;
      case 4: {
        if (tag == 34) {
         parse_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_date()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->date().data(), this->date().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bftrader.BfBarData.date"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_time;
        break;
      }

      // optional string time = 5;
      case 5: {
        if (tag == 42) {
         parse_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_time()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->time().data(), this->time().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bftrader.BfBarData.time"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_volume;
        break;
      }

      // optional int32 volume = 6;
      case 6: {
        if (tag == 48) {
         parse_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volume_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_openInterest;
        break;
      }

      // optional double openInterest = 7;
      case 7: {
        if (tag == 57) {
         parse_openInterest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &openinterest_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_lastVolume;
        break;
      }

      // optional int32 lastVolume = 8;
      case 8: {
        if (tag == 64) {
         parse_lastVolume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastvolume_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_lastOpenInterest;
        break;
      }

      // optional double lastOpenInterest = 9;
      case 9: {
        if (tag == 73) {
         parse_lastOpenInterest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lastopeninterest_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_ohlcInfo;
        break;
      }

      // optional .bftrader.BfOHLCInfo ohlcInfo = 10;
      case 10: {
        if (tag == 82) {
         parse_ohlcInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ohlcinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_dailyInfo;
        break;
      }

      // optional .bftrader.BfDailyInfo dailyInfo = 11;
      case 11: {
        if (tag == 90) {
         parse_dailyInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dailyinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bftrader.BfBarData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bftrader.BfBarData)
  return false;
#undef DO_
}

void BfBarData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bftrader.BfBarData)
  // optional string symbol = 1;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfBarData.symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->symbol(), output);
  }

  // optional string exchange = 2;
  if (this->exchange().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfBarData.exchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->exchange(), output);
  }

  // optional .bftrader.BfPeriod period = 3;
  if (this->period() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->period(), output);
  }

  // optional string date = 4;
  if (this->date().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->date().data(), this->date().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfBarData.date");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->date(), output);
  }

  // optional string time = 5;
  if (this->time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfBarData.time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->time(), output);
  }

  // optional int32 volume = 6;
  if (this->volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->volume(), output);
  }

  // optional double openInterest = 7;
  if (this->openinterest() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->openinterest(), output);
  }

  // optional int32 lastVolume = 8;
  if (this->lastvolume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->lastvolume(), output);
  }

  // optional double lastOpenInterest = 9;
  if (this->lastopeninterest() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->lastopeninterest(), output);
  }

  // optional .bftrader.BfOHLCInfo ohlcInfo = 10;
  if (this->has_ohlcinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->ohlcinfo_, output);
  }

  // optional .bftrader.BfDailyInfo dailyInfo = 11;
  if (this->has_dailyinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->dailyinfo_, output);
  }

  // @@protoc_insertion_point(serialize_end:bftrader.BfBarData)
}

::google::protobuf::uint8* BfBarData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bftrader.BfBarData)
  // optional string symbol = 1;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfBarData.symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->symbol(), target);
  }

  // optional string exchange = 2;
  if (this->exchange().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfBarData.exchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->exchange(), target);
  }

  // optional .bftrader.BfPeriod period = 3;
  if (this->period() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->period(), target);
  }

  // optional string date = 4;
  if (this->date().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->date().data(), this->date().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfBarData.date");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->date(), target);
  }

  // optional string time = 5;
  if (this->time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfBarData.time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->time(), target);
  }

  // optional int32 volume = 6;
  if (this->volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->volume(), target);
  }

  // optional double openInterest = 7;
  if (this->openinterest() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->openinterest(), target);
  }

  // optional int32 lastVolume = 8;
  if (this->lastvolume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->lastvolume(), target);
  }

  // optional double lastOpenInterest = 9;
  if (this->lastopeninterest() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->lastopeninterest(), target);
  }

  // optional .bftrader.BfOHLCInfo ohlcInfo = 10;
  if (this->has_ohlcinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, *this->ohlcinfo_, target);
  }

  // optional .bftrader.BfDailyInfo dailyInfo = 11;
  if (this->has_dailyinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, *this->dailyinfo_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:bftrader.BfBarData)
  return target;
}

int BfBarData::ByteSize() const {
  int total_size = 0;

  // optional string symbol = 1;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->symbol());
  }

  // optional string exchange = 2;
  if (this->exchange().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchange());
  }

  // optional .bftrader.BfPeriod period = 3;
  if (this->period() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->period());
  }

  // optional string date = 4;
  if (this->date().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->date());
  }

  // optional string time = 5;
  if (this->time().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->time());
  }

  // optional int32 volume = 6;
  if (this->volume() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->volume());
  }

  // optional double openInterest = 7;
  if (this->openinterest() != 0) {
    total_size += 1 + 8;
  }

  // optional int32 lastVolume = 8;
  if (this->lastvolume() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lastvolume());
  }

  // optional double lastOpenInterest = 9;
  if (this->lastopeninterest() != 0) {
    total_size += 1 + 8;
  }

  // optional .bftrader.BfOHLCInfo ohlcInfo = 10;
  if (this->has_ohlcinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ohlcinfo_);
  }

  // optional .bftrader.BfDailyInfo dailyInfo = 11;
  if (this->has_dailyinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->dailyinfo_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BfBarData::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BfBarData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BfBarData>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BfBarData::MergeFrom(const BfBarData& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.symbol().size() > 0) {
    set_symbol(from.symbol());
  }
  if (from.exchange().size() > 0) {
    set_exchange(from.exchange());
  }
  if (from.period() != 0) {
    set_period(from.period());
  }
  if (from.date().size() > 0) {
    set_date(from.date());
  }
  if (from.time().size() > 0) {
    set_time(from.time());
  }
  if (from.volume() != 0) {
    set_volume(from.volume());
  }
  if (from.openinterest() != 0) {
    set_openinterest(from.openinterest());
  }
  if (from.lastvolume() != 0) {
    set_lastvolume(from.lastvolume());
  }
  if (from.lastopeninterest() != 0) {
    set_lastopeninterest(from.lastopeninterest());
  }
  if (from.has_ohlcinfo()) {
    mutable_ohlcinfo()->::bftrader::BfOHLCInfo::MergeFrom(from.ohlcinfo());
  }
  if (from.has_dailyinfo()) {
    mutable_dailyinfo()->::bftrader::BfDailyInfo::MergeFrom(from.dailyinfo());
  }
}

void BfBarData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BfBarData::CopyFrom(const BfBarData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BfBarData::IsInitialized() const {

  return true;
}

void BfBarData::Swap(BfBarData* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    BfBarData temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void BfBarData::UnsafeArenaSwap(BfBarData* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void BfBarData::InternalSwap(BfBarData* other) {
  symbol_.Swap(&other->symbol_);
  exchange_.Swap(&other->exchange_);
  std::swap(period_, other->period_);
  date_.Swap(&other->date_);
  time_.Swap(&other->time_);
  std::swap(volume_, other->volume_);
  std::swap(openinterest_, other->openinterest_);
  std::swap(lastvolume_, other->lastvolume_);
  std::swap(lastopeninterest_, other->lastopeninterest_);
  std::swap(ohlcinfo_, other->ohlcinfo_);
  std::swap(dailyinfo_, other->dailyinfo_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BfBarData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BfBarData_descriptor_;
  metadata.reflection = BfBarData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BfBarData

// optional string symbol = 1;
void BfBarData::clear_symbol() {
  symbol_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& BfBarData::symbol() const {
  // @@protoc_insertion_point(field_get:bftrader.BfBarData.symbol)
  return symbol_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfBarData::set_symbol(const ::std::string& value) {
  
  symbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfBarData.symbol)
}
 void BfBarData::set_symbol(const char* value) {
  
  symbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfBarData.symbol)
}
 void BfBarData::set_symbol(const char* value,
    size_t size) {
  
  symbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfBarData.symbol)
}
 ::std::string* BfBarData::mutable_symbol() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfBarData.symbol)
  return symbol_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfBarData::release_symbol() {
  
  return symbol_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfBarData::unsafe_arena_release_symbol() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return symbol_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void BfBarData::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfBarData.symbol)
}
 void BfBarData::unsafe_arena_set_allocated_symbol(
    ::std::string* symbol) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      symbol, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfBarData.symbol)
}

// optional string exchange = 2;
void BfBarData::clear_exchange() {
  exchange_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& BfBarData::exchange() const {
  // @@protoc_insertion_point(field_get:bftrader.BfBarData.exchange)
  return exchange_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfBarData::set_exchange(const ::std::string& value) {
  
  exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfBarData.exchange)
}
 void BfBarData::set_exchange(const char* value) {
  
  exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfBarData.exchange)
}
 void BfBarData::set_exchange(const char* value,
    size_t size) {
  
  exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfBarData.exchange)
}
 ::std::string* BfBarData::mutable_exchange() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfBarData.exchange)
  return exchange_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfBarData::release_exchange() {
  
  return exchange_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfBarData::unsafe_arena_release_exchange() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return exchange_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void BfBarData::set_allocated_exchange(::std::string* exchange) {
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfBarData.exchange)
}
 void BfBarData::unsafe_arena_set_allocated_exchange(
    ::std::string* exchange) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      exchange, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfBarData.exchange)
}

// optional .bftrader.BfPeriod period = 3;
void BfBarData::clear_period() {
  period_ = 0;
}
 ::bftrader::BfPeriod BfBarData::period() const {
  // @@protoc_insertion_point(field_get:bftrader.BfBarData.period)
  return static_cast< ::bftrader::BfPeriod >(period_);
}
 void BfBarData::set_period(::bftrader::BfPeriod value) {
  
  period_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfBarData.period)
}

// optional string date = 4;
void BfBarData::clear_date() {
  date_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& BfBarData::date() const {
  // @@protoc_insertion_point(field_get:bftrader.BfBarData.date)
  return date_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfBarData::set_date(const ::std::string& value) {
  
  date_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfBarData.date)
}
 void BfBarData::set_date(const char* value) {
  
  date_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfBarData.date)
}
 void BfBarData::set_date(const char* value,
    size_t size) {
  
  date_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfBarData.date)
}
 ::std::string* BfBarData::mutable_date() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfBarData.date)
  return date_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfBarData::release_date() {
  
  return date_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfBarData::unsafe_arena_release_date() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return date_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void BfBarData::set_allocated_date(::std::string* date) {
  if (date != NULL) {
    
  } else {
    
  }
  date_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), date,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfBarData.date)
}
 void BfBarData::unsafe_arena_set_allocated_date(
    ::std::string* date) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (date != NULL) {
    
  } else {
    
  }
  date_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      date, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfBarData.date)
}

// optional string time = 5;
void BfBarData::clear_time() {
  time_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& BfBarData::time() const {
  // @@protoc_insertion_point(field_get:bftrader.BfBarData.time)
  return time_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfBarData::set_time(const ::std::string& value) {
  
  time_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfBarData.time)
}
 void BfBarData::set_time(const char* value) {
  
  time_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfBarData.time)
}
 void BfBarData::set_time(const char* value,
    size_t size) {
  
  time_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfBarData.time)
}
 ::std::string* BfBarData::mutable_time() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfBarData.time)
  return time_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfBarData::release_time() {
  
  return time_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfBarData::unsafe_arena_release_time() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return time_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void BfBarData::set_allocated_time(::std::string* time) {
  if (time != NULL) {
    
  } else {
    
  }
  time_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), time,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfBarData.time)
}
 void BfBarData::unsafe_arena_set_allocated_time(
    ::std::string* time) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (time != NULL) {
    
  } else {
    
  }
  time_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      time, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfBarData.time)
}

// optional int32 volume = 6;
void BfBarData::clear_volume() {
  volume_ = 0;
}
 ::google::protobuf::int32 BfBarData::volume() const {
  // @@protoc_insertion_point(field_get:bftrader.BfBarData.volume)
  return volume_;
}
 void BfBarData::set_volume(::google::protobuf::int32 value) {
  
  volume_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfBarData.volume)
}

// optional double openInterest = 7;
void BfBarData::clear_openinterest() {
  openinterest_ = 0;
}
 double BfBarData::openinterest() const {
  // @@protoc_insertion_point(field_get:bftrader.BfBarData.openInterest)
  return openinterest_;
}
 void BfBarData::set_openinterest(double value) {
  
  openinterest_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfBarData.openInterest)
}

// optional int32 lastVolume = 8;
void BfBarData::clear_lastvolume() {
  lastvolume_ = 0;
}
 ::google::protobuf::int32 BfBarData::lastvolume() const {
  // @@protoc_insertion_point(field_get:bftrader.BfBarData.lastVolume)
  return lastvolume_;
}
 void BfBarData::set_lastvolume(::google::protobuf::int32 value) {
  
  lastvolume_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfBarData.lastVolume)
}

// optional double lastOpenInterest = 9;
void BfBarData::clear_lastopeninterest() {
  lastopeninterest_ = 0;
}
 double BfBarData::lastopeninterest() const {
  // @@protoc_insertion_point(field_get:bftrader.BfBarData.lastOpenInterest)
  return lastopeninterest_;
}
 void BfBarData::set_lastopeninterest(double value) {
  
  lastopeninterest_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfBarData.lastOpenInterest)
}

// optional .bftrader.BfOHLCInfo ohlcInfo = 10;
bool BfBarData::has_ohlcinfo() const {
  return !_is_default_instance_ && ohlcinfo_ != NULL;
}
void BfBarData::clear_ohlcinfo() {
  if (GetArenaNoVirtual() == NULL && ohlcinfo_ != NULL) delete ohlcinfo_;
  ohlcinfo_ = NULL;
}
const ::bftrader::BfOHLCInfo& BfBarData::ohlcinfo() const {
  // @@protoc_insertion_point(field_get:bftrader.BfBarData.ohlcInfo)
  return ohlcinfo_ != NULL ? *ohlcinfo_ : *default_instance_->ohlcinfo_;
}
::bftrader::BfOHLCInfo* BfBarData::mutable_ohlcinfo() {
  
  if (ohlcinfo_ == NULL) {
    _slow_mutable_ohlcinfo();
  }
  // @@protoc_insertion_point(field_mutable:bftrader.BfBarData.ohlcInfo)
  return ohlcinfo_;
}
::bftrader::BfOHLCInfo* BfBarData::release_ohlcinfo() {
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_ohlcinfo();
  } else {
    ::bftrader::BfOHLCInfo* temp = ohlcinfo_;
    ohlcinfo_ = NULL;
    return temp;
  }
}
 void BfBarData::set_allocated_ohlcinfo(::bftrader::BfOHLCInfo* ohlcinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ohlcinfo_;
  }
  if (ohlcinfo != NULL) {
    _slow_set_allocated_ohlcinfo(message_arena, &ohlcinfo);
  }
  ohlcinfo_ = ohlcinfo;
  if (ohlcinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfBarData.ohlcInfo)
}

// optional .bftrader.BfDailyInfo dailyInfo = 11;
bool BfBarData::has_dailyinfo() const {
  return !_is_default_instance_ && dailyinfo_ != NULL;
}
void BfBarData::clear_dailyinfo() {
  if (GetArenaNoVirtual() == NULL && dailyinfo_ != NULL) delete dailyinfo_;
  dailyinfo_ = NULL;
}
const ::bftrader::BfDailyInfo& BfBarData::dailyinfo() const {
  // @@protoc_insertion_point(field_get:bftrader.BfBarData.dailyInfo)
  return dailyinfo_ != NULL ? *dailyinfo_ : *default_instance_->dailyinfo_;
}
::bftrader::BfDailyInfo* BfBarData::mutable_dailyinfo() {
  
  if (dailyinfo_ == NULL) {
    _slow_mutable_dailyinfo();
  }
  // @@protoc_insertion_point(field_mutable:bftrader.BfBarData.dailyInfo)
  return dailyinfo_;
}
::bftrader::BfDailyInfo* BfBarData::release_dailyinfo() {
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_dailyinfo();
  } else {
    ::bftrader::BfDailyInfo* temp = dailyinfo_;
    dailyinfo_ = NULL;
    return temp;
  }
}
 void BfBarData::set_allocated_dailyinfo(::bftrader::BfDailyInfo* dailyinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete dailyinfo_;
  }
  if (dailyinfo != NULL) {
    _slow_set_allocated_dailyinfo(message_arena, &dailyinfo);
  }
  dailyinfo_ = dailyinfo;
  if (dailyinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfBarData.dailyInfo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BfTradeData::kSymbolFieldNumber;
const int BfTradeData::kExchangeFieldNumber;
const int BfTradeData::kTradeIdFieldNumber;
const int BfTradeData::kOrderIdFieldNumber;
const int BfTradeData::kDirectionFieldNumber;
const int BfTradeData::kOffsetFieldNumber;
const int BfTradeData::kPriceFieldNumber;
const int BfTradeData::kVolumeFieldNumber;
const int BfTradeData::kTradeTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BfTradeData::BfTradeData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bftrader.BfTradeData)
}

BfTradeData::BfTradeData(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bftrader.BfTradeData)
}

void BfTradeData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BfTradeData::BfTradeData(const BfTradeData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bftrader.BfTradeData)
}

void BfTradeData::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradeid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  direction_ = 0;
  offset_ = 0;
  price_ = 0;
  volume_ = 0;
  tradetime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

BfTradeData::~BfTradeData() {
  // @@protoc_insertion_point(destructor:bftrader.BfTradeData)
  SharedDtor();
}

void BfTradeData::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  symbol_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  exchange_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  tradeid_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  orderid_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  tradetime_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
  }
}

void BfTradeData::ArenaDtor(void* object) {
  BfTradeData* _this = reinterpret_cast< BfTradeData* >(object);
  (void)_this;
}
void BfTradeData::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void BfTradeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BfTradeData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BfTradeData_descriptor_;
}

const BfTradeData& BfTradeData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bftrader_2eproto();
  return *default_instance_;
}

BfTradeData* BfTradeData::default_instance_ = NULL;

BfTradeData* BfTradeData::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<BfTradeData>(arena);
}

void BfTradeData::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BfTradeData*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(direction_, price_);
  symbol_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  exchange_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  tradeid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  orderid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  volume_ = 0;
  tradetime_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());

#undef ZR_HELPER_
#undef ZR_

}

bool BfTradeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bftrader.BfTradeData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string symbol = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bftrader.BfTradeData.symbol"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_exchange;
        break;
      }

      // optional string exchange = 2;
      case 2: {
        if (tag == 18) {
         parse_exchange:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exchange().data(), this->exchange().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bftrader.BfTradeData.exchange"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_tradeId;
        break;
      }

      // optional string tradeId = 3;
      case 3: {
        if (tag == 26) {
         parse_tradeId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradeid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tradeid().data(), this->tradeid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bftrader.BfTradeData.tradeId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_orderId;
        break;
      }

      // optional string orderId = 4;
      case 4: {
        if (tag == 34) {
         parse_orderId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->orderid().data(), this->orderid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bftrader.BfTradeData.orderId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_direction;
        break;
      }

      // optional .bftrader.BfDirection direction = 5;
      case 5: {
        if (tag == 40) {
         parse_direction:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_direction(static_cast< ::bftrader::BfDirection >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_offset;
        break;
      }

      // optional .bftrader.BfOffset offset = 6;
      case 6: {
        if (tag == 48) {
         parse_offset:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_offset(static_cast< ::bftrader::BfOffset >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_price;
        break;
      }

      // optional double price = 7;
      case 7: {
        if (tag == 57) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_volume;
        break;
      }

      // optional int32 volume = 8;
      case 8: {
        if (tag == 64) {
         parse_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volume_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_tradeTime;
        break;
      }

      // optional string tradeTime = 9;
      case 9: {
        if (tag == 74) {
         parse_tradeTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradetime()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tradetime().data(), this->tradetime().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bftrader.BfTradeData.tradeTime"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bftrader.BfTradeData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bftrader.BfTradeData)
  return false;
#undef DO_
}

void BfTradeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bftrader.BfTradeData)
  // optional string symbol = 1;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfTradeData.symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->symbol(), output);
  }

  // optional string exchange = 2;
  if (this->exchange().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfTradeData.exchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->exchange(), output);
  }

  // optional string tradeId = 3;
  if (this->tradeid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradeid().data(), this->tradeid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfTradeData.tradeId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->tradeid(), output);
  }

  // optional string orderId = 4;
  if (this->orderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->orderid().data(), this->orderid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfTradeData.orderId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->orderid(), output);
  }

  // optional .bftrader.BfDirection direction = 5;
  if (this->direction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->direction(), output);
  }

  // optional .bftrader.BfOffset offset = 6;
  if (this->offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->offset(), output);
  }

  // optional double price = 7;
  if (this->price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->price(), output);
  }

  // optional int32 volume = 8;
  if (this->volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->volume(), output);
  }

  // optional string tradeTime = 9;
  if (this->tradetime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradetime().data(), this->tradetime().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfTradeData.tradeTime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->tradetime(), output);
  }

  // @@protoc_insertion_point(serialize_end:bftrader.BfTradeData)
}

::google::protobuf::uint8* BfTradeData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bftrader.BfTradeData)
  // optional string symbol = 1;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfTradeData.symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->symbol(), target);
  }

  // optional string exchange = 2;
  if (this->exchange().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfTradeData.exchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->exchange(), target);
  }

  // optional string tradeId = 3;
  if (this->tradeid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradeid().data(), this->tradeid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfTradeData.tradeId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->tradeid(), target);
  }

  // optional string orderId = 4;
  if (this->orderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->orderid().data(), this->orderid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfTradeData.orderId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->orderid(), target);
  }

  // optional .bftrader.BfDirection direction = 5;
  if (this->direction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->direction(), target);
  }

  // optional .bftrader.BfOffset offset = 6;
  if (this->offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->offset(), target);
  }

  // optional double price = 7;
  if (this->price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->price(), target);
  }

  // optional int32 volume = 8;
  if (this->volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->volume(), target);
  }

  // optional string tradeTime = 9;
  if (this->tradetime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tradetime().data(), this->tradetime().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfTradeData.tradeTime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->tradetime(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:bftrader.BfTradeData)
  return target;
}

int BfTradeData::ByteSize() const {
  int total_size = 0;

  // optional string symbol = 1;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->symbol());
  }

  // optional string exchange = 2;
  if (this->exchange().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchange());
  }

  // optional string tradeId = 3;
  if (this->tradeid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tradeid());
  }

  // optional string orderId = 4;
  if (this->orderid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->orderid());
  }

  // optional .bftrader.BfDirection direction = 5;
  if (this->direction() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->direction());
  }

  // optional .bftrader.BfOffset offset = 6;
  if (this->offset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->offset());
  }

  // optional double price = 7;
  if (this->price() != 0) {
    total_size += 1 + 8;
  }

  // optional int32 volume = 8;
  if (this->volume() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->volume());
  }

  // optional string tradeTime = 9;
  if (this->tradetime().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tradetime());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BfTradeData::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BfTradeData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BfTradeData>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BfTradeData::MergeFrom(const BfTradeData& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.symbol().size() > 0) {
    set_symbol(from.symbol());
  }
  if (from.exchange().size() > 0) {
    set_exchange(from.exchange());
  }
  if (from.tradeid().size() > 0) {
    set_tradeid(from.tradeid());
  }
  if (from.orderid().size() > 0) {
    set_orderid(from.orderid());
  }
  if (from.direction() != 0) {
    set_direction(from.direction());
  }
  if (from.offset() != 0) {
    set_offset(from.offset());
  }
  if (from.price() != 0) {
    set_price(from.price());
  }
  if (from.volume() != 0) {
    set_volume(from.volume());
  }
  if (from.tradetime().size() > 0) {
    set_tradetime(from.tradetime());
  }
}

void BfTradeData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BfTradeData::CopyFrom(const BfTradeData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BfTradeData::IsInitialized() const {

  return true;
}

void BfTradeData::Swap(BfTradeData* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    BfTradeData temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void BfTradeData::UnsafeArenaSwap(BfTradeData* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void BfTradeData::InternalSwap(BfTradeData* other) {
  symbol_.Swap(&other->symbol_);
  exchange_.Swap(&other->exchange_);
  tradeid_.Swap(&other->tradeid_);
  orderid_.Swap(&other->orderid_);
  std::swap(direction_, other->direction_);
  std::swap(offset_, other->offset_);
  std::swap(price_, other->price_);
  std::swap(volume_, other->volume_);
  tradetime_.Swap(&other->tradetime_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BfTradeData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BfTradeData_descriptor_;
  metadata.reflection = BfTradeData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BfTradeData

// optional string symbol = 1;
void BfTradeData::clear_symbol() {
  symbol_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& BfTradeData::symbol() const {
  // @@protoc_insertion_point(field_get:bftrader.BfTradeData.symbol)
  return symbol_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfTradeData::set_symbol(const ::std::string& value) {
  
  symbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfTradeData.symbol)
}
 void BfTradeData::set_symbol(const char* value) {
  
  symbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfTradeData.symbol)
}
 void BfTradeData::set_symbol(const char* value,
    size_t size) {
  
  symbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfTradeData.symbol)
}
 ::std::string* BfTradeData::mutable_symbol() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfTradeData.symbol)
  return symbol_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfTradeData::release_symbol() {
  
  return symbol_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfTradeData::unsafe_arena_release_symbol() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return symbol_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void BfTradeData::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfTradeData.symbol)
}
 void BfTradeData::unsafe_arena_set_allocated_symbol(
    ::std::string* symbol) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      symbol, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfTradeData.symbol)
}

// optional string exchange = 2;
void BfTradeData::clear_exchange() {
  exchange_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& BfTradeData::exchange() const {
  // @@protoc_insertion_point(field_get:bftrader.BfTradeData.exchange)
  return exchange_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfTradeData::set_exchange(const ::std::string& value) {
  
  exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfTradeData.exchange)
}
 void BfTradeData::set_exchange(const char* value) {
  
  exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfTradeData.exchange)
}
 void BfTradeData::set_exchange(const char* value,
    size_t size) {
  
  exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfTradeData.exchange)
}
 ::std::string* BfTradeData::mutable_exchange() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfTradeData.exchange)
  return exchange_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfTradeData::release_exchange() {
  
  return exchange_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfTradeData::unsafe_arena_release_exchange() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return exchange_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void BfTradeData::set_allocated_exchange(::std::string* exchange) {
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfTradeData.exchange)
}
 void BfTradeData::unsafe_arena_set_allocated_exchange(
    ::std::string* exchange) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      exchange, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfTradeData.exchange)
}

// optional string tradeId = 3;
void BfTradeData::clear_tradeid() {
  tradeid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& BfTradeData::tradeid() const {
  // @@protoc_insertion_point(field_get:bftrader.BfTradeData.tradeId)
  return tradeid_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfTradeData::set_tradeid(const ::std::string& value) {
  
  tradeid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfTradeData.tradeId)
}
 void BfTradeData::set_tradeid(const char* value) {
  
  tradeid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfTradeData.tradeId)
}
 void BfTradeData::set_tradeid(const char* value,
    size_t size) {
  
  tradeid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfTradeData.tradeId)
}
 ::std::string* BfTradeData::mutable_tradeid() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfTradeData.tradeId)
  return tradeid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfTradeData::release_tradeid() {
  
  return tradeid_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfTradeData::unsafe_arena_release_tradeid() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return tradeid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void BfTradeData::set_allocated_tradeid(::std::string* tradeid) {
  if (tradeid != NULL) {
    
  } else {
    
  }
  tradeid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tradeid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfTradeData.tradeId)
}
 void BfTradeData::unsafe_arena_set_allocated_tradeid(
    ::std::string* tradeid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (tradeid != NULL) {
    
  } else {
    
  }
  tradeid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      tradeid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfTradeData.tradeId)
}

// optional string orderId = 4;
void BfTradeData::clear_orderid() {
  orderid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& BfTradeData::orderid() const {
  // @@protoc_insertion_point(field_get:bftrader.BfTradeData.orderId)
  return orderid_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfTradeData::set_orderid(const ::std::string& value) {
  
  orderid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfTradeData.orderId)
}
 void BfTradeData::set_orderid(const char* value) {
  
  orderid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfTradeData.orderId)
}
 void BfTradeData::set_orderid(const char* value,
    size_t size) {
  
  orderid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfTradeData.orderId)
}
 ::std::string* BfTradeData::mutable_orderid() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfTradeData.orderId)
  return orderid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfTradeData::release_orderid() {
  
  return orderid_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfTradeData::unsafe_arena_release_orderid() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return orderid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void BfTradeData::set_allocated_orderid(::std::string* orderid) {
  if (orderid != NULL) {
    
  } else {
    
  }
  orderid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orderid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfTradeData.orderId)
}
 void BfTradeData::unsafe_arena_set_allocated_orderid(
    ::std::string* orderid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (orderid != NULL) {
    
  } else {
    
  }
  orderid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      orderid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfTradeData.orderId)
}

// optional .bftrader.BfDirection direction = 5;
void BfTradeData::clear_direction() {
  direction_ = 0;
}
 ::bftrader::BfDirection BfTradeData::direction() const {
  // @@protoc_insertion_point(field_get:bftrader.BfTradeData.direction)
  return static_cast< ::bftrader::BfDirection >(direction_);
}
 void BfTradeData::set_direction(::bftrader::BfDirection value) {
  
  direction_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfTradeData.direction)
}

// optional .bftrader.BfOffset offset = 6;
void BfTradeData::clear_offset() {
  offset_ = 0;
}
 ::bftrader::BfOffset BfTradeData::offset() const {
  // @@protoc_insertion_point(field_get:bftrader.BfTradeData.offset)
  return static_cast< ::bftrader::BfOffset >(offset_);
}
 void BfTradeData::set_offset(::bftrader::BfOffset value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfTradeData.offset)
}

// optional double price = 7;
void BfTradeData::clear_price() {
  price_ = 0;
}
 double BfTradeData::price() const {
  // @@protoc_insertion_point(field_get:bftrader.BfTradeData.price)
  return price_;
}
 void BfTradeData::set_price(double value) {
  
  price_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfTradeData.price)
}

// optional int32 volume = 8;
void BfTradeData::clear_volume() {
  volume_ = 0;
}
 ::google::protobuf::int32 BfTradeData::volume() const {
  // @@protoc_insertion_point(field_get:bftrader.BfTradeData.volume)
  return volume_;
}
 void BfTradeData::set_volume(::google::protobuf::int32 value) {
  
  volume_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfTradeData.volume)
}

// optional string tradeTime = 9;
void BfTradeData::clear_tradetime() {
  tradetime_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& BfTradeData::tradetime() const {
  // @@protoc_insertion_point(field_get:bftrader.BfTradeData.tradeTime)
  return tradetime_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfTradeData::set_tradetime(const ::std::string& value) {
  
  tradetime_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfTradeData.tradeTime)
}
 void BfTradeData::set_tradetime(const char* value) {
  
  tradetime_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfTradeData.tradeTime)
}
 void BfTradeData::set_tradetime(const char* value,
    size_t size) {
  
  tradetime_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfTradeData.tradeTime)
}
 ::std::string* BfTradeData::mutable_tradetime() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfTradeData.tradeTime)
  return tradetime_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfTradeData::release_tradetime() {
  
  return tradetime_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfTradeData::unsafe_arena_release_tradetime() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return tradetime_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void BfTradeData::set_allocated_tradetime(::std::string* tradetime) {
  if (tradetime != NULL) {
    
  } else {
    
  }
  tradetime_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tradetime,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfTradeData.tradeTime)
}
 void BfTradeData::unsafe_arena_set_allocated_tradetime(
    ::std::string* tradetime) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (tradetime != NULL) {
    
  } else {
    
  }
  tradetime_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      tradetime, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfTradeData.tradeTime)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BfOrderData::kSymbolFieldNumber;
const int BfOrderData::kExchangeFieldNumber;
const int BfOrderData::kOrderIdFieldNumber;
const int BfOrderData::kDirectionFieldNumber;
const int BfOrderData::kOffsetFieldNumber;
const int BfOrderData::kPriceFieldNumber;
const int BfOrderData::kTotalVolumeFieldNumber;
const int BfOrderData::kTradedVolumeFieldNumber;
const int BfOrderData::kStatusFieldNumber;
const int BfOrderData::kOrderTimeFieldNumber;
const int BfOrderData::kCancelTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BfOrderData::BfOrderData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bftrader.BfOrderData)
}

BfOrderData::BfOrderData(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bftrader.BfOrderData)
}

void BfOrderData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BfOrderData::BfOrderData(const BfOrderData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bftrader.BfOrderData)
}

void BfOrderData::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  direction_ = 0;
  offset_ = 0;
  price_ = 0;
  totalvolume_ = 0;
  tradedvolume_ = 0;
  status_ = 0;
  ordertime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  canceltime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

BfOrderData::~BfOrderData() {
  // @@protoc_insertion_point(destructor:bftrader.BfOrderData)
  SharedDtor();
}

void BfOrderData::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  symbol_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  exchange_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  orderid_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ordertime_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  canceltime_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
  }
}

void BfOrderData::ArenaDtor(void* object) {
  BfOrderData* _this = reinterpret_cast< BfOrderData* >(object);
  (void)_this;
}
void BfOrderData::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void BfOrderData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BfOrderData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BfOrderData_descriptor_;
}

const BfOrderData& BfOrderData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bftrader_2eproto();
  return *default_instance_;
}

BfOrderData* BfOrderData::default_instance_ = NULL;

BfOrderData* BfOrderData::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<BfOrderData>(arena);
}

void BfOrderData::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BfOrderData*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(direction_, tradedvolume_);
  symbol_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  exchange_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  orderid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  status_ = 0;
  ordertime_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  canceltime_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());

#undef ZR_HELPER_
#undef ZR_

}

bool BfOrderData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bftrader.BfOrderData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string symbol = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bftrader.BfOrderData.symbol"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_exchange;
        break;
      }

      // optional string exchange = 2;
      case 2: {
        if (tag == 18) {
         parse_exchange:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exchange().data(), this->exchange().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bftrader.BfOrderData.exchange"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_orderId;
        break;
      }

      // optional string orderId = 3;
      case 3: {
        if (tag == 26) {
         parse_orderId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->orderid().data(), this->orderid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bftrader.BfOrderData.orderId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_direction;
        break;
      }

      // optional .bftrader.BfDirection direction = 4;
      case 4: {
        if (tag == 32) {
         parse_direction:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_direction(static_cast< ::bftrader::BfDirection >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_offset;
        break;
      }

      // optional .bftrader.BfOffset offset = 5;
      case 5: {
        if (tag == 40) {
         parse_offset:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_offset(static_cast< ::bftrader::BfOffset >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_price;
        break;
      }

      // optional double price = 6;
      case 6: {
        if (tag == 49) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_totalVolume;
        break;
      }

      // optional int32 totalVolume = 7;
      case 7: {
        if (tag == 56) {
         parse_totalVolume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalvolume_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_tradedVolume;
        break;
      }

      // optional int32 tradedVolume = 8;
      case 8: {
        if (tag == 64) {
         parse_tradedVolume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tradedvolume_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_status;
        break;
      }

      // optional .bftrader.BfStatus status = 9;
      case 9: {
        if (tag == 72) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::bftrader::BfStatus >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_orderTime;
        break;
      }

      // optional string orderTime = 10;
      case 10: {
        if (tag == 82) {
         parse_orderTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ordertime()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ordertime().data(), this->ordertime().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bftrader.BfOrderData.orderTime"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_cancelTime;
        break;
      }

      // optional string cancelTime = 11;
      case 11: {
        if (tag == 90) {
         parse_cancelTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_canceltime()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->canceltime().data(), this->canceltime().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bftrader.BfOrderData.cancelTime"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bftrader.BfOrderData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bftrader.BfOrderData)
  return false;
#undef DO_
}

void BfOrderData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bftrader.BfOrderData)
  // optional string symbol = 1;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfOrderData.symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->symbol(), output);
  }

  // optional string exchange = 2;
  if (this->exchange().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfOrderData.exchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->exchange(), output);
  }

  // optional string orderId = 3;
  if (this->orderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->orderid().data(), this->orderid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfOrderData.orderId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->orderid(), output);
  }

  // optional .bftrader.BfDirection direction = 4;
  if (this->direction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->direction(), output);
  }

  // optional .bftrader.BfOffset offset = 5;
  if (this->offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->offset(), output);
  }

  // optional double price = 6;
  if (this->price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->price(), output);
  }

  // optional int32 totalVolume = 7;
  if (this->totalvolume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->totalvolume(), output);
  }

  // optional int32 tradedVolume = 8;
  if (this->tradedvolume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->tradedvolume(), output);
  }

  // optional .bftrader.BfStatus status = 9;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->status(), output);
  }

  // optional string orderTime = 10;
  if (this->ordertime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ordertime().data(), this->ordertime().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfOrderData.orderTime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->ordertime(), output);
  }

  // optional string cancelTime = 11;
  if (this->canceltime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->canceltime().data(), this->canceltime().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfOrderData.cancelTime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->canceltime(), output);
  }

  // @@protoc_insertion_point(serialize_end:bftrader.BfOrderData)
}

::google::protobuf::uint8* BfOrderData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bftrader.BfOrderData)
  // optional string symbol = 1;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfOrderData.symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->symbol(), target);
  }

  // optional string exchange = 2;
  if (this->exchange().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfOrderData.exchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->exchange(), target);
  }

  // optional string orderId = 3;
  if (this->orderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->orderid().data(), this->orderid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfOrderData.orderId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->orderid(), target);
  }

  // optional .bftrader.BfDirection direction = 4;
  if (this->direction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->direction(), target);
  }

  // optional .bftrader.BfOffset offset = 5;
  if (this->offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->offset(), target);
  }

  // optional double price = 6;
  if (this->price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->price(), target);
  }

  // optional int32 totalVolume = 7;
  if (this->totalvolume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->totalvolume(), target);
  }

  // optional int32 tradedVolume = 8;
  if (this->tradedvolume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->tradedvolume(), target);
  }

  // optional .bftrader.BfStatus status = 9;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->status(), target);
  }

  // optional string orderTime = 10;
  if (this->ordertime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ordertime().data(), this->ordertime().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfOrderData.orderTime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->ordertime(), target);
  }

  // optional string cancelTime = 11;
  if (this->canceltime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->canceltime().data(), this->canceltime().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfOrderData.cancelTime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->canceltime(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:bftrader.BfOrderData)
  return target;
}

int BfOrderData::ByteSize() const {
  int total_size = 0;

  // optional string symbol = 1;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->symbol());
  }

  // optional string exchange = 2;
  if (this->exchange().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchange());
  }

  // optional string orderId = 3;
  if (this->orderid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->orderid());
  }

  // optional .bftrader.BfDirection direction = 4;
  if (this->direction() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->direction());
  }

  // optional .bftrader.BfOffset offset = 5;
  if (this->offset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->offset());
  }

  // optional double price = 6;
  if (this->price() != 0) {
    total_size += 1 + 8;
  }

  // optional int32 totalVolume = 7;
  if (this->totalvolume() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->totalvolume());
  }

  // optional int32 tradedVolume = 8;
  if (this->tradedvolume() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tradedvolume());
  }

  // optional .bftrader.BfStatus status = 9;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  // optional string orderTime = 10;
  if (this->ordertime().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ordertime());
  }

  // optional string cancelTime = 11;
  if (this->canceltime().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->canceltime());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BfOrderData::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BfOrderData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BfOrderData>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BfOrderData::MergeFrom(const BfOrderData& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.symbol().size() > 0) {
    set_symbol(from.symbol());
  }
  if (from.exchange().size() > 0) {
    set_exchange(from.exchange());
  }
  if (from.orderid().size() > 0) {
    set_orderid(from.orderid());
  }
  if (from.direction() != 0) {
    set_direction(from.direction());
  }
  if (from.offset() != 0) {
    set_offset(from.offset());
  }
  if (from.price() != 0) {
    set_price(from.price());
  }
  if (from.totalvolume() != 0) {
    set_totalvolume(from.totalvolume());
  }
  if (from.tradedvolume() != 0) {
    set_tradedvolume(from.tradedvolume());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.ordertime().size() > 0) {
    set_ordertime(from.ordertime());
  }
  if (from.canceltime().size() > 0) {
    set_canceltime(from.canceltime());
  }
}

void BfOrderData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BfOrderData::CopyFrom(const BfOrderData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BfOrderData::IsInitialized() const {

  return true;
}

void BfOrderData::Swap(BfOrderData* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    BfOrderData temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void BfOrderData::UnsafeArenaSwap(BfOrderData* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void BfOrderData::InternalSwap(BfOrderData* other) {
  symbol_.Swap(&other->symbol_);
  exchange_.Swap(&other->exchange_);
  orderid_.Swap(&other->orderid_);
  std::swap(direction_, other->direction_);
  std::swap(offset_, other->offset_);
  std::swap(price_, other->price_);
  std::swap(totalvolume_, other->totalvolume_);
  std::swap(tradedvolume_, other->tradedvolume_);
  std::swap(status_, other->status_);
  ordertime_.Swap(&other->ordertime_);
  canceltime_.Swap(&other->canceltime_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BfOrderData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BfOrderData_descriptor_;
  metadata.reflection = BfOrderData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BfOrderData

// optional string symbol = 1;
void BfOrderData::clear_symbol() {
  symbol_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& BfOrderData::symbol() const {
  // @@protoc_insertion_point(field_get:bftrader.BfOrderData.symbol)
  return symbol_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfOrderData::set_symbol(const ::std::string& value) {
  
  symbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfOrderData.symbol)
}
 void BfOrderData::set_symbol(const char* value) {
  
  symbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfOrderData.symbol)
}
 void BfOrderData::set_symbol(const char* value,
    size_t size) {
  
  symbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfOrderData.symbol)
}
 ::std::string* BfOrderData::mutable_symbol() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfOrderData.symbol)
  return symbol_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfOrderData::release_symbol() {
  
  return symbol_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfOrderData::unsafe_arena_release_symbol() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return symbol_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void BfOrderData::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfOrderData.symbol)
}
 void BfOrderData::unsafe_arena_set_allocated_symbol(
    ::std::string* symbol) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      symbol, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfOrderData.symbol)
}

// optional string exchange = 2;
void BfOrderData::clear_exchange() {
  exchange_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& BfOrderData::exchange() const {
  // @@protoc_insertion_point(field_get:bftrader.BfOrderData.exchange)
  return exchange_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfOrderData::set_exchange(const ::std::string& value) {
  
  exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfOrderData.exchange)
}
 void BfOrderData::set_exchange(const char* value) {
  
  exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfOrderData.exchange)
}
 void BfOrderData::set_exchange(const char* value,
    size_t size) {
  
  exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfOrderData.exchange)
}
 ::std::string* BfOrderData::mutable_exchange() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfOrderData.exchange)
  return exchange_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfOrderData::release_exchange() {
  
  return exchange_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfOrderData::unsafe_arena_release_exchange() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return exchange_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void BfOrderData::set_allocated_exchange(::std::string* exchange) {
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfOrderData.exchange)
}
 void BfOrderData::unsafe_arena_set_allocated_exchange(
    ::std::string* exchange) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      exchange, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfOrderData.exchange)
}

// optional string orderId = 3;
void BfOrderData::clear_orderid() {
  orderid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& BfOrderData::orderid() const {
  // @@protoc_insertion_point(field_get:bftrader.BfOrderData.orderId)
  return orderid_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfOrderData::set_orderid(const ::std::string& value) {
  
  orderid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfOrderData.orderId)
}
 void BfOrderData::set_orderid(const char* value) {
  
  orderid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfOrderData.orderId)
}
 void BfOrderData::set_orderid(const char* value,
    size_t size) {
  
  orderid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfOrderData.orderId)
}
 ::std::string* BfOrderData::mutable_orderid() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfOrderData.orderId)
  return orderid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfOrderData::release_orderid() {
  
  return orderid_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfOrderData::unsafe_arena_release_orderid() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return orderid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void BfOrderData::set_allocated_orderid(::std::string* orderid) {
  if (orderid != NULL) {
    
  } else {
    
  }
  orderid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orderid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfOrderData.orderId)
}
 void BfOrderData::unsafe_arena_set_allocated_orderid(
    ::std::string* orderid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (orderid != NULL) {
    
  } else {
    
  }
  orderid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      orderid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfOrderData.orderId)
}

// optional .bftrader.BfDirection direction = 4;
void BfOrderData::clear_direction() {
  direction_ = 0;
}
 ::bftrader::BfDirection BfOrderData::direction() const {
  // @@protoc_insertion_point(field_get:bftrader.BfOrderData.direction)
  return static_cast< ::bftrader::BfDirection >(direction_);
}
 void BfOrderData::set_direction(::bftrader::BfDirection value) {
  
  direction_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfOrderData.direction)
}

// optional .bftrader.BfOffset offset = 5;
void BfOrderData::clear_offset() {
  offset_ = 0;
}
 ::bftrader::BfOffset BfOrderData::offset() const {
  // @@protoc_insertion_point(field_get:bftrader.BfOrderData.offset)
  return static_cast< ::bftrader::BfOffset >(offset_);
}
 void BfOrderData::set_offset(::bftrader::BfOffset value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfOrderData.offset)
}

// optional double price = 6;
void BfOrderData::clear_price() {
  price_ = 0;
}
 double BfOrderData::price() const {
  // @@protoc_insertion_point(field_get:bftrader.BfOrderData.price)
  return price_;
}
 void BfOrderData::set_price(double value) {
  
  price_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfOrderData.price)
}

// optional int32 totalVolume = 7;
void BfOrderData::clear_totalvolume() {
  totalvolume_ = 0;
}
 ::google::protobuf::int32 BfOrderData::totalvolume() const {
  // @@protoc_insertion_point(field_get:bftrader.BfOrderData.totalVolume)
  return totalvolume_;
}
 void BfOrderData::set_totalvolume(::google::protobuf::int32 value) {
  
  totalvolume_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfOrderData.totalVolume)
}

// optional int32 tradedVolume = 8;
void BfOrderData::clear_tradedvolume() {
  tradedvolume_ = 0;
}
 ::google::protobuf::int32 BfOrderData::tradedvolume() const {
  // @@protoc_insertion_point(field_get:bftrader.BfOrderData.tradedVolume)
  return tradedvolume_;
}
 void BfOrderData::set_tradedvolume(::google::protobuf::int32 value) {
  
  tradedvolume_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfOrderData.tradedVolume)
}

// optional .bftrader.BfStatus status = 9;
void BfOrderData::clear_status() {
  status_ = 0;
}
 ::bftrader::BfStatus BfOrderData::status() const {
  // @@protoc_insertion_point(field_get:bftrader.BfOrderData.status)
  return static_cast< ::bftrader::BfStatus >(status_);
}
 void BfOrderData::set_status(::bftrader::BfStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfOrderData.status)
}

// optional string orderTime = 10;
void BfOrderData::clear_ordertime() {
  ordertime_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& BfOrderData::ordertime() const {
  // @@protoc_insertion_point(field_get:bftrader.BfOrderData.orderTime)
  return ordertime_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfOrderData::set_ordertime(const ::std::string& value) {
  
  ordertime_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfOrderData.orderTime)
}
 void BfOrderData::set_ordertime(const char* value) {
  
  ordertime_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfOrderData.orderTime)
}
 void BfOrderData::set_ordertime(const char* value,
    size_t size) {
  
  ordertime_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfOrderData.orderTime)
}
 ::std::string* BfOrderData::mutable_ordertime() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfOrderData.orderTime)
  return ordertime_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfOrderData::release_ordertime() {
  
  return ordertime_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfOrderData::unsafe_arena_release_ordertime() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return ordertime_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void BfOrderData::set_allocated_ordertime(::std::string* ordertime) {
  if (ordertime != NULL) {
    
  } else {
    
  }
  ordertime_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ordertime,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfOrderData.orderTime)
}
 void BfOrderData::unsafe_arena_set_allocated_ordertime(
    ::std::string* ordertime) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (ordertime != NULL) {
    
  } else {
    
  }
  ordertime_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ordertime, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfOrderData.orderTime)
}

// optional string cancelTime = 11;
void BfOrderData::clear_canceltime() {
  canceltime_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& BfOrderData::canceltime() const {
  // @@protoc_insertion_point(field_get:bftrader.BfOrderData.cancelTime)
  return canceltime_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfOrderData::set_canceltime(const ::std::string& value) {
  
  canceltime_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfOrderData.cancelTime)
}
 void BfOrderData::set_canceltime(const char* value) {
  
  canceltime_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfOrderData.cancelTime)
}
 void BfOrderData::set_canceltime(const char* value,
    size_t size) {
  
  canceltime_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfOrderData.cancelTime)
}
 ::std::string* BfOrderData::mutable_canceltime() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfOrderData.cancelTime)
  return canceltime_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfOrderData::release_canceltime() {
  
  return canceltime_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfOrderData::unsafe_arena_release_canceltime() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return canceltime_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void BfOrderData::set_allocated_canceltime(::std::string* canceltime) {
  if (canceltime != NULL) {
    
  } else {
    
  }
  canceltime_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), canceltime,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfOrderData.cancelTime)
}
 void BfOrderData::unsafe_arena_set_allocated_canceltime(
    ::std::string* canceltime) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (canceltime != NULL) {
    
  } else {
    
  }
  canceltime_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      canceltime, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfOrderData.cancelTime)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BfPositionData::kSymbolFieldNumber;
const int BfPositionData::kExchangeFieldNumber;
const int BfPositionData::kDirectionFieldNumber;
const int BfPositionData::kPositionFieldNumber;
const int BfPositionData::kFrozenFieldNumber;
const int BfPositionData::kPriceFieldNumber;
const int BfPositionData::kYdPositionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BfPositionData::BfPositionData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bftrader.BfPositionData)
}

BfPositionData::BfPositionData(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bftrader.BfPositionData)
}

void BfPositionData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BfPositionData::BfPositionData(const BfPositionData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bftrader.BfPositionData)
}

void BfPositionData::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  direction_ = 0;
  position_ = 0;
  frozen_ = 0;
  price_ = 0;
  ydposition_ = 0;
}

BfPositionData::~BfPositionData() {
  // @@protoc_insertion_point(destructor:bftrader.BfPositionData)
  SharedDtor();
}

void BfPositionData::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  symbol_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  exchange_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
  }
}

void BfPositionData::ArenaDtor(void* object) {
  BfPositionData* _this = reinterpret_cast< BfPositionData* >(object);
  (void)_this;
}
void BfPositionData::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void BfPositionData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BfPositionData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BfPositionData_descriptor_;
}

const BfPositionData& BfPositionData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bftrader_2eproto();
  return *default_instance_;
}

BfPositionData* BfPositionData::default_instance_ = NULL;

BfPositionData* BfPositionData::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<BfPositionData>(arena);
}

void BfPositionData::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BfPositionData*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(direction_, ydposition_);
  symbol_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  exchange_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());

#undef ZR_HELPER_
#undef ZR_

}

bool BfPositionData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bftrader.BfPositionData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string symbol = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bftrader.BfPositionData.symbol"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_exchange;
        break;
      }

      // optional string exchange = 2;
      case 2: {
        if (tag == 18) {
         parse_exchange:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exchange().data(), this->exchange().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bftrader.BfPositionData.exchange"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_direction;
        break;
      }

      // optional .bftrader.BfDirection direction = 3;
      case 3: {
        if (tag == 24) {
         parse_direction:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_direction(static_cast< ::bftrader::BfDirection >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_position;
        break;
      }

      // optional int32 position = 4;
      case 4: {
        if (tag == 32) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_frozen;
        break;
      }

      // optional int32 frozen = 5;
      case 5: {
        if (tag == 40) {
         parse_frozen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frozen_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_price;
        break;
      }

      // optional double price = 6;
      case 6: {
        if (tag == 49) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_ydPosition;
        break;
      }

      // optional int32 ydPosition = 7;
      case 7: {
        if (tag == 56) {
         parse_ydPosition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ydposition_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bftrader.BfPositionData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bftrader.BfPositionData)
  return false;
#undef DO_
}

void BfPositionData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bftrader.BfPositionData)
  // optional string symbol = 1;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfPositionData.symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->symbol(), output);
  }

  // optional string exchange = 2;
  if (this->exchange().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfPositionData.exchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->exchange(), output);
  }

  // optional .bftrader.BfDirection direction = 3;
  if (this->direction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->direction(), output);
  }

  // optional int32 position = 4;
  if (this->position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->position(), output);
  }

  // optional int32 frozen = 5;
  if (this->frozen() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->frozen(), output);
  }

  // optional double price = 6;
  if (this->price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->price(), output);
  }

  // optional int32 ydPosition = 7;
  if (this->ydposition() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->ydposition(), output);
  }

  // @@protoc_insertion_point(serialize_end:bftrader.BfPositionData)
}

::google::protobuf::uint8* BfPositionData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bftrader.BfPositionData)
  // optional string symbol = 1;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfPositionData.symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->symbol(), target);
  }

  // optional string exchange = 2;
  if (this->exchange().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfPositionData.exchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->exchange(), target);
  }

  // optional .bftrader.BfDirection direction = 3;
  if (this->direction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->direction(), target);
  }

  // optional int32 position = 4;
  if (this->position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->position(), target);
  }

  // optional int32 frozen = 5;
  if (this->frozen() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->frozen(), target);
  }

  // optional double price = 6;
  if (this->price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->price(), target);
  }

  // optional int32 ydPosition = 7;
  if (this->ydposition() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->ydposition(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:bftrader.BfPositionData)
  return target;
}

int BfPositionData::ByteSize() const {
  int total_size = 0;

  // optional string symbol = 1;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->symbol());
  }

  // optional string exchange = 2;
  if (this->exchange().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchange());
  }

  // optional .bftrader.BfDirection direction = 3;
  if (this->direction() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->direction());
  }

  // optional int32 position = 4;
  if (this->position() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->position());
  }

  // optional int32 frozen = 5;
  if (this->frozen() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->frozen());
  }

  // optional double price = 6;
  if (this->price() != 0) {
    total_size += 1 + 8;
  }

  // optional int32 ydPosition = 7;
  if (this->ydposition() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ydposition());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BfPositionData::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BfPositionData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BfPositionData>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BfPositionData::MergeFrom(const BfPositionData& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.symbol().size() > 0) {
    set_symbol(from.symbol());
  }
  if (from.exchange().size() > 0) {
    set_exchange(from.exchange());
  }
  if (from.direction() != 0) {
    set_direction(from.direction());
  }
  if (from.position() != 0) {
    set_position(from.position());
  }
  if (from.frozen() != 0) {
    set_frozen(from.frozen());
  }
  if (from.price() != 0) {
    set_price(from.price());
  }
  if (from.ydposition() != 0) {
    set_ydposition(from.ydposition());
  }
}

void BfPositionData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BfPositionData::CopyFrom(const BfPositionData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BfPositionData::IsInitialized() const {

  return true;
}

void BfPositionData::Swap(BfPositionData* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    BfPositionData temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void BfPositionData::UnsafeArenaSwap(BfPositionData* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void BfPositionData::InternalSwap(BfPositionData* other) {
  symbol_.Swap(&other->symbol_);
  exchange_.Swap(&other->exchange_);
  std::swap(direction_, other->direction_);
  std::swap(position_, other->position_);
  std::swap(frozen_, other->frozen_);
  std::swap(price_, other->price_);
  std::swap(ydposition_, other->ydposition_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BfPositionData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BfPositionData_descriptor_;
  metadata.reflection = BfPositionData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BfPositionData

// optional string symbol = 1;
void BfPositionData::clear_symbol() {
  symbol_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& BfPositionData::symbol() const {
  // @@protoc_insertion_point(field_get:bftrader.BfPositionData.symbol)
  return symbol_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfPositionData::set_symbol(const ::std::string& value) {
  
  symbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfPositionData.symbol)
}
 void BfPositionData::set_symbol(const char* value) {
  
  symbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfPositionData.symbol)
}
 void BfPositionData::set_symbol(const char* value,
    size_t size) {
  
  symbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfPositionData.symbol)
}
 ::std::string* BfPositionData::mutable_symbol() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfPositionData.symbol)
  return symbol_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfPositionData::release_symbol() {
  
  return symbol_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfPositionData::unsafe_arena_release_symbol() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return symbol_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void BfPositionData::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfPositionData.symbol)
}
 void BfPositionData::unsafe_arena_set_allocated_symbol(
    ::std::string* symbol) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      symbol, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfPositionData.symbol)
}

// optional string exchange = 2;
void BfPositionData::clear_exchange() {
  exchange_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& BfPositionData::exchange() const {
  // @@protoc_insertion_point(field_get:bftrader.BfPositionData.exchange)
  return exchange_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfPositionData::set_exchange(const ::std::string& value) {
  
  exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfPositionData.exchange)
}
 void BfPositionData::set_exchange(const char* value) {
  
  exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfPositionData.exchange)
}
 void BfPositionData::set_exchange(const char* value,
    size_t size) {
  
  exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfPositionData.exchange)
}
 ::std::string* BfPositionData::mutable_exchange() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfPositionData.exchange)
  return exchange_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfPositionData::release_exchange() {
  
  return exchange_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfPositionData::unsafe_arena_release_exchange() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return exchange_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void BfPositionData::set_allocated_exchange(::std::string* exchange) {
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfPositionData.exchange)
}
 void BfPositionData::unsafe_arena_set_allocated_exchange(
    ::std::string* exchange) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      exchange, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfPositionData.exchange)
}

// optional .bftrader.BfDirection direction = 3;
void BfPositionData::clear_direction() {
  direction_ = 0;
}
 ::bftrader::BfDirection BfPositionData::direction() const {
  // @@protoc_insertion_point(field_get:bftrader.BfPositionData.direction)
  return static_cast< ::bftrader::BfDirection >(direction_);
}
 void BfPositionData::set_direction(::bftrader::BfDirection value) {
  
  direction_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfPositionData.direction)
}

// optional int32 position = 4;
void BfPositionData::clear_position() {
  position_ = 0;
}
 ::google::protobuf::int32 BfPositionData::position() const {
  // @@protoc_insertion_point(field_get:bftrader.BfPositionData.position)
  return position_;
}
 void BfPositionData::set_position(::google::protobuf::int32 value) {
  
  position_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfPositionData.position)
}

// optional int32 frozen = 5;
void BfPositionData::clear_frozen() {
  frozen_ = 0;
}
 ::google::protobuf::int32 BfPositionData::frozen() const {
  // @@protoc_insertion_point(field_get:bftrader.BfPositionData.frozen)
  return frozen_;
}
 void BfPositionData::set_frozen(::google::protobuf::int32 value) {
  
  frozen_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfPositionData.frozen)
}

// optional double price = 6;
void BfPositionData::clear_price() {
  price_ = 0;
}
 double BfPositionData::price() const {
  // @@protoc_insertion_point(field_get:bftrader.BfPositionData.price)
  return price_;
}
 void BfPositionData::set_price(double value) {
  
  price_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfPositionData.price)
}

// optional int32 ydPosition = 7;
void BfPositionData::clear_ydposition() {
  ydposition_ = 0;
}
 ::google::protobuf::int32 BfPositionData::ydposition() const {
  // @@protoc_insertion_point(field_get:bftrader.BfPositionData.ydPosition)
  return ydposition_;
}
 void BfPositionData::set_ydposition(::google::protobuf::int32 value) {
  
  ydposition_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfPositionData.ydPosition)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BfAccountData::kAccountIdFieldNumber;
const int BfAccountData::kPreBalanceFieldNumber;
const int BfAccountData::kBalanceFieldNumber;
const int BfAccountData::kAvailableFieldNumber;
const int BfAccountData::kCommissionFieldNumber;
const int BfAccountData::kMarginFieldNumber;
const int BfAccountData::kCloseProfitFieldNumber;
const int BfAccountData::kPositionProfitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BfAccountData::BfAccountData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bftrader.BfAccountData)
}

BfAccountData::BfAccountData(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bftrader.BfAccountData)
}

void BfAccountData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BfAccountData::BfAccountData(const BfAccountData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bftrader.BfAccountData)
}

void BfAccountData::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  accountid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prebalance_ = 0;
  balance_ = 0;
  available_ = 0;
  commission_ = 0;
  margin_ = 0;
  closeprofit_ = 0;
  positionprofit_ = 0;
}

BfAccountData::~BfAccountData() {
  // @@protoc_insertion_point(destructor:bftrader.BfAccountData)
  SharedDtor();
}

void BfAccountData::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  accountid_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
  }
}

void BfAccountData::ArenaDtor(void* object) {
  BfAccountData* _this = reinterpret_cast< BfAccountData* >(object);
  (void)_this;
}
void BfAccountData::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void BfAccountData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BfAccountData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BfAccountData_descriptor_;
}

const BfAccountData& BfAccountData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bftrader_2eproto();
  return *default_instance_;
}

BfAccountData* BfAccountData::default_instance_ = NULL;

BfAccountData* BfAccountData::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<BfAccountData>(arena);
}

void BfAccountData::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BfAccountData*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(prebalance_, positionprofit_);
  accountid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());

#undef ZR_HELPER_
#undef ZR_

}

bool BfAccountData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bftrader.BfAccountData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string accountId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accountid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->accountid().data(), this->accountid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bftrader.BfAccountData.accountId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_preBalance;
        break;
      }

      // optional double preBalance = 2;
      case 2: {
        if (tag == 17) {
         parse_preBalance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &prebalance_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_balance;
        break;
      }

      // optional double balance = 3;
      case 3: {
        if (tag == 25) {
         parse_balance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &balance_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_available;
        break;
      }

      // optional double available = 4;
      case 4: {
        if (tag == 33) {
         parse_available:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &available_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_commission;
        break;
      }

      // optional double commission = 5;
      case 5: {
        if (tag == 41) {
         parse_commission:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &commission_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_margin;
        break;
      }

      // optional double margin = 6;
      case 6: {
        if (tag == 49) {
         parse_margin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &margin_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_closeProfit;
        break;
      }

      // optional double closeProfit = 7;
      case 7: {
        if (tag == 57) {
         parse_closeProfit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &closeprofit_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_positionProfit;
        break;
      }

      // optional double positionProfit = 8;
      case 8: {
        if (tag == 65) {
         parse_positionProfit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &positionprofit_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bftrader.BfAccountData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bftrader.BfAccountData)
  return false;
#undef DO_
}

void BfAccountData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bftrader.BfAccountData)
  // optional string accountId = 1;
  if (this->accountid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->accountid().data(), this->accountid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfAccountData.accountId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->accountid(), output);
  }

  // optional double preBalance = 2;
  if (this->prebalance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->prebalance(), output);
  }

  // optional double balance = 3;
  if (this->balance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->balance(), output);
  }

  // optional double available = 4;
  if (this->available() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->available(), output);
  }

  // optional double commission = 5;
  if (this->commission() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->commission(), output);
  }

  // optional double margin = 6;
  if (this->margin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->margin(), output);
  }

  // optional double closeProfit = 7;
  if (this->closeprofit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->closeprofit(), output);
  }

  // optional double positionProfit = 8;
  if (this->positionprofit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->positionprofit(), output);
  }

  // @@protoc_insertion_point(serialize_end:bftrader.BfAccountData)
}

::google::protobuf::uint8* BfAccountData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bftrader.BfAccountData)
  // optional string accountId = 1;
  if (this->accountid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->accountid().data(), this->accountid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfAccountData.accountId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->accountid(), target);
  }

  // optional double preBalance = 2;
  if (this->prebalance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->prebalance(), target);
  }

  // optional double balance = 3;
  if (this->balance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->balance(), target);
  }

  // optional double available = 4;
  if (this->available() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->available(), target);
  }

  // optional double commission = 5;
  if (this->commission() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->commission(), target);
  }

  // optional double margin = 6;
  if (this->margin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->margin(), target);
  }

  // optional double closeProfit = 7;
  if (this->closeprofit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->closeprofit(), target);
  }

  // optional double positionProfit = 8;
  if (this->positionprofit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->positionprofit(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:bftrader.BfAccountData)
  return target;
}

int BfAccountData::ByteSize() const {
  int total_size = 0;

  // optional string accountId = 1;
  if (this->accountid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->accountid());
  }

  // optional double preBalance = 2;
  if (this->prebalance() != 0) {
    total_size += 1 + 8;
  }

  // optional double balance = 3;
  if (this->balance() != 0) {
    total_size += 1 + 8;
  }

  // optional double available = 4;
  if (this->available() != 0) {
    total_size += 1 + 8;
  }

  // optional double commission = 5;
  if (this->commission() != 0) {
    total_size += 1 + 8;
  }

  // optional double margin = 6;
  if (this->margin() != 0) {
    total_size += 1 + 8;
  }

  // optional double closeProfit = 7;
  if (this->closeprofit() != 0) {
    total_size += 1 + 8;
  }

  // optional double positionProfit = 8;
  if (this->positionprofit() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BfAccountData::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BfAccountData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BfAccountData>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BfAccountData::MergeFrom(const BfAccountData& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.accountid().size() > 0) {
    set_accountid(from.accountid());
  }
  if (from.prebalance() != 0) {
    set_prebalance(from.prebalance());
  }
  if (from.balance() != 0) {
    set_balance(from.balance());
  }
  if (from.available() != 0) {
    set_available(from.available());
  }
  if (from.commission() != 0) {
    set_commission(from.commission());
  }
  if (from.margin() != 0) {
    set_margin(from.margin());
  }
  if (from.closeprofit() != 0) {
    set_closeprofit(from.closeprofit());
  }
  if (from.positionprofit() != 0) {
    set_positionprofit(from.positionprofit());
  }
}

void BfAccountData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BfAccountData::CopyFrom(const BfAccountData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BfAccountData::IsInitialized() const {

  return true;
}

void BfAccountData::Swap(BfAccountData* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    BfAccountData temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void BfAccountData::UnsafeArenaSwap(BfAccountData* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void BfAccountData::InternalSwap(BfAccountData* other) {
  accountid_.Swap(&other->accountid_);
  std::swap(prebalance_, other->prebalance_);
  std::swap(balance_, other->balance_);
  std::swap(available_, other->available_);
  std::swap(commission_, other->commission_);
  std::swap(margin_, other->margin_);
  std::swap(closeprofit_, other->closeprofit_);
  std::swap(positionprofit_, other->positionprofit_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BfAccountData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BfAccountData_descriptor_;
  metadata.reflection = BfAccountData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BfAccountData

// optional string accountId = 1;
void BfAccountData::clear_accountid() {
  accountid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& BfAccountData::accountid() const {
  // @@protoc_insertion_point(field_get:bftrader.BfAccountData.accountId)
  return accountid_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfAccountData::set_accountid(const ::std::string& value) {
  
  accountid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfAccountData.accountId)
}
 void BfAccountData::set_accountid(const char* value) {
  
  accountid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfAccountData.accountId)
}
 void BfAccountData::set_accountid(const char* value,
    size_t size) {
  
  accountid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfAccountData.accountId)
}
 ::std::string* BfAccountData::mutable_accountid() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfAccountData.accountId)
  return accountid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfAccountData::release_accountid() {
  
  return accountid_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfAccountData::unsafe_arena_release_accountid() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return accountid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void BfAccountData::set_allocated_accountid(::std::string* accountid) {
  if (accountid != NULL) {
    
  } else {
    
  }
  accountid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), accountid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfAccountData.accountId)
}
 void BfAccountData::unsafe_arena_set_allocated_accountid(
    ::std::string* accountid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (accountid != NULL) {
    
  } else {
    
  }
  accountid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      accountid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfAccountData.accountId)
}

// optional double preBalance = 2;
void BfAccountData::clear_prebalance() {
  prebalance_ = 0;
}
 double BfAccountData::prebalance() const {
  // @@protoc_insertion_point(field_get:bftrader.BfAccountData.preBalance)
  return prebalance_;
}
 void BfAccountData::set_prebalance(double value) {
  
  prebalance_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfAccountData.preBalance)
}

// optional double balance = 3;
void BfAccountData::clear_balance() {
  balance_ = 0;
}
 double BfAccountData::balance() const {
  // @@protoc_insertion_point(field_get:bftrader.BfAccountData.balance)
  return balance_;
}
 void BfAccountData::set_balance(double value) {
  
  balance_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfAccountData.balance)
}

// optional double available = 4;
void BfAccountData::clear_available() {
  available_ = 0;
}
 double BfAccountData::available() const {
  // @@protoc_insertion_point(field_get:bftrader.BfAccountData.available)
  return available_;
}
 void BfAccountData::set_available(double value) {
  
  available_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfAccountData.available)
}

// optional double commission = 5;
void BfAccountData::clear_commission() {
  commission_ = 0;
}
 double BfAccountData::commission() const {
  // @@protoc_insertion_point(field_get:bftrader.BfAccountData.commission)
  return commission_;
}
 void BfAccountData::set_commission(double value) {
  
  commission_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfAccountData.commission)
}

// optional double margin = 6;
void BfAccountData::clear_margin() {
  margin_ = 0;
}
 double BfAccountData::margin() const {
  // @@protoc_insertion_point(field_get:bftrader.BfAccountData.margin)
  return margin_;
}
 void BfAccountData::set_margin(double value) {
  
  margin_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfAccountData.margin)
}

// optional double closeProfit = 7;
void BfAccountData::clear_closeprofit() {
  closeprofit_ = 0;
}
 double BfAccountData::closeprofit() const {
  // @@protoc_insertion_point(field_get:bftrader.BfAccountData.closeProfit)
  return closeprofit_;
}
 void BfAccountData::set_closeprofit(double value) {
  
  closeprofit_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfAccountData.closeProfit)
}

// optional double positionProfit = 8;
void BfAccountData::clear_positionprofit() {
  positionprofit_ = 0;
}
 double BfAccountData::positionprofit() const {
  // @@protoc_insertion_point(field_get:bftrader.BfAccountData.positionProfit)
  return positionprofit_;
}
 void BfAccountData::set_positionprofit(double value) {
  
  positionprofit_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfAccountData.positionProfit)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BfErrorData::kErrorIdFieldNumber;
const int BfErrorData::kErrorMsgFieldNumber;
const int BfErrorData::kAdditionalInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BfErrorData::BfErrorData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bftrader.BfErrorData)
}

BfErrorData::BfErrorData(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bftrader.BfErrorData)
}

void BfErrorData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BfErrorData::BfErrorData(const BfErrorData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bftrader.BfErrorData)
}

void BfErrorData::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  errorid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errormsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  additionalinfo_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

BfErrorData::~BfErrorData() {
  // @@protoc_insertion_point(destructor:bftrader.BfErrorData)
  SharedDtor();
}

void BfErrorData::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  errorid_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  errormsg_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  additionalinfo_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
  }
}

void BfErrorData::ArenaDtor(void* object) {
  BfErrorData* _this = reinterpret_cast< BfErrorData* >(object);
  (void)_this;
}
void BfErrorData::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void BfErrorData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BfErrorData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BfErrorData_descriptor_;
}

const BfErrorData& BfErrorData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bftrader_2eproto();
  return *default_instance_;
}

BfErrorData* BfErrorData::default_instance_ = NULL;

BfErrorData* BfErrorData::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<BfErrorData>(arena);
}

void BfErrorData::Clear() {
  errorid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  errormsg_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  additionalinfo_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool BfErrorData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bftrader.BfErrorData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string errorId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errorid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->errorid().data(), this->errorid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bftrader.BfErrorData.errorId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_errorMsg;
        break;
      }

      // optional string errorMsg = 2;
      case 2: {
        if (tag == 18) {
         parse_errorMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errormsg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->errormsg().data(), this->errormsg().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bftrader.BfErrorData.errorMsg"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_additionalInfo;
        break;
      }

      // optional string additionalInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_additionalInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_additionalinfo()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->additionalinfo().data(), this->additionalinfo().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bftrader.BfErrorData.additionalInfo"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bftrader.BfErrorData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bftrader.BfErrorData)
  return false;
#undef DO_
}

void BfErrorData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bftrader.BfErrorData)
  // optional string errorId = 1;
  if (this->errorid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errorid().data(), this->errorid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfErrorData.errorId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->errorid(), output);
  }

  // optional string errorMsg = 2;
  if (this->errormsg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errormsg().data(), this->errormsg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfErrorData.errorMsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->errormsg(), output);
  }

  // optional string additionalInfo = 3;
  if (this->additionalinfo().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->additionalinfo().data(), this->additionalinfo().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfErrorData.additionalInfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->additionalinfo(), output);
  }

  // @@protoc_insertion_point(serialize_end:bftrader.BfErrorData)
}

::google::protobuf::uint8* BfErrorData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bftrader.BfErrorData)
  // optional string errorId = 1;
  if (this->errorid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errorid().data(), this->errorid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfErrorData.errorId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->errorid(), target);
  }

  // optional string errorMsg = 2;
  if (this->errormsg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errormsg().data(), this->errormsg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfErrorData.errorMsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errormsg(), target);
  }

  // optional string additionalInfo = 3;
  if (this->additionalinfo().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->additionalinfo().data(), this->additionalinfo().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfErrorData.additionalInfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->additionalinfo(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:bftrader.BfErrorData)
  return target;
}

int BfErrorData::ByteSize() const {
  int total_size = 0;

  // optional string errorId = 1;
  if (this->errorid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->errorid());
  }

  // optional string errorMsg = 2;
  if (this->errormsg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->errormsg());
  }

  // optional string additionalInfo = 3;
  if (this->additionalinfo().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->additionalinfo());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BfErrorData::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BfErrorData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BfErrorData>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BfErrorData::MergeFrom(const BfErrorData& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.errorid().size() > 0) {
    set_errorid(from.errorid());
  }
  if (from.errormsg().size() > 0) {
    set_errormsg(from.errormsg());
  }
  if (from.additionalinfo().size() > 0) {
    set_additionalinfo(from.additionalinfo());
  }
}

void BfErrorData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BfErrorData::CopyFrom(const BfErrorData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BfErrorData::IsInitialized() const {

  return true;
}

void BfErrorData::Swap(BfErrorData* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    BfErrorData temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void BfErrorData::UnsafeArenaSwap(BfErrorData* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void BfErrorData::InternalSwap(BfErrorData* other) {
  errorid_.Swap(&other->errorid_);
  errormsg_.Swap(&other->errormsg_);
  additionalinfo_.Swap(&other->additionalinfo_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BfErrorData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BfErrorData_descriptor_;
  metadata.reflection = BfErrorData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BfErrorData

// optional string errorId = 1;
void BfErrorData::clear_errorid() {
  errorid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& BfErrorData::errorid() const {
  // @@protoc_insertion_point(field_get:bftrader.BfErrorData.errorId)
  return errorid_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfErrorData::set_errorid(const ::std::string& value) {
  
  errorid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfErrorData.errorId)
}
 void BfErrorData::set_errorid(const char* value) {
  
  errorid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfErrorData.errorId)
}
 void BfErrorData::set_errorid(const char* value,
    size_t size) {
  
  errorid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfErrorData.errorId)
}
 ::std::string* BfErrorData::mutable_errorid() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfErrorData.errorId)
  return errorid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfErrorData::release_errorid() {
  
  return errorid_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfErrorData::unsafe_arena_release_errorid() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return errorid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void BfErrorData::set_allocated_errorid(::std::string* errorid) {
  if (errorid != NULL) {
    
  } else {
    
  }
  errorid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errorid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfErrorData.errorId)
}
 void BfErrorData::unsafe_arena_set_allocated_errorid(
    ::std::string* errorid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (errorid != NULL) {
    
  } else {
    
  }
  errorid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      errorid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfErrorData.errorId)
}

// optional string errorMsg = 2;
void BfErrorData::clear_errormsg() {
  errormsg_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& BfErrorData::errormsg() const {
  // @@protoc_insertion_point(field_get:bftrader.BfErrorData.errorMsg)
  return errormsg_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfErrorData::set_errormsg(const ::std::string& value) {
  
  errormsg_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfErrorData.errorMsg)
}
 void BfErrorData::set_errormsg(const char* value) {
  
  errormsg_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfErrorData.errorMsg)
}
 void BfErrorData::set_errormsg(const char* value,
    size_t size) {
  
  errormsg_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfErrorData.errorMsg)
}
 ::std::string* BfErrorData::mutable_errormsg() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfErrorData.errorMsg)
  return errormsg_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfErrorData::release_errormsg() {
  
  return errormsg_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfErrorData::unsafe_arena_release_errormsg() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return errormsg_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void BfErrorData::set_allocated_errormsg(::std::string* errormsg) {
  if (errormsg != NULL) {
    
  } else {
    
  }
  errormsg_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errormsg,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfErrorData.errorMsg)
}
 void BfErrorData::unsafe_arena_set_allocated_errormsg(
    ::std::string* errormsg) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (errormsg != NULL) {
    
  } else {
    
  }
  errormsg_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      errormsg, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfErrorData.errorMsg)
}

// optional string additionalInfo = 3;
void BfErrorData::clear_additionalinfo() {
  additionalinfo_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& BfErrorData::additionalinfo() const {
  // @@protoc_insertion_point(field_get:bftrader.BfErrorData.additionalInfo)
  return additionalinfo_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfErrorData::set_additionalinfo(const ::std::string& value) {
  
  additionalinfo_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfErrorData.additionalInfo)
}
 void BfErrorData::set_additionalinfo(const char* value) {
  
  additionalinfo_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfErrorData.additionalInfo)
}
 void BfErrorData::set_additionalinfo(const char* value,
    size_t size) {
  
  additionalinfo_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfErrorData.additionalInfo)
}
 ::std::string* BfErrorData::mutable_additionalinfo() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfErrorData.additionalInfo)
  return additionalinfo_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfErrorData::release_additionalinfo() {
  
  return additionalinfo_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfErrorData::unsafe_arena_release_additionalinfo() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return additionalinfo_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void BfErrorData::set_allocated_additionalinfo(::std::string* additionalinfo) {
  if (additionalinfo != NULL) {
    
  } else {
    
  }
  additionalinfo_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), additionalinfo,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfErrorData.additionalInfo)
}
 void BfErrorData::unsafe_arena_set_allocated_additionalinfo(
    ::std::string* additionalinfo) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (additionalinfo != NULL) {
    
  } else {
    
  }
  additionalinfo_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      additionalinfo, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfErrorData.additionalInfo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BfLogData::kLogTimeFieldNumber;
const int BfLogData::kLogContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BfLogData::BfLogData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bftrader.BfLogData)
}

BfLogData::BfLogData(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bftrader.BfLogData)
}

void BfLogData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BfLogData::BfLogData(const BfLogData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bftrader.BfLogData)
}

void BfLogData::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  logtime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  logcontent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

BfLogData::~BfLogData() {
  // @@protoc_insertion_point(destructor:bftrader.BfLogData)
  SharedDtor();
}

void BfLogData::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  logtime_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  logcontent_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
  }
}

void BfLogData::ArenaDtor(void* object) {
  BfLogData* _this = reinterpret_cast< BfLogData* >(object);
  (void)_this;
}
void BfLogData::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void BfLogData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BfLogData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BfLogData_descriptor_;
}

const BfLogData& BfLogData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bftrader_2eproto();
  return *default_instance_;
}

BfLogData* BfLogData::default_instance_ = NULL;

BfLogData* BfLogData::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<BfLogData>(arena);
}

void BfLogData::Clear() {
  logtime_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  logcontent_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool BfLogData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bftrader.BfLogData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string logTime = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logtime()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->logtime().data(), this->logtime().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bftrader.BfLogData.logTime"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_logContent;
        break;
      }

      // optional string logContent = 2;
      case 2: {
        if (tag == 18) {
         parse_logContent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logcontent()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->logcontent().data(), this->logcontent().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bftrader.BfLogData.logContent"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bftrader.BfLogData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bftrader.BfLogData)
  return false;
#undef DO_
}

void BfLogData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bftrader.BfLogData)
  // optional string logTime = 1;
  if (this->logtime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->logtime().data(), this->logtime().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfLogData.logTime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->logtime(), output);
  }

  // optional string logContent = 2;
  if (this->logcontent().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->logcontent().data(), this->logcontent().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfLogData.logContent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->logcontent(), output);
  }

  // @@protoc_insertion_point(serialize_end:bftrader.BfLogData)
}

::google::protobuf::uint8* BfLogData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bftrader.BfLogData)
  // optional string logTime = 1;
  if (this->logtime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->logtime().data(), this->logtime().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfLogData.logTime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->logtime(), target);
  }

  // optional string logContent = 2;
  if (this->logcontent().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->logcontent().data(), this->logcontent().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfLogData.logContent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->logcontent(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:bftrader.BfLogData)
  return target;
}

int BfLogData::ByteSize() const {
  int total_size = 0;

  // optional string logTime = 1;
  if (this->logtime().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->logtime());
  }

  // optional string logContent = 2;
  if (this->logcontent().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->logcontent());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BfLogData::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BfLogData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BfLogData>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BfLogData::MergeFrom(const BfLogData& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.logtime().size() > 0) {
    set_logtime(from.logtime());
  }
  if (from.logcontent().size() > 0) {
    set_logcontent(from.logcontent());
  }
}

void BfLogData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BfLogData::CopyFrom(const BfLogData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BfLogData::IsInitialized() const {

  return true;
}

void BfLogData::Swap(BfLogData* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    BfLogData temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void BfLogData::UnsafeArenaSwap(BfLogData* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void BfLogData::InternalSwap(BfLogData* other) {
  logtime_.Swap(&other->logtime_);
  logcontent_.Swap(&other->logcontent_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BfLogData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BfLogData_descriptor_;
  metadata.reflection = BfLogData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BfLogData

// optional string logTime = 1;
void BfLogData::clear_logtime() {
  logtime_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& BfLogData::logtime() const {
  // @@protoc_insertion_point(field_get:bftrader.BfLogData.logTime)
  return logtime_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfLogData::set_logtime(const ::std::string& value) {
  
  logtime_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfLogData.logTime)
}
 void BfLogData::set_logtime(const char* value) {
  
  logtime_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfLogData.logTime)
}
 void BfLogData::set_logtime(const char* value,
    size_t size) {
  
  logtime_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfLogData.logTime)
}
 ::std::string* BfLogData::mutable_logtime() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfLogData.logTime)
  return logtime_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfLogData::release_logtime() {
  
  return logtime_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfLogData::unsafe_arena_release_logtime() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return logtime_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void BfLogData::set_allocated_logtime(::std::string* logtime) {
  if (logtime != NULL) {
    
  } else {
    
  }
  logtime_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), logtime,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfLogData.logTime)
}
 void BfLogData::unsafe_arena_set_allocated_logtime(
    ::std::string* logtime) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (logtime != NULL) {
    
  } else {
    
  }
  logtime_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      logtime, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfLogData.logTime)
}

// optional string logContent = 2;
void BfLogData::clear_logcontent() {
  logcontent_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& BfLogData::logcontent() const {
  // @@protoc_insertion_point(field_get:bftrader.BfLogData.logContent)
  return logcontent_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfLogData::set_logcontent(const ::std::string& value) {
  
  logcontent_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfLogData.logContent)
}
 void BfLogData::set_logcontent(const char* value) {
  
  logcontent_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfLogData.logContent)
}
 void BfLogData::set_logcontent(const char* value,
    size_t size) {
  
  logcontent_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfLogData.logContent)
}
 ::std::string* BfLogData::mutable_logcontent() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfLogData.logContent)
  return logcontent_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfLogData::release_logcontent() {
  
  return logcontent_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfLogData::unsafe_arena_release_logcontent() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return logcontent_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void BfLogData::set_allocated_logcontent(::std::string* logcontent) {
  if (logcontent != NULL) {
    
  } else {
    
  }
  logcontent_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), logcontent,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfLogData.logContent)
}
 void BfLogData::unsafe_arena_set_allocated_logcontent(
    ::std::string* logcontent) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (logcontent != NULL) {
    
  } else {
    
  }
  logcontent_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      logcontent, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfLogData.logContent)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BfContractData::kSymbolFieldNumber;
const int BfContractData::kExchangeFieldNumber;
const int BfContractData::kNameFieldNumber;
const int BfContractData::kProductClassFieldNumber;
const int BfContractData::kVolumeMultipleFieldNumber;
const int BfContractData::kPriceTickFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BfContractData::BfContractData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bftrader.BfContractData)
}

BfContractData::BfContractData(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bftrader.BfContractData)
}

void BfContractData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BfContractData::BfContractData(const BfContractData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bftrader.BfContractData)
}

void BfContractData::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  productclass_ = 0;
  volumemultiple_ = 0;
  pricetick_ = 0;
}

BfContractData::~BfContractData() {
  // @@protoc_insertion_point(destructor:bftrader.BfContractData)
  SharedDtor();
}

void BfContractData::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  symbol_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  exchange_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
  }
}

void BfContractData::ArenaDtor(void* object) {
  BfContractData* _this = reinterpret_cast< BfContractData* >(object);
  (void)_this;
}
void BfContractData::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void BfContractData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BfContractData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BfContractData_descriptor_;
}

const BfContractData& BfContractData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bftrader_2eproto();
  return *default_instance_;
}

BfContractData* BfContractData::default_instance_ = NULL;

BfContractData* BfContractData::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<BfContractData>(arena);
}

void BfContractData::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BfContractData*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(productclass_, pricetick_);
  symbol_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  exchange_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());

#undef ZR_HELPER_
#undef ZR_

}

bool BfContractData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bftrader.BfContractData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string symbol = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bftrader.BfContractData.symbol"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_exchange;
        break;
      }

      // optional string exchange = 2;
      case 2: {
        if (tag == 18) {
         parse_exchange:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exchange().data(), this->exchange().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bftrader.BfContractData.exchange"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bftrader.BfContractData.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_productClass;
        break;
      }

      // optional .bftrader.BfProduct productClass = 4;
      case 4: {
        if (tag == 32) {
         parse_productClass:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_productclass(static_cast< ::bftrader::BfProduct >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_volumeMultiple;
        break;
      }

      // optional int32 volumeMultiple = 5;
      case 5: {
        if (tag == 40) {
         parse_volumeMultiple:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volumemultiple_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_priceTick;
        break;
      }

      // optional double priceTick = 6;
      case 6: {
        if (tag == 49) {
         parse_priceTick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pricetick_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bftrader.BfContractData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bftrader.BfContractData)
  return false;
#undef DO_
}

void BfContractData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bftrader.BfContractData)
  // optional string symbol = 1;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfContractData.symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->symbol(), output);
  }

  // optional string exchange = 2;
  if (this->exchange().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfContractData.exchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->exchange(), output);
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfContractData.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional .bftrader.BfProduct productClass = 4;
  if (this->productclass() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->productclass(), output);
  }

  // optional int32 volumeMultiple = 5;
  if (this->volumemultiple() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->volumemultiple(), output);
  }

  // optional double priceTick = 6;
  if (this->pricetick() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->pricetick(), output);
  }

  // @@protoc_insertion_point(serialize_end:bftrader.BfContractData)
}

::google::protobuf::uint8* BfContractData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bftrader.BfContractData)
  // optional string symbol = 1;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfContractData.symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->symbol(), target);
  }

  // optional string exchange = 2;
  if (this->exchange().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfContractData.exchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->exchange(), target);
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfContractData.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional .bftrader.BfProduct productClass = 4;
  if (this->productclass() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->productclass(), target);
  }

  // optional int32 volumeMultiple = 5;
  if (this->volumemultiple() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->volumemultiple(), target);
  }

  // optional double priceTick = 6;
  if (this->pricetick() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->pricetick(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:bftrader.BfContractData)
  return target;
}

int BfContractData::ByteSize() const {
  int total_size = 0;

  // optional string symbol = 1;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->symbol());
  }

  // optional string exchange = 2;
  if (this->exchange().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchange());
  }

  // optional string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional .bftrader.BfProduct productClass = 4;
  if (this->productclass() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->productclass());
  }

  // optional int32 volumeMultiple = 5;
  if (this->volumemultiple() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->volumemultiple());
  }

  // optional double priceTick = 6;
  if (this->pricetick() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BfContractData::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BfContractData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BfContractData>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BfContractData::MergeFrom(const BfContractData& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.symbol().size() > 0) {
    set_symbol(from.symbol());
  }
  if (from.exchange().size() > 0) {
    set_exchange(from.exchange());
  }
  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.productclass() != 0) {
    set_productclass(from.productclass());
  }
  if (from.volumemultiple() != 0) {
    set_volumemultiple(from.volumemultiple());
  }
  if (from.pricetick() != 0) {
    set_pricetick(from.pricetick());
  }
}

void BfContractData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BfContractData::CopyFrom(const BfContractData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BfContractData::IsInitialized() const {

  return true;
}

void BfContractData::Swap(BfContractData* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    BfContractData temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void BfContractData::UnsafeArenaSwap(BfContractData* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void BfContractData::InternalSwap(BfContractData* other) {
  symbol_.Swap(&other->symbol_);
  exchange_.Swap(&other->exchange_);
  name_.Swap(&other->name_);
  std::swap(productclass_, other->productclass_);
  std::swap(volumemultiple_, other->volumemultiple_);
  std::swap(pricetick_, other->pricetick_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BfContractData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BfContractData_descriptor_;
  metadata.reflection = BfContractData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BfContractData

// optional string symbol = 1;
void BfContractData::clear_symbol() {
  symbol_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& BfContractData::symbol() const {
  // @@protoc_insertion_point(field_get:bftrader.BfContractData.symbol)
  return symbol_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfContractData::set_symbol(const ::std::string& value) {
  
  symbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfContractData.symbol)
}
 void BfContractData::set_symbol(const char* value) {
  
  symbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfContractData.symbol)
}
 void BfContractData::set_symbol(const char* value,
    size_t size) {
  
  symbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfContractData.symbol)
}
 ::std::string* BfContractData::mutable_symbol() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfContractData.symbol)
  return symbol_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfContractData::release_symbol() {
  
  return symbol_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfContractData::unsafe_arena_release_symbol() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return symbol_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void BfContractData::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfContractData.symbol)
}
 void BfContractData::unsafe_arena_set_allocated_symbol(
    ::std::string* symbol) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      symbol, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfContractData.symbol)
}

// optional string exchange = 2;
void BfContractData::clear_exchange() {
  exchange_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& BfContractData::exchange() const {
  // @@protoc_insertion_point(field_get:bftrader.BfContractData.exchange)
  return exchange_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfContractData::set_exchange(const ::std::string& value) {
  
  exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfContractData.exchange)
}
 void BfContractData::set_exchange(const char* value) {
  
  exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfContractData.exchange)
}
 void BfContractData::set_exchange(const char* value,
    size_t size) {
  
  exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfContractData.exchange)
}
 ::std::string* BfContractData::mutable_exchange() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfContractData.exchange)
  return exchange_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfContractData::release_exchange() {
  
  return exchange_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfContractData::unsafe_arena_release_exchange() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return exchange_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void BfContractData::set_allocated_exchange(::std::string* exchange) {
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfContractData.exchange)
}
 void BfContractData::unsafe_arena_set_allocated_exchange(
    ::std::string* exchange) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      exchange, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfContractData.exchange)
}

// optional string name = 3;
void BfContractData::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& BfContractData::name() const {
  // @@protoc_insertion_point(field_get:bftrader.BfContractData.name)
  return name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfContractData::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfContractData.name)
}
 void BfContractData::set_name(const char* value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfContractData.name)
}
 void BfContractData::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfContractData.name)
}
 ::std::string* BfContractData::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfContractData.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfContractData::release_name() {
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfContractData::unsafe_arena_release_name() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void BfContractData::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfContractData.name)
}
 void BfContractData::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfContractData.name)
}

// optional .bftrader.BfProduct productClass = 4;
void BfContractData::clear_productclass() {
  productclass_ = 0;
}
 ::bftrader::BfProduct BfContractData::productclass() const {
  // @@protoc_insertion_point(field_get:bftrader.BfContractData.productClass)
  return static_cast< ::bftrader::BfProduct >(productclass_);
}
 void BfContractData::set_productclass(::bftrader::BfProduct value) {
  
  productclass_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfContractData.productClass)
}

// optional int32 volumeMultiple = 5;
void BfContractData::clear_volumemultiple() {
  volumemultiple_ = 0;
}
 ::google::protobuf::int32 BfContractData::volumemultiple() const {
  // @@protoc_insertion_point(field_get:bftrader.BfContractData.volumeMultiple)
  return volumemultiple_;
}
 void BfContractData::set_volumemultiple(::google::protobuf::int32 value) {
  
  volumemultiple_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfContractData.volumeMultiple)
}

// optional double priceTick = 6;
void BfContractData::clear_pricetick() {
  pricetick_ = 0;
}
 double BfContractData::pricetick() const {
  // @@protoc_insertion_point(field_get:bftrader.BfContractData.priceTick)
  return pricetick_;
}
 void BfContractData::set_pricetick(double value) {
  
  pricetick_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfContractData.priceTick)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BfKvData::kKeyFieldNumber;
const int BfKvData::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BfKvData::BfKvData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bftrader.BfKvData)
}

BfKvData::BfKvData(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bftrader.BfKvData)
}

void BfKvData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BfKvData::BfKvData(const BfKvData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bftrader.BfKvData)
}

void BfKvData::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

BfKvData::~BfKvData() {
  // @@protoc_insertion_point(destructor:bftrader.BfKvData)
  SharedDtor();
}

void BfKvData::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  key_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  value_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
  }
}

void BfKvData::ArenaDtor(void* object) {
  BfKvData* _this = reinterpret_cast< BfKvData* >(object);
  (void)_this;
}
void BfKvData::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void BfKvData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BfKvData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BfKvData_descriptor_;
}

const BfKvData& BfKvData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bftrader_2eproto();
  return *default_instance_;
}

BfKvData* BfKvData::default_instance_ = NULL;

BfKvData* BfKvData::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<BfKvData>(arena);
}

void BfKvData::Clear() {
  key_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  value_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool BfKvData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bftrader.BfKvData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bftrader.BfKvData.key"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bftrader.BfKvData.value"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bftrader.BfKvData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bftrader.BfKvData)
  return false;
#undef DO_
}

void BfKvData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bftrader.BfKvData)
  // optional string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfKvData.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfKvData.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:bftrader.BfKvData)
}

::google::protobuf::uint8* BfKvData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bftrader.BfKvData)
  // optional string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfKvData.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfKvData.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:bftrader.BfKvData)
  return target;
}

int BfKvData::ByteSize() const {
  int total_size = 0;

  // optional string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // optional string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BfKvData::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BfKvData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BfKvData>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BfKvData::MergeFrom(const BfKvData& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.key().size() > 0) {
    set_key(from.key());
  }
  if (from.value().size() > 0) {
    set_value(from.value());
  }
}

void BfKvData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BfKvData::CopyFrom(const BfKvData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BfKvData::IsInitialized() const {

  return true;
}

void BfKvData::Swap(BfKvData* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    BfKvData temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void BfKvData::UnsafeArenaSwap(BfKvData* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void BfKvData::InternalSwap(BfKvData* other) {
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BfKvData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BfKvData_descriptor_;
  metadata.reflection = BfKvData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BfKvData

// optional string key = 1;
void BfKvData::clear_key() {
  key_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& BfKvData::key() const {
  // @@protoc_insertion_point(field_get:bftrader.BfKvData.key)
  return key_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfKvData::set_key(const ::std::string& value) {
  
  key_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfKvData.key)
}
 void BfKvData::set_key(const char* value) {
  
  key_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfKvData.key)
}
 void BfKvData::set_key(const char* value,
    size_t size) {
  
  key_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfKvData.key)
}
 ::std::string* BfKvData::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfKvData.key)
  return key_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfKvData::release_key() {
  
  return key_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfKvData::unsafe_arena_release_key() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return key_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void BfKvData::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfKvData.key)
}
 void BfKvData::unsafe_arena_set_allocated_key(
    ::std::string* key) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (key != NULL) {
    
  } else {
    
  }
  key_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      key, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfKvData.key)
}

// optional string value = 2;
void BfKvData::clear_value() {
  value_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& BfKvData::value() const {
  // @@protoc_insertion_point(field_get:bftrader.BfKvData.value)
  return value_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfKvData::set_value(const ::std::string& value) {
  
  value_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfKvData.value)
}
 void BfKvData::set_value(const char* value) {
  
  value_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfKvData.value)
}
 void BfKvData::set_value(const char* value,
    size_t size) {
  
  value_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfKvData.value)
}
 ::std::string* BfKvData::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfKvData.value)
  return value_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfKvData::release_value() {
  
  return value_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfKvData::unsafe_arena_release_value() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return value_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void BfKvData::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfKvData.value)
}
 void BfKvData::unsafe_arena_set_allocated_value(
    ::std::string* value) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (value != NULL) {
    
  } else {
    
  }
  value_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfKvData.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BfSubscribeReq::kSymbolFieldNumber;
const int BfSubscribeReq::kExchangeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BfSubscribeReq::BfSubscribeReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bftrader.BfSubscribeReq)
}

BfSubscribeReq::BfSubscribeReq(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bftrader.BfSubscribeReq)
}

void BfSubscribeReq::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BfSubscribeReq::BfSubscribeReq(const BfSubscribeReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bftrader.BfSubscribeReq)
}

void BfSubscribeReq::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

BfSubscribeReq::~BfSubscribeReq() {
  // @@protoc_insertion_point(destructor:bftrader.BfSubscribeReq)
  SharedDtor();
}

void BfSubscribeReq::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  symbol_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  exchange_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
  }
}

void BfSubscribeReq::ArenaDtor(void* object) {
  BfSubscribeReq* _this = reinterpret_cast< BfSubscribeReq* >(object);
  (void)_this;
}
void BfSubscribeReq::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void BfSubscribeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BfSubscribeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BfSubscribeReq_descriptor_;
}

const BfSubscribeReq& BfSubscribeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bftrader_2eproto();
  return *default_instance_;
}

BfSubscribeReq* BfSubscribeReq::default_instance_ = NULL;

BfSubscribeReq* BfSubscribeReq::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<BfSubscribeReq>(arena);
}

void BfSubscribeReq::Clear() {
  symbol_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  exchange_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool BfSubscribeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bftrader.BfSubscribeReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string symbol = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bftrader.BfSubscribeReq.symbol"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_exchange;
        break;
      }

      // optional string exchange = 2;
      case 2: {
        if (tag == 18) {
         parse_exchange:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exchange().data(), this->exchange().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bftrader.BfSubscribeReq.exchange"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bftrader.BfSubscribeReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bftrader.BfSubscribeReq)
  return false;
#undef DO_
}

void BfSubscribeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bftrader.BfSubscribeReq)
  // optional string symbol = 1;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfSubscribeReq.symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->symbol(), output);
  }

  // optional string exchange = 2;
  if (this->exchange().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfSubscribeReq.exchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->exchange(), output);
  }

  // @@protoc_insertion_point(serialize_end:bftrader.BfSubscribeReq)
}

::google::protobuf::uint8* BfSubscribeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bftrader.BfSubscribeReq)
  // optional string symbol = 1;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfSubscribeReq.symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->symbol(), target);
  }

  // optional string exchange = 2;
  if (this->exchange().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfSubscribeReq.exchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->exchange(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:bftrader.BfSubscribeReq)
  return target;
}

int BfSubscribeReq::ByteSize() const {
  int total_size = 0;

  // optional string symbol = 1;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->symbol());
  }

  // optional string exchange = 2;
  if (this->exchange().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchange());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BfSubscribeReq::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BfSubscribeReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BfSubscribeReq>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BfSubscribeReq::MergeFrom(const BfSubscribeReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.symbol().size() > 0) {
    set_symbol(from.symbol());
  }
  if (from.exchange().size() > 0) {
    set_exchange(from.exchange());
  }
}

void BfSubscribeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BfSubscribeReq::CopyFrom(const BfSubscribeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BfSubscribeReq::IsInitialized() const {

  return true;
}

void BfSubscribeReq::Swap(BfSubscribeReq* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    BfSubscribeReq temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void BfSubscribeReq::UnsafeArenaSwap(BfSubscribeReq* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void BfSubscribeReq::InternalSwap(BfSubscribeReq* other) {
  symbol_.Swap(&other->symbol_);
  exchange_.Swap(&other->exchange_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BfSubscribeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BfSubscribeReq_descriptor_;
  metadata.reflection = BfSubscribeReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BfSubscribeReq

// optional string symbol = 1;
void BfSubscribeReq::clear_symbol() {
  symbol_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& BfSubscribeReq::symbol() const {
  // @@protoc_insertion_point(field_get:bftrader.BfSubscribeReq.symbol)
  return symbol_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfSubscribeReq::set_symbol(const ::std::string& value) {
  
  symbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfSubscribeReq.symbol)
}
 void BfSubscribeReq::set_symbol(const char* value) {
  
  symbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfSubscribeReq.symbol)
}
 void BfSubscribeReq::set_symbol(const char* value,
    size_t size) {
  
  symbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfSubscribeReq.symbol)
}
 ::std::string* BfSubscribeReq::mutable_symbol() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfSubscribeReq.symbol)
  return symbol_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfSubscribeReq::release_symbol() {
  
  return symbol_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfSubscribeReq::unsafe_arena_release_symbol() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return symbol_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void BfSubscribeReq::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfSubscribeReq.symbol)
}
 void BfSubscribeReq::unsafe_arena_set_allocated_symbol(
    ::std::string* symbol) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      symbol, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfSubscribeReq.symbol)
}

// optional string exchange = 2;
void BfSubscribeReq::clear_exchange() {
  exchange_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& BfSubscribeReq::exchange() const {
  // @@protoc_insertion_point(field_get:bftrader.BfSubscribeReq.exchange)
  return exchange_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfSubscribeReq::set_exchange(const ::std::string& value) {
  
  exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfSubscribeReq.exchange)
}
 void BfSubscribeReq::set_exchange(const char* value) {
  
  exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfSubscribeReq.exchange)
}
 void BfSubscribeReq::set_exchange(const char* value,
    size_t size) {
  
  exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfSubscribeReq.exchange)
}
 ::std::string* BfSubscribeReq::mutable_exchange() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfSubscribeReq.exchange)
  return exchange_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfSubscribeReq::release_exchange() {
  
  return exchange_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfSubscribeReq::unsafe_arena_release_exchange() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return exchange_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void BfSubscribeReq::set_allocated_exchange(::std::string* exchange) {
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfSubscribeReq.exchange)
}
 void BfSubscribeReq::unsafe_arena_set_allocated_exchange(
    ::std::string* exchange) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      exchange, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfSubscribeReq.exchange)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BfOrderReq::kSymbolFieldNumber;
const int BfOrderReq::kExchangeFieldNumber;
const int BfOrderReq::kPriceFieldNumber;
const int BfOrderReq::kVolumeFieldNumber;
const int BfOrderReq::kPriceTypeFieldNumber;
const int BfOrderReq::kDirectionFieldNumber;
const int BfOrderReq::kOffsetFieldNumber;
const int BfOrderReq::kReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BfOrderReq::BfOrderReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bftrader.BfOrderReq)
}

BfOrderReq::BfOrderReq(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bftrader.BfOrderReq)
}

void BfOrderReq::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BfOrderReq::BfOrderReq(const BfOrderReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bftrader.BfOrderReq)
}

void BfOrderReq::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  price_ = 0;
  volume_ = 0;
  pricetype_ = 0;
  direction_ = 0;
  offset_ = 0;
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

BfOrderReq::~BfOrderReq() {
  // @@protoc_insertion_point(destructor:bftrader.BfOrderReq)
  SharedDtor();
}

void BfOrderReq::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  symbol_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  exchange_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  reason_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
  }
}

void BfOrderReq::ArenaDtor(void* object) {
  BfOrderReq* _this = reinterpret_cast< BfOrderReq* >(object);
  (void)_this;
}
void BfOrderReq::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void BfOrderReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BfOrderReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BfOrderReq_descriptor_;
}

const BfOrderReq& BfOrderReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bftrader_2eproto();
  return *default_instance_;
}

BfOrderReq* BfOrderReq::default_instance_ = NULL;

BfOrderReq* BfOrderReq::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<BfOrderReq>(arena);
}

void BfOrderReq::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BfOrderReq*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(price_, offset_);
  symbol_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  exchange_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  reason_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());

#undef ZR_HELPER_
#undef ZR_

}

bool BfOrderReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bftrader.BfOrderReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string symbol = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bftrader.BfOrderReq.symbol"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_exchange;
        break;
      }

      // optional string exchange = 2;
      case 2: {
        if (tag == 18) {
         parse_exchange:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exchange().data(), this->exchange().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bftrader.BfOrderReq.exchange"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_price;
        break;
      }

      // optional double price = 3;
      case 3: {
        if (tag == 25) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_volume;
        break;
      }

      // optional int32 volume = 4;
      case 4: {
        if (tag == 32) {
         parse_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volume_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_priceType;
        break;
      }

      // optional .bftrader.BfPriceType priceType = 5;
      case 5: {
        if (tag == 40) {
         parse_priceType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_pricetype(static_cast< ::bftrader::BfPriceType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_direction;
        break;
      }

      // optional .bftrader.BfDirection direction = 6;
      case 6: {
        if (tag == 48) {
         parse_direction:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_direction(static_cast< ::bftrader::BfDirection >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_offset;
        break;
      }

      // optional .bftrader.BfOffset offset = 7;
      case 7: {
        if (tag == 56) {
         parse_offset:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_offset(static_cast< ::bftrader::BfOffset >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_reason;
        break;
      }

      // optional string reason = 8;
      case 8: {
        if (tag == 66) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bftrader.BfOrderReq.reason"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bftrader.BfOrderReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bftrader.BfOrderReq)
  return false;
#undef DO_
}

void BfOrderReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bftrader.BfOrderReq)
  // optional string symbol = 1;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfOrderReq.symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->symbol(), output);
  }

  // optional string exchange = 2;
  if (this->exchange().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfOrderReq.exchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->exchange(), output);
  }

  // optional double price = 3;
  if (this->price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->price(), output);
  }

  // optional int32 volume = 4;
  if (this->volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->volume(), output);
  }

  // optional .bftrader.BfPriceType priceType = 5;
  if (this->pricetype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->pricetype(), output);
  }

  // optional .bftrader.BfDirection direction = 6;
  if (this->direction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->direction(), output);
  }

  // optional .bftrader.BfOffset offset = 7;
  if (this->offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->offset(), output);
  }

  // optional string reason = 8;
  if (this->reason().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfOrderReq.reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->reason(), output);
  }

  // @@protoc_insertion_point(serialize_end:bftrader.BfOrderReq)
}

::google::protobuf::uint8* BfOrderReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bftrader.BfOrderReq)
  // optional string symbol = 1;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfOrderReq.symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->symbol(), target);
  }

  // optional string exchange = 2;
  if (this->exchange().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfOrderReq.exchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->exchange(), target);
  }

  // optional double price = 3;
  if (this->price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->price(), target);
  }

  // optional int32 volume = 4;
  if (this->volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->volume(), target);
  }

  // optional .bftrader.BfPriceType priceType = 5;
  if (this->pricetype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->pricetype(), target);
  }

  // optional .bftrader.BfDirection direction = 6;
  if (this->direction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->direction(), target);
  }

  // optional .bftrader.BfOffset offset = 7;
  if (this->offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->offset(), target);
  }

  // optional string reason = 8;
  if (this->reason().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfOrderReq.reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->reason(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:bftrader.BfOrderReq)
  return target;
}

int BfOrderReq::ByteSize() const {
  int total_size = 0;

  // optional string symbol = 1;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->symbol());
  }

  // optional string exchange = 2;
  if (this->exchange().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchange());
  }

  // optional double price = 3;
  if (this->price() != 0) {
    total_size += 1 + 8;
  }

  // optional int32 volume = 4;
  if (this->volume() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->volume());
  }

  // optional .bftrader.BfPriceType priceType = 5;
  if (this->pricetype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->pricetype());
  }

  // optional .bftrader.BfDirection direction = 6;
  if (this->direction() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->direction());
  }

  // optional .bftrader.BfOffset offset = 7;
  if (this->offset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->offset());
  }

  // optional string reason = 8;
  if (this->reason().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reason());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BfOrderReq::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BfOrderReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BfOrderReq>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BfOrderReq::MergeFrom(const BfOrderReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.symbol().size() > 0) {
    set_symbol(from.symbol());
  }
  if (from.exchange().size() > 0) {
    set_exchange(from.exchange());
  }
  if (from.price() != 0) {
    set_price(from.price());
  }
  if (from.volume() != 0) {
    set_volume(from.volume());
  }
  if (from.pricetype() != 0) {
    set_pricetype(from.pricetype());
  }
  if (from.direction() != 0) {
    set_direction(from.direction());
  }
  if (from.offset() != 0) {
    set_offset(from.offset());
  }
  if (from.reason().size() > 0) {
    set_reason(from.reason());
  }
}

void BfOrderReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BfOrderReq::CopyFrom(const BfOrderReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BfOrderReq::IsInitialized() const {

  return true;
}

void BfOrderReq::Swap(BfOrderReq* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    BfOrderReq temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void BfOrderReq::UnsafeArenaSwap(BfOrderReq* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void BfOrderReq::InternalSwap(BfOrderReq* other) {
  symbol_.Swap(&other->symbol_);
  exchange_.Swap(&other->exchange_);
  std::swap(price_, other->price_);
  std::swap(volume_, other->volume_);
  std::swap(pricetype_, other->pricetype_);
  std::swap(direction_, other->direction_);
  std::swap(offset_, other->offset_);
  reason_.Swap(&other->reason_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BfOrderReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BfOrderReq_descriptor_;
  metadata.reflection = BfOrderReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BfOrderReq

// optional string symbol = 1;
void BfOrderReq::clear_symbol() {
  symbol_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& BfOrderReq::symbol() const {
  // @@protoc_insertion_point(field_get:bftrader.BfOrderReq.symbol)
  return symbol_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfOrderReq::set_symbol(const ::std::string& value) {
  
  symbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfOrderReq.symbol)
}
 void BfOrderReq::set_symbol(const char* value) {
  
  symbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfOrderReq.symbol)
}
 void BfOrderReq::set_symbol(const char* value,
    size_t size) {
  
  symbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfOrderReq.symbol)
}
 ::std::string* BfOrderReq::mutable_symbol() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfOrderReq.symbol)
  return symbol_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfOrderReq::release_symbol() {
  
  return symbol_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfOrderReq::unsafe_arena_release_symbol() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return symbol_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void BfOrderReq::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfOrderReq.symbol)
}
 void BfOrderReq::unsafe_arena_set_allocated_symbol(
    ::std::string* symbol) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      symbol, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfOrderReq.symbol)
}

// optional string exchange = 2;
void BfOrderReq::clear_exchange() {
  exchange_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& BfOrderReq::exchange() const {
  // @@protoc_insertion_point(field_get:bftrader.BfOrderReq.exchange)
  return exchange_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfOrderReq::set_exchange(const ::std::string& value) {
  
  exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfOrderReq.exchange)
}
 void BfOrderReq::set_exchange(const char* value) {
  
  exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfOrderReq.exchange)
}
 void BfOrderReq::set_exchange(const char* value,
    size_t size) {
  
  exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfOrderReq.exchange)
}
 ::std::string* BfOrderReq::mutable_exchange() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfOrderReq.exchange)
  return exchange_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfOrderReq::release_exchange() {
  
  return exchange_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfOrderReq::unsafe_arena_release_exchange() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return exchange_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void BfOrderReq::set_allocated_exchange(::std::string* exchange) {
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfOrderReq.exchange)
}
 void BfOrderReq::unsafe_arena_set_allocated_exchange(
    ::std::string* exchange) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      exchange, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfOrderReq.exchange)
}

// optional double price = 3;
void BfOrderReq::clear_price() {
  price_ = 0;
}
 double BfOrderReq::price() const {
  // @@protoc_insertion_point(field_get:bftrader.BfOrderReq.price)
  return price_;
}
 void BfOrderReq::set_price(double value) {
  
  price_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfOrderReq.price)
}

// optional int32 volume = 4;
void BfOrderReq::clear_volume() {
  volume_ = 0;
}
 ::google::protobuf::int32 BfOrderReq::volume() const {
  // @@protoc_insertion_point(field_get:bftrader.BfOrderReq.volume)
  return volume_;
}
 void BfOrderReq::set_volume(::google::protobuf::int32 value) {
  
  volume_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfOrderReq.volume)
}

// optional .bftrader.BfPriceType priceType = 5;
void BfOrderReq::clear_pricetype() {
  pricetype_ = 0;
}
 ::bftrader::BfPriceType BfOrderReq::pricetype() const {
  // @@protoc_insertion_point(field_get:bftrader.BfOrderReq.priceType)
  return static_cast< ::bftrader::BfPriceType >(pricetype_);
}
 void BfOrderReq::set_pricetype(::bftrader::BfPriceType value) {
  
  pricetype_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfOrderReq.priceType)
}

// optional .bftrader.BfDirection direction = 6;
void BfOrderReq::clear_direction() {
  direction_ = 0;
}
 ::bftrader::BfDirection BfOrderReq::direction() const {
  // @@protoc_insertion_point(field_get:bftrader.BfOrderReq.direction)
  return static_cast< ::bftrader::BfDirection >(direction_);
}
 void BfOrderReq::set_direction(::bftrader::BfDirection value) {
  
  direction_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfOrderReq.direction)
}

// optional .bftrader.BfOffset offset = 7;
void BfOrderReq::clear_offset() {
  offset_ = 0;
}
 ::bftrader::BfOffset BfOrderReq::offset() const {
  // @@protoc_insertion_point(field_get:bftrader.BfOrderReq.offset)
  return static_cast< ::bftrader::BfOffset >(offset_);
}
 void BfOrderReq::set_offset(::bftrader::BfOffset value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfOrderReq.offset)
}

// optional string reason = 8;
void BfOrderReq::clear_reason() {
  reason_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& BfOrderReq::reason() const {
  // @@protoc_insertion_point(field_get:bftrader.BfOrderReq.reason)
  return reason_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfOrderReq::set_reason(const ::std::string& value) {
  
  reason_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfOrderReq.reason)
}
 void BfOrderReq::set_reason(const char* value) {
  
  reason_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfOrderReq.reason)
}
 void BfOrderReq::set_reason(const char* value,
    size_t size) {
  
  reason_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfOrderReq.reason)
}
 ::std::string* BfOrderReq::mutable_reason() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfOrderReq.reason)
  return reason_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfOrderReq::release_reason() {
  
  return reason_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfOrderReq::unsafe_arena_release_reason() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return reason_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void BfOrderReq::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    
  } else {
    
  }
  reason_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfOrderReq.reason)
}
 void BfOrderReq::unsafe_arena_set_allocated_reason(
    ::std::string* reason) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (reason != NULL) {
    
  } else {
    
  }
  reason_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      reason, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfOrderReq.reason)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BfOrderResponse::kOrderIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BfOrderResponse::BfOrderResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bftrader.BfOrderResponse)
}

BfOrderResponse::BfOrderResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bftrader.BfOrderResponse)
}

void BfOrderResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BfOrderResponse::BfOrderResponse(const BfOrderResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bftrader.BfOrderResponse)
}

void BfOrderResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  orderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

BfOrderResponse::~BfOrderResponse() {
  // @@protoc_insertion_point(destructor:bftrader.BfOrderResponse)
  SharedDtor();
}

void BfOrderResponse::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  orderid_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
  }
}

void BfOrderResponse::ArenaDtor(void* object) {
  BfOrderResponse* _this = reinterpret_cast< BfOrderResponse* >(object);
  (void)_this;
}
void BfOrderResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void BfOrderResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BfOrderResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BfOrderResponse_descriptor_;
}

const BfOrderResponse& BfOrderResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bftrader_2eproto();
  return *default_instance_;
}

BfOrderResponse* BfOrderResponse::default_instance_ = NULL;

BfOrderResponse* BfOrderResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<BfOrderResponse>(arena);
}

void BfOrderResponse::Clear() {
  orderid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool BfOrderResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bftrader.BfOrderResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string orderId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->orderid().data(), this->orderid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bftrader.BfOrderResponse.orderId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bftrader.BfOrderResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bftrader.BfOrderResponse)
  return false;
#undef DO_
}

void BfOrderResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bftrader.BfOrderResponse)
  // optional string orderId = 1;
  if (this->orderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->orderid().data(), this->orderid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfOrderResponse.orderId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->orderid(), output);
  }

  // @@protoc_insertion_point(serialize_end:bftrader.BfOrderResponse)
}

::google::protobuf::uint8* BfOrderResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bftrader.BfOrderResponse)
  // optional string orderId = 1;
  if (this->orderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->orderid().data(), this->orderid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfOrderResponse.orderId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->orderid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:bftrader.BfOrderResponse)
  return target;
}

int BfOrderResponse::ByteSize() const {
  int total_size = 0;

  // optional string orderId = 1;
  if (this->orderid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->orderid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BfOrderResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BfOrderResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BfOrderResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BfOrderResponse::MergeFrom(const BfOrderResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.orderid().size() > 0) {
    set_orderid(from.orderid());
  }
}

void BfOrderResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BfOrderResponse::CopyFrom(const BfOrderResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BfOrderResponse::IsInitialized() const {

  return true;
}

void BfOrderResponse::Swap(BfOrderResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    BfOrderResponse temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void BfOrderResponse::UnsafeArenaSwap(BfOrderResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void BfOrderResponse::InternalSwap(BfOrderResponse* other) {
  orderid_.Swap(&other->orderid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BfOrderResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BfOrderResponse_descriptor_;
  metadata.reflection = BfOrderResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BfOrderResponse

// optional string orderId = 1;
void BfOrderResponse::clear_orderid() {
  orderid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& BfOrderResponse::orderid() const {
  // @@protoc_insertion_point(field_get:bftrader.BfOrderResponse.orderId)
  return orderid_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfOrderResponse::set_orderid(const ::std::string& value) {
  
  orderid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfOrderResponse.orderId)
}
 void BfOrderResponse::set_orderid(const char* value) {
  
  orderid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfOrderResponse.orderId)
}
 void BfOrderResponse::set_orderid(const char* value,
    size_t size) {
  
  orderid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfOrderResponse.orderId)
}
 ::std::string* BfOrderResponse::mutable_orderid() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfOrderResponse.orderId)
  return orderid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfOrderResponse::release_orderid() {
  
  return orderid_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfOrderResponse::unsafe_arena_release_orderid() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return orderid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void BfOrderResponse::set_allocated_orderid(::std::string* orderid) {
  if (orderid != NULL) {
    
  } else {
    
  }
  orderid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orderid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfOrderResponse.orderId)
}
 void BfOrderResponse::unsafe_arena_set_allocated_orderid(
    ::std::string* orderid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (orderid != NULL) {
    
  } else {
    
  }
  orderid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      orderid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfOrderResponse.orderId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BfCancelOrderReq::kSymbolFieldNumber;
const int BfCancelOrderReq::kExchangeFieldNumber;
const int BfCancelOrderReq::kOrderIdFieldNumber;
const int BfCancelOrderReq::kReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BfCancelOrderReq::BfCancelOrderReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bftrader.BfCancelOrderReq)
}

BfCancelOrderReq::BfCancelOrderReq(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bftrader.BfCancelOrderReq)
}

void BfCancelOrderReq::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BfCancelOrderReq::BfCancelOrderReq(const BfCancelOrderReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bftrader.BfCancelOrderReq)
}

void BfCancelOrderReq::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  orderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

BfCancelOrderReq::~BfCancelOrderReq() {
  // @@protoc_insertion_point(destructor:bftrader.BfCancelOrderReq)
  SharedDtor();
}

void BfCancelOrderReq::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  symbol_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  exchange_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  orderid_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  reason_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
  }
}

void BfCancelOrderReq::ArenaDtor(void* object) {
  BfCancelOrderReq* _this = reinterpret_cast< BfCancelOrderReq* >(object);
  (void)_this;
}
void BfCancelOrderReq::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void BfCancelOrderReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BfCancelOrderReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BfCancelOrderReq_descriptor_;
}

const BfCancelOrderReq& BfCancelOrderReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bftrader_2eproto();
  return *default_instance_;
}

BfCancelOrderReq* BfCancelOrderReq::default_instance_ = NULL;

BfCancelOrderReq* BfCancelOrderReq::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<BfCancelOrderReq>(arena);
}

void BfCancelOrderReq::Clear() {
  symbol_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  exchange_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  orderid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  reason_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool BfCancelOrderReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bftrader.BfCancelOrderReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string symbol = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bftrader.BfCancelOrderReq.symbol"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_exchange;
        break;
      }

      // optional string exchange = 2;
      case 2: {
        if (tag == 18) {
         parse_exchange:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exchange().data(), this->exchange().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bftrader.BfCancelOrderReq.exchange"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_orderId;
        break;
      }

      // optional string orderId = 3;
      case 3: {
        if (tag == 26) {
         parse_orderId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->orderid().data(), this->orderid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bftrader.BfCancelOrderReq.orderId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_reason;
        break;
      }

      // optional string reason = 4;
      case 4: {
        if (tag == 34) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bftrader.BfCancelOrderReq.reason"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bftrader.BfCancelOrderReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bftrader.BfCancelOrderReq)
  return false;
#undef DO_
}

void BfCancelOrderReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bftrader.BfCancelOrderReq)
  // optional string symbol = 1;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfCancelOrderReq.symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->symbol(), output);
  }

  // optional string exchange = 2;
  if (this->exchange().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfCancelOrderReq.exchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->exchange(), output);
  }

  // optional string orderId = 3;
  if (this->orderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->orderid().data(), this->orderid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfCancelOrderReq.orderId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->orderid(), output);
  }

  // optional string reason = 4;
  if (this->reason().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfCancelOrderReq.reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->reason(), output);
  }

  // @@protoc_insertion_point(serialize_end:bftrader.BfCancelOrderReq)
}

::google::protobuf::uint8* BfCancelOrderReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bftrader.BfCancelOrderReq)
  // optional string symbol = 1;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfCancelOrderReq.symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->symbol(), target);
  }

  // optional string exchange = 2;
  if (this->exchange().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfCancelOrderReq.exchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->exchange(), target);
  }

  // optional string orderId = 3;
  if (this->orderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->orderid().data(), this->orderid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfCancelOrderReq.orderId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->orderid(), target);
  }

  // optional string reason = 4;
  if (this->reason().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfCancelOrderReq.reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->reason(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:bftrader.BfCancelOrderReq)
  return target;
}

int BfCancelOrderReq::ByteSize() const {
  int total_size = 0;

  // optional string symbol = 1;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->symbol());
  }

  // optional string exchange = 2;
  if (this->exchange().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchange());
  }

  // optional string orderId = 3;
  if (this->orderid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->orderid());
  }

  // optional string reason = 4;
  if (this->reason().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reason());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BfCancelOrderReq::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BfCancelOrderReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BfCancelOrderReq>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BfCancelOrderReq::MergeFrom(const BfCancelOrderReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.symbol().size() > 0) {
    set_symbol(from.symbol());
  }
  if (from.exchange().size() > 0) {
    set_exchange(from.exchange());
  }
  if (from.orderid().size() > 0) {
    set_orderid(from.orderid());
  }
  if (from.reason().size() > 0) {
    set_reason(from.reason());
  }
}

void BfCancelOrderReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BfCancelOrderReq::CopyFrom(const BfCancelOrderReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BfCancelOrderReq::IsInitialized() const {

  return true;
}

void BfCancelOrderReq::Swap(BfCancelOrderReq* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    BfCancelOrderReq temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void BfCancelOrderReq::UnsafeArenaSwap(BfCancelOrderReq* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void BfCancelOrderReq::InternalSwap(BfCancelOrderReq* other) {
  symbol_.Swap(&other->symbol_);
  exchange_.Swap(&other->exchange_);
  orderid_.Swap(&other->orderid_);
  reason_.Swap(&other->reason_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BfCancelOrderReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BfCancelOrderReq_descriptor_;
  metadata.reflection = BfCancelOrderReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BfCancelOrderReq

// optional string symbol = 1;
void BfCancelOrderReq::clear_symbol() {
  symbol_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& BfCancelOrderReq::symbol() const {
  // @@protoc_insertion_point(field_get:bftrader.BfCancelOrderReq.symbol)
  return symbol_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfCancelOrderReq::set_symbol(const ::std::string& value) {
  
  symbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfCancelOrderReq.symbol)
}
 void BfCancelOrderReq::set_symbol(const char* value) {
  
  symbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfCancelOrderReq.symbol)
}
 void BfCancelOrderReq::set_symbol(const char* value,
    size_t size) {
  
  symbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfCancelOrderReq.symbol)
}
 ::std::string* BfCancelOrderReq::mutable_symbol() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfCancelOrderReq.symbol)
  return symbol_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfCancelOrderReq::release_symbol() {
  
  return symbol_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfCancelOrderReq::unsafe_arena_release_symbol() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return symbol_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void BfCancelOrderReq::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfCancelOrderReq.symbol)
}
 void BfCancelOrderReq::unsafe_arena_set_allocated_symbol(
    ::std::string* symbol) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      symbol, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfCancelOrderReq.symbol)
}

// optional string exchange = 2;
void BfCancelOrderReq::clear_exchange() {
  exchange_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& BfCancelOrderReq::exchange() const {
  // @@protoc_insertion_point(field_get:bftrader.BfCancelOrderReq.exchange)
  return exchange_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfCancelOrderReq::set_exchange(const ::std::string& value) {
  
  exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfCancelOrderReq.exchange)
}
 void BfCancelOrderReq::set_exchange(const char* value) {
  
  exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfCancelOrderReq.exchange)
}
 void BfCancelOrderReq::set_exchange(const char* value,
    size_t size) {
  
  exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfCancelOrderReq.exchange)
}
 ::std::string* BfCancelOrderReq::mutable_exchange() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfCancelOrderReq.exchange)
  return exchange_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfCancelOrderReq::release_exchange() {
  
  return exchange_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfCancelOrderReq::unsafe_arena_release_exchange() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return exchange_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void BfCancelOrderReq::set_allocated_exchange(::std::string* exchange) {
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfCancelOrderReq.exchange)
}
 void BfCancelOrderReq::unsafe_arena_set_allocated_exchange(
    ::std::string* exchange) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      exchange, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfCancelOrderReq.exchange)
}

// optional string orderId = 3;
void BfCancelOrderReq::clear_orderid() {
  orderid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& BfCancelOrderReq::orderid() const {
  // @@protoc_insertion_point(field_get:bftrader.BfCancelOrderReq.orderId)
  return orderid_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfCancelOrderReq::set_orderid(const ::std::string& value) {
  
  orderid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfCancelOrderReq.orderId)
}
 void BfCancelOrderReq::set_orderid(const char* value) {
  
  orderid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfCancelOrderReq.orderId)
}
 void BfCancelOrderReq::set_orderid(const char* value,
    size_t size) {
  
  orderid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfCancelOrderReq.orderId)
}
 ::std::string* BfCancelOrderReq::mutable_orderid() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfCancelOrderReq.orderId)
  return orderid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfCancelOrderReq::release_orderid() {
  
  return orderid_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfCancelOrderReq::unsafe_arena_release_orderid() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return orderid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void BfCancelOrderReq::set_allocated_orderid(::std::string* orderid) {
  if (orderid != NULL) {
    
  } else {
    
  }
  orderid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), orderid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfCancelOrderReq.orderId)
}
 void BfCancelOrderReq::unsafe_arena_set_allocated_orderid(
    ::std::string* orderid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (orderid != NULL) {
    
  } else {
    
  }
  orderid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      orderid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfCancelOrderReq.orderId)
}

// optional string reason = 4;
void BfCancelOrderReq::clear_reason() {
  reason_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& BfCancelOrderReq::reason() const {
  // @@protoc_insertion_point(field_get:bftrader.BfCancelOrderReq.reason)
  return reason_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfCancelOrderReq::set_reason(const ::std::string& value) {
  
  reason_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfCancelOrderReq.reason)
}
 void BfCancelOrderReq::set_reason(const char* value) {
  
  reason_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfCancelOrderReq.reason)
}
 void BfCancelOrderReq::set_reason(const char* value,
    size_t size) {
  
  reason_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfCancelOrderReq.reason)
}
 ::std::string* BfCancelOrderReq::mutable_reason() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfCancelOrderReq.reason)
  return reason_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfCancelOrderReq::release_reason() {
  
  return reason_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfCancelOrderReq::unsafe_arena_release_reason() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return reason_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void BfCancelOrderReq::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    
  } else {
    
  }
  reason_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfCancelOrderReq.reason)
}
 void BfCancelOrderReq::unsafe_arena_set_allocated_reason(
    ::std::string* reason) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (reason != NULL) {
    
  } else {
    
  }
  reason_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      reason, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfCancelOrderReq.reason)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BfConnectReq::kRobotIdFieldNumber;
const int BfConnectReq::kEndpointFieldNumber;
const int BfConnectReq::kFromDayFieldNumber;
const int BfConnectReq::kFromTimeFieldNumber;
const int BfConnectReq::kToDayFieldNumber;
const int BfConnectReq::kToTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BfConnectReq::BfConnectReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bftrader.BfConnectReq)
}

BfConnectReq::BfConnectReq(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bftrader.BfConnectReq)
}

void BfConnectReq::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BfConnectReq::BfConnectReq(const BfConnectReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bftrader.BfConnectReq)
}

void BfConnectReq::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  robotid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  endpoint_ = 0;
  fromday_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fromtime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  today_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  totime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

BfConnectReq::~BfConnectReq() {
  // @@protoc_insertion_point(destructor:bftrader.BfConnectReq)
  SharedDtor();
}

void BfConnectReq::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  robotid_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  fromday_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  fromtime_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  today_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  totime_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
  }
}

void BfConnectReq::ArenaDtor(void* object) {
  BfConnectReq* _this = reinterpret_cast< BfConnectReq* >(object);
  (void)_this;
}
void BfConnectReq::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void BfConnectReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BfConnectReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BfConnectReq_descriptor_;
}

const BfConnectReq& BfConnectReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bftrader_2eproto();
  return *default_instance_;
}

BfConnectReq* BfConnectReq::default_instance_ = NULL;

BfConnectReq* BfConnectReq::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<BfConnectReq>(arena);
}

void BfConnectReq::Clear() {
  robotid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  endpoint_ = 0;
  fromday_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  fromtime_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  today_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  totime_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool BfConnectReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bftrader.BfConnectReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string robotId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_robotid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->robotid().data(), this->robotid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bftrader.BfConnectReq.robotId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_endpoint;
        break;
      }

      // optional int32 endpoint = 2;
      case 2: {
        if (tag == 16) {
         parse_endpoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &endpoint_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_fromDay;
        break;
      }

      // optional string fromDay = 3;
      case 3: {
        if (tag == 26) {
         parse_fromDay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fromday()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fromday().data(), this->fromday().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bftrader.BfConnectReq.fromDay"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_fromTime;
        break;
      }

      // optional string fromTime = 4;
      case 4: {
        if (tag == 34) {
         parse_fromTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fromtime()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fromtime().data(), this->fromtime().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bftrader.BfConnectReq.fromTime"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_toDay;
        break;
      }

      // optional string toDay = 5;
      case 5: {
        if (tag == 42) {
         parse_toDay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_today()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->today().data(), this->today().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bftrader.BfConnectReq.toDay"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_toTime;
        break;
      }

      // optional string toTime = 6;
      case 6: {
        if (tag == 50) {
         parse_toTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_totime()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->totime().data(), this->totime().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bftrader.BfConnectReq.toTime"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bftrader.BfConnectReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bftrader.BfConnectReq)
  return false;
#undef DO_
}

void BfConnectReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bftrader.BfConnectReq)
  // optional string robotId = 1;
  if (this->robotid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->robotid().data(), this->robotid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfConnectReq.robotId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->robotid(), output);
  }

  // optional int32 endpoint = 2;
  if (this->endpoint() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->endpoint(), output);
  }

  // optional string fromDay = 3;
  if (this->fromday().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fromday().data(), this->fromday().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfConnectReq.fromDay");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->fromday(), output);
  }

  // optional string fromTime = 4;
  if (this->fromtime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fromtime().data(), this->fromtime().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfConnectReq.fromTime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->fromtime(), output);
  }

  // optional string toDay = 5;
  if (this->today().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->today().data(), this->today().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfConnectReq.toDay");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->today(), output);
  }

  // optional string toTime = 6;
  if (this->totime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->totime().data(), this->totime().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfConnectReq.toTime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->totime(), output);
  }

  // @@protoc_insertion_point(serialize_end:bftrader.BfConnectReq)
}

::google::protobuf::uint8* BfConnectReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bftrader.BfConnectReq)
  // optional string robotId = 1;
  if (this->robotid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->robotid().data(), this->robotid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfConnectReq.robotId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->robotid(), target);
  }

  // optional int32 endpoint = 2;
  if (this->endpoint() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->endpoint(), target);
  }

  // optional string fromDay = 3;
  if (this->fromday().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fromday().data(), this->fromday().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfConnectReq.fromDay");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->fromday(), target);
  }

  // optional string fromTime = 4;
  if (this->fromtime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fromtime().data(), this->fromtime().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfConnectReq.fromTime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->fromtime(), target);
  }

  // optional string toDay = 5;
  if (this->today().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->today().data(), this->today().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfConnectReq.toDay");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->today(), target);
  }

  // optional string toTime = 6;
  if (this->totime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->totime().data(), this->totime().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfConnectReq.toTime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->totime(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:bftrader.BfConnectReq)
  return target;
}

int BfConnectReq::ByteSize() const {
  int total_size = 0;

  // optional string robotId = 1;
  if (this->robotid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->robotid());
  }

  // optional int32 endpoint = 2;
  if (this->endpoint() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->endpoint());
  }

  // optional string fromDay = 3;
  if (this->fromday().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fromday());
  }

  // optional string fromTime = 4;
  if (this->fromtime().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fromtime());
  }

  // optional string toDay = 5;
  if (this->today().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->today());
  }

  // optional string toTime = 6;
  if (this->totime().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->totime());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BfConnectReq::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BfConnectReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BfConnectReq>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BfConnectReq::MergeFrom(const BfConnectReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.robotid().size() > 0) {
    set_robotid(from.robotid());
  }
  if (from.endpoint() != 0) {
    set_endpoint(from.endpoint());
  }
  if (from.fromday().size() > 0) {
    set_fromday(from.fromday());
  }
  if (from.fromtime().size() > 0) {
    set_fromtime(from.fromtime());
  }
  if (from.today().size() > 0) {
    set_today(from.today());
  }
  if (from.totime().size() > 0) {
    set_totime(from.totime());
  }
}

void BfConnectReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BfConnectReq::CopyFrom(const BfConnectReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BfConnectReq::IsInitialized() const {

  return true;
}

void BfConnectReq::Swap(BfConnectReq* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    BfConnectReq temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void BfConnectReq::UnsafeArenaSwap(BfConnectReq* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void BfConnectReq::InternalSwap(BfConnectReq* other) {
  robotid_.Swap(&other->robotid_);
  std::swap(endpoint_, other->endpoint_);
  fromday_.Swap(&other->fromday_);
  fromtime_.Swap(&other->fromtime_);
  today_.Swap(&other->today_);
  totime_.Swap(&other->totime_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BfConnectReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BfConnectReq_descriptor_;
  metadata.reflection = BfConnectReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BfConnectReq

// optional string robotId = 1;
void BfConnectReq::clear_robotid() {
  robotid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& BfConnectReq::robotid() const {
  // @@protoc_insertion_point(field_get:bftrader.BfConnectReq.robotId)
  return robotid_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfConnectReq::set_robotid(const ::std::string& value) {
  
  robotid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfConnectReq.robotId)
}
 void BfConnectReq::set_robotid(const char* value) {
  
  robotid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfConnectReq.robotId)
}
 void BfConnectReq::set_robotid(const char* value,
    size_t size) {
  
  robotid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfConnectReq.robotId)
}
 ::std::string* BfConnectReq::mutable_robotid() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfConnectReq.robotId)
  return robotid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfConnectReq::release_robotid() {
  
  return robotid_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfConnectReq::unsafe_arena_release_robotid() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return robotid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void BfConnectReq::set_allocated_robotid(::std::string* robotid) {
  if (robotid != NULL) {
    
  } else {
    
  }
  robotid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), robotid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfConnectReq.robotId)
}
 void BfConnectReq::unsafe_arena_set_allocated_robotid(
    ::std::string* robotid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (robotid != NULL) {
    
  } else {
    
  }
  robotid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      robotid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfConnectReq.robotId)
}

// optional int32 endpoint = 2;
void BfConnectReq::clear_endpoint() {
  endpoint_ = 0;
}
 ::google::protobuf::int32 BfConnectReq::endpoint() const {
  // @@protoc_insertion_point(field_get:bftrader.BfConnectReq.endpoint)
  return endpoint_;
}
 void BfConnectReq::set_endpoint(::google::protobuf::int32 value) {
  
  endpoint_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfConnectReq.endpoint)
}

// optional string fromDay = 3;
void BfConnectReq::clear_fromday() {
  fromday_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& BfConnectReq::fromday() const {
  // @@protoc_insertion_point(field_get:bftrader.BfConnectReq.fromDay)
  return fromday_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfConnectReq::set_fromday(const ::std::string& value) {
  
  fromday_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfConnectReq.fromDay)
}
 void BfConnectReq::set_fromday(const char* value) {
  
  fromday_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfConnectReq.fromDay)
}
 void BfConnectReq::set_fromday(const char* value,
    size_t size) {
  
  fromday_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfConnectReq.fromDay)
}
 ::std::string* BfConnectReq::mutable_fromday() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfConnectReq.fromDay)
  return fromday_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfConnectReq::release_fromday() {
  
  return fromday_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfConnectReq::unsafe_arena_release_fromday() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return fromday_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void BfConnectReq::set_allocated_fromday(::std::string* fromday) {
  if (fromday != NULL) {
    
  } else {
    
  }
  fromday_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fromday,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfConnectReq.fromDay)
}
 void BfConnectReq::unsafe_arena_set_allocated_fromday(
    ::std::string* fromday) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (fromday != NULL) {
    
  } else {
    
  }
  fromday_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      fromday, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfConnectReq.fromDay)
}

// optional string fromTime = 4;
void BfConnectReq::clear_fromtime() {
  fromtime_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& BfConnectReq::fromtime() const {
  // @@protoc_insertion_point(field_get:bftrader.BfConnectReq.fromTime)
  return fromtime_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfConnectReq::set_fromtime(const ::std::string& value) {
  
  fromtime_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfConnectReq.fromTime)
}
 void BfConnectReq::set_fromtime(const char* value) {
  
  fromtime_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfConnectReq.fromTime)
}
 void BfConnectReq::set_fromtime(const char* value,
    size_t size) {
  
  fromtime_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfConnectReq.fromTime)
}
 ::std::string* BfConnectReq::mutable_fromtime() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfConnectReq.fromTime)
  return fromtime_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfConnectReq::release_fromtime() {
  
  return fromtime_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfConnectReq::unsafe_arena_release_fromtime() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return fromtime_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void BfConnectReq::set_allocated_fromtime(::std::string* fromtime) {
  if (fromtime != NULL) {
    
  } else {
    
  }
  fromtime_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fromtime,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfConnectReq.fromTime)
}
 void BfConnectReq::unsafe_arena_set_allocated_fromtime(
    ::std::string* fromtime) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (fromtime != NULL) {
    
  } else {
    
  }
  fromtime_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      fromtime, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfConnectReq.fromTime)
}

// optional string toDay = 5;
void BfConnectReq::clear_today() {
  today_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& BfConnectReq::today() const {
  // @@protoc_insertion_point(field_get:bftrader.BfConnectReq.toDay)
  return today_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfConnectReq::set_today(const ::std::string& value) {
  
  today_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfConnectReq.toDay)
}
 void BfConnectReq::set_today(const char* value) {
  
  today_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfConnectReq.toDay)
}
 void BfConnectReq::set_today(const char* value,
    size_t size) {
  
  today_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfConnectReq.toDay)
}
 ::std::string* BfConnectReq::mutable_today() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfConnectReq.toDay)
  return today_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfConnectReq::release_today() {
  
  return today_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfConnectReq::unsafe_arena_release_today() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return today_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void BfConnectReq::set_allocated_today(::std::string* today) {
  if (today != NULL) {
    
  } else {
    
  }
  today_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), today,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfConnectReq.toDay)
}
 void BfConnectReq::unsafe_arena_set_allocated_today(
    ::std::string* today) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (today != NULL) {
    
  } else {
    
  }
  today_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      today, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfConnectReq.toDay)
}

// optional string toTime = 6;
void BfConnectReq::clear_totime() {
  totime_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& BfConnectReq::totime() const {
  // @@protoc_insertion_point(field_get:bftrader.BfConnectReq.toTime)
  return totime_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfConnectReq::set_totime(const ::std::string& value) {
  
  totime_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfConnectReq.toTime)
}
 void BfConnectReq::set_totime(const char* value) {
  
  totime_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfConnectReq.toTime)
}
 void BfConnectReq::set_totime(const char* value,
    size_t size) {
  
  totime_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfConnectReq.toTime)
}
 ::std::string* BfConnectReq::mutable_totime() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfConnectReq.toTime)
  return totime_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfConnectReq::release_totime() {
  
  return totime_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfConnectReq::unsafe_arena_release_totime() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return totime_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void BfConnectReq::set_allocated_totime(::std::string* totime) {
  if (totime != NULL) {
    
  } else {
    
  }
  totime_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), totime,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfConnectReq.toTime)
}
 void BfConnectReq::unsafe_arena_set_allocated_totime(
    ::std::string* totime) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (totime != NULL) {
    
  } else {
    
  }
  totime_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      totime, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfConnectReq.toTime)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BfGetContractReq::kSymbolFieldNumber;
const int BfGetContractReq::kExchangeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BfGetContractReq::BfGetContractReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bftrader.BfGetContractReq)
}

BfGetContractReq::BfGetContractReq(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bftrader.BfGetContractReq)
}

void BfGetContractReq::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BfGetContractReq::BfGetContractReq(const BfGetContractReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bftrader.BfGetContractReq)
}

void BfGetContractReq::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

BfGetContractReq::~BfGetContractReq() {
  // @@protoc_insertion_point(destructor:bftrader.BfGetContractReq)
  SharedDtor();
}

void BfGetContractReq::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  symbol_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  exchange_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
  }
}

void BfGetContractReq::ArenaDtor(void* object) {
  BfGetContractReq* _this = reinterpret_cast< BfGetContractReq* >(object);
  (void)_this;
}
void BfGetContractReq::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void BfGetContractReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BfGetContractReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BfGetContractReq_descriptor_;
}

const BfGetContractReq& BfGetContractReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bftrader_2eproto();
  return *default_instance_;
}

BfGetContractReq* BfGetContractReq::default_instance_ = NULL;

BfGetContractReq* BfGetContractReq::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<BfGetContractReq>(arena);
}

void BfGetContractReq::Clear() {
  symbol_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  exchange_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}

bool BfGetContractReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bftrader.BfGetContractReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string symbol = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bftrader.BfGetContractReq.symbol"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_exchange;
        break;
      }

      // optional string exchange = 2;
      case 2: {
        if (tag == 18) {
         parse_exchange:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exchange().data(), this->exchange().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bftrader.BfGetContractReq.exchange"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bftrader.BfGetContractReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bftrader.BfGetContractReq)
  return false;
#undef DO_
}

void BfGetContractReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bftrader.BfGetContractReq)
  // optional string symbol = 1;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfGetContractReq.symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->symbol(), output);
  }

  // optional string exchange = 2;
  if (this->exchange().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfGetContractReq.exchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->exchange(), output);
  }

  // @@protoc_insertion_point(serialize_end:bftrader.BfGetContractReq)
}

::google::protobuf::uint8* BfGetContractReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bftrader.BfGetContractReq)
  // optional string symbol = 1;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfGetContractReq.symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->symbol(), target);
  }

  // optional string exchange = 2;
  if (this->exchange().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfGetContractReq.exchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->exchange(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:bftrader.BfGetContractReq)
  return target;
}

int BfGetContractReq::ByteSize() const {
  int total_size = 0;

  // optional string symbol = 1;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->symbol());
  }

  // optional string exchange = 2;
  if (this->exchange().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchange());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BfGetContractReq::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BfGetContractReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BfGetContractReq>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BfGetContractReq::MergeFrom(const BfGetContractReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.symbol().size() > 0) {
    set_symbol(from.symbol());
  }
  if (from.exchange().size() > 0) {
    set_exchange(from.exchange());
  }
}

void BfGetContractReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BfGetContractReq::CopyFrom(const BfGetContractReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BfGetContractReq::IsInitialized() const {

  return true;
}

void BfGetContractReq::Swap(BfGetContractReq* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    BfGetContractReq temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void BfGetContractReq::UnsafeArenaSwap(BfGetContractReq* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void BfGetContractReq::InternalSwap(BfGetContractReq* other) {
  symbol_.Swap(&other->symbol_);
  exchange_.Swap(&other->exchange_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BfGetContractReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BfGetContractReq_descriptor_;
  metadata.reflection = BfGetContractReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BfGetContractReq

// optional string symbol = 1;
void BfGetContractReq::clear_symbol() {
  symbol_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& BfGetContractReq::symbol() const {
  // @@protoc_insertion_point(field_get:bftrader.BfGetContractReq.symbol)
  return symbol_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfGetContractReq::set_symbol(const ::std::string& value) {
  
  symbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfGetContractReq.symbol)
}
 void BfGetContractReq::set_symbol(const char* value) {
  
  symbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfGetContractReq.symbol)
}
 void BfGetContractReq::set_symbol(const char* value,
    size_t size) {
  
  symbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfGetContractReq.symbol)
}
 ::std::string* BfGetContractReq::mutable_symbol() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfGetContractReq.symbol)
  return symbol_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfGetContractReq::release_symbol() {
  
  return symbol_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfGetContractReq::unsafe_arena_release_symbol() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return symbol_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void BfGetContractReq::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfGetContractReq.symbol)
}
 void BfGetContractReq::unsafe_arena_set_allocated_symbol(
    ::std::string* symbol) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      symbol, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfGetContractReq.symbol)
}

// optional string exchange = 2;
void BfGetContractReq::clear_exchange() {
  exchange_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& BfGetContractReq::exchange() const {
  // @@protoc_insertion_point(field_get:bftrader.BfGetContractReq.exchange)
  return exchange_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfGetContractReq::set_exchange(const ::std::string& value) {
  
  exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfGetContractReq.exchange)
}
 void BfGetContractReq::set_exchange(const char* value) {
  
  exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfGetContractReq.exchange)
}
 void BfGetContractReq::set_exchange(const char* value,
    size_t size) {
  
  exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfGetContractReq.exchange)
}
 ::std::string* BfGetContractReq::mutable_exchange() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfGetContractReq.exchange)
  return exchange_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfGetContractReq::release_exchange() {
  
  return exchange_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfGetContractReq::unsafe_arena_release_exchange() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return exchange_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void BfGetContractReq::set_allocated_exchange(::std::string* exchange) {
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfGetContractReq.exchange)
}
 void BfGetContractReq::unsafe_arena_set_allocated_exchange(
    ::std::string* exchange) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      exchange, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfGetContractReq.exchange)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BfGetTickPackReq::kSymbolFieldNumber;
const int BfGetTickPackReq::kExchangeFieldNumber;
const int BfGetTickPackReq::kToDateFieldNumber;
const int BfGetTickPackReq::kToTimeFieldNumber;
const int BfGetTickPackReq::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BfGetTickPackReq::BfGetTickPackReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bftrader.BfGetTickPackReq)
}

BfGetTickPackReq::BfGetTickPackReq(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bftrader.BfGetTickPackReq)
}

void BfGetTickPackReq::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BfGetTickPackReq::BfGetTickPackReq(const BfGetTickPackReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bftrader.BfGetTickPackReq)
}

void BfGetTickPackReq::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  todate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  totime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  count_ = 0;
}

BfGetTickPackReq::~BfGetTickPackReq() {
  // @@protoc_insertion_point(destructor:bftrader.BfGetTickPackReq)
  SharedDtor();
}

void BfGetTickPackReq::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  symbol_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  exchange_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  todate_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  totime_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
  }
}

void BfGetTickPackReq::ArenaDtor(void* object) {
  BfGetTickPackReq* _this = reinterpret_cast< BfGetTickPackReq* >(object);
  (void)_this;
}
void BfGetTickPackReq::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void BfGetTickPackReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BfGetTickPackReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BfGetTickPackReq_descriptor_;
}

const BfGetTickPackReq& BfGetTickPackReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bftrader_2eproto();
  return *default_instance_;
}

BfGetTickPackReq* BfGetTickPackReq::default_instance_ = NULL;

BfGetTickPackReq* BfGetTickPackReq::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<BfGetTickPackReq>(arena);
}

void BfGetTickPackReq::Clear() {
  symbol_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  exchange_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  todate_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  totime_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  count_ = 0;
}

bool BfGetTickPackReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bftrader.BfGetTickPackReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string symbol = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bftrader.BfGetTickPackReq.symbol"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_exchange;
        break;
      }

      // optional string exchange = 2;
      case 2: {
        if (tag == 18) {
         parse_exchange:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exchange().data(), this->exchange().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bftrader.BfGetTickPackReq.exchange"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_toDate;
        break;
      }

      // optional string toDate = 3;
      case 3: {
        if (tag == 26) {
         parse_toDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_todate()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->todate().data(), this->todate().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bftrader.BfGetTickPackReq.toDate"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_toTime;
        break;
      }

      // optional string toTime = 4;
      case 4: {
        if (tag == 34) {
         parse_toTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_totime()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->totime().data(), this->totime().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bftrader.BfGetTickPackReq.toTime"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_count;
        break;
      }

      // optional int32 count = 5;
      case 5: {
        if (tag == 40) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bftrader.BfGetTickPackReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bftrader.BfGetTickPackReq)
  return false;
#undef DO_
}

void BfGetTickPackReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bftrader.BfGetTickPackReq)
  // optional string symbol = 1;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfGetTickPackReq.symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->symbol(), output);
  }

  // optional string exchange = 2;
  if (this->exchange().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfGetTickPackReq.exchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->exchange(), output);
  }

  // optional string toDate = 3;
  if (this->todate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->todate().data(), this->todate().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfGetTickPackReq.toDate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->todate(), output);
  }

  // optional string toTime = 4;
  if (this->totime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->totime().data(), this->totime().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfGetTickPackReq.toTime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->totime(), output);
  }

  // optional int32 count = 5;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->count(), output);
  }

  // @@protoc_insertion_point(serialize_end:bftrader.BfGetTickPackReq)
}

::google::protobuf::uint8* BfGetTickPackReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bftrader.BfGetTickPackReq)
  // optional string symbol = 1;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfGetTickPackReq.symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->symbol(), target);
  }

  // optional string exchange = 2;
  if (this->exchange().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfGetTickPackReq.exchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->exchange(), target);
  }

  // optional string toDate = 3;
  if (this->todate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->todate().data(), this->todate().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfGetTickPackReq.toDate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->todate(), target);
  }

  // optional string toTime = 4;
  if (this->totime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->totime().data(), this->totime().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfGetTickPackReq.toTime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->totime(), target);
  }

  // optional int32 count = 5;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->count(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:bftrader.BfGetTickPackReq)
  return target;
}

int BfGetTickPackReq::ByteSize() const {
  int total_size = 0;

  // optional string symbol = 1;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->symbol());
  }

  // optional string exchange = 2;
  if (this->exchange().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchange());
  }

  // optional string toDate = 3;
  if (this->todate().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->todate());
  }

  // optional string toTime = 4;
  if (this->totime().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->totime());
  }

  // optional int32 count = 5;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BfGetTickPackReq::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BfGetTickPackReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BfGetTickPackReq>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BfGetTickPackReq::MergeFrom(const BfGetTickPackReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.symbol().size() > 0) {
    set_symbol(from.symbol());
  }
  if (from.exchange().size() > 0) {
    set_exchange(from.exchange());
  }
  if (from.todate().size() > 0) {
    set_todate(from.todate());
  }
  if (from.totime().size() > 0) {
    set_totime(from.totime());
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
}

void BfGetTickPackReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BfGetTickPackReq::CopyFrom(const BfGetTickPackReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BfGetTickPackReq::IsInitialized() const {

  return true;
}

void BfGetTickPackReq::Swap(BfGetTickPackReq* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    BfGetTickPackReq temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void BfGetTickPackReq::UnsafeArenaSwap(BfGetTickPackReq* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void BfGetTickPackReq::InternalSwap(BfGetTickPackReq* other) {
  symbol_.Swap(&other->symbol_);
  exchange_.Swap(&other->exchange_);
  todate_.Swap(&other->todate_);
  totime_.Swap(&other->totime_);
  std::swap(count_, other->count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BfGetTickPackReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BfGetTickPackReq_descriptor_;
  metadata.reflection = BfGetTickPackReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BfGetTickPackReq

// optional string symbol = 1;
void BfGetTickPackReq::clear_symbol() {
  symbol_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& BfGetTickPackReq::symbol() const {
  // @@protoc_insertion_point(field_get:bftrader.BfGetTickPackReq.symbol)
  return symbol_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfGetTickPackReq::set_symbol(const ::std::string& value) {
  
  symbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfGetTickPackReq.symbol)
}
 void BfGetTickPackReq::set_symbol(const char* value) {
  
  symbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfGetTickPackReq.symbol)
}
 void BfGetTickPackReq::set_symbol(const char* value,
    size_t size) {
  
  symbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfGetTickPackReq.symbol)
}
 ::std::string* BfGetTickPackReq::mutable_symbol() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfGetTickPackReq.symbol)
  return symbol_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfGetTickPackReq::release_symbol() {
  
  return symbol_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfGetTickPackReq::unsafe_arena_release_symbol() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return symbol_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void BfGetTickPackReq::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfGetTickPackReq.symbol)
}
 void BfGetTickPackReq::unsafe_arena_set_allocated_symbol(
    ::std::string* symbol) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      symbol, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfGetTickPackReq.symbol)
}

// optional string exchange = 2;
void BfGetTickPackReq::clear_exchange() {
  exchange_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& BfGetTickPackReq::exchange() const {
  // @@protoc_insertion_point(field_get:bftrader.BfGetTickPackReq.exchange)
  return exchange_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfGetTickPackReq::set_exchange(const ::std::string& value) {
  
  exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfGetTickPackReq.exchange)
}
 void BfGetTickPackReq::set_exchange(const char* value) {
  
  exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfGetTickPackReq.exchange)
}
 void BfGetTickPackReq::set_exchange(const char* value,
    size_t size) {
  
  exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfGetTickPackReq.exchange)
}
 ::std::string* BfGetTickPackReq::mutable_exchange() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfGetTickPackReq.exchange)
  return exchange_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfGetTickPackReq::release_exchange() {
  
  return exchange_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfGetTickPackReq::unsafe_arena_release_exchange() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return exchange_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void BfGetTickPackReq::set_allocated_exchange(::std::string* exchange) {
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfGetTickPackReq.exchange)
}
 void BfGetTickPackReq::unsafe_arena_set_allocated_exchange(
    ::std::string* exchange) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      exchange, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfGetTickPackReq.exchange)
}

// optional string toDate = 3;
void BfGetTickPackReq::clear_todate() {
  todate_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& BfGetTickPackReq::todate() const {
  // @@protoc_insertion_point(field_get:bftrader.BfGetTickPackReq.toDate)
  return todate_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfGetTickPackReq::set_todate(const ::std::string& value) {
  
  todate_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfGetTickPackReq.toDate)
}
 void BfGetTickPackReq::set_todate(const char* value) {
  
  todate_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfGetTickPackReq.toDate)
}
 void BfGetTickPackReq::set_todate(const char* value,
    size_t size) {
  
  todate_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfGetTickPackReq.toDate)
}
 ::std::string* BfGetTickPackReq::mutable_todate() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfGetTickPackReq.toDate)
  return todate_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfGetTickPackReq::release_todate() {
  
  return todate_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfGetTickPackReq::unsafe_arena_release_todate() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return todate_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void BfGetTickPackReq::set_allocated_todate(::std::string* todate) {
  if (todate != NULL) {
    
  } else {
    
  }
  todate_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), todate,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfGetTickPackReq.toDate)
}
 void BfGetTickPackReq::unsafe_arena_set_allocated_todate(
    ::std::string* todate) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (todate != NULL) {
    
  } else {
    
  }
  todate_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      todate, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfGetTickPackReq.toDate)
}

// optional string toTime = 4;
void BfGetTickPackReq::clear_totime() {
  totime_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& BfGetTickPackReq::totime() const {
  // @@protoc_insertion_point(field_get:bftrader.BfGetTickPackReq.toTime)
  return totime_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfGetTickPackReq::set_totime(const ::std::string& value) {
  
  totime_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfGetTickPackReq.toTime)
}
 void BfGetTickPackReq::set_totime(const char* value) {
  
  totime_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfGetTickPackReq.toTime)
}
 void BfGetTickPackReq::set_totime(const char* value,
    size_t size) {
  
  totime_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfGetTickPackReq.toTime)
}
 ::std::string* BfGetTickPackReq::mutable_totime() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfGetTickPackReq.toTime)
  return totime_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfGetTickPackReq::release_totime() {
  
  return totime_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfGetTickPackReq::unsafe_arena_release_totime() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return totime_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void BfGetTickPackReq::set_allocated_totime(::std::string* totime) {
  if (totime != NULL) {
    
  } else {
    
  }
  totime_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), totime,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfGetTickPackReq.toTime)
}
 void BfGetTickPackReq::unsafe_arena_set_allocated_totime(
    ::std::string* totime) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (totime != NULL) {
    
  } else {
    
  }
  totime_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      totime, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfGetTickPackReq.toTime)
}

// optional int32 count = 5;
void BfGetTickPackReq::clear_count() {
  count_ = 0;
}
 ::google::protobuf::int32 BfGetTickPackReq::count() const {
  // @@protoc_insertion_point(field_get:bftrader.BfGetTickPackReq.count)
  return count_;
}
 void BfGetTickPackReq::set_count(::google::protobuf::int32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfGetTickPackReq.count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BfGetBarReq::kSymbolFieldNumber;
const int BfGetBarReq::kExchangeFieldNumber;
const int BfGetBarReq::kPeriodFieldNumber;
const int BfGetBarReq::kToDateFieldNumber;
const int BfGetBarReq::kToTimeFieldNumber;
const int BfGetBarReq::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BfGetBarReq::BfGetBarReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bftrader.BfGetBarReq)
}

BfGetBarReq::BfGetBarReq(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:bftrader.BfGetBarReq)
}

void BfGetBarReq::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BfGetBarReq::BfGetBarReq(const BfGetBarReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bftrader.BfGetBarReq)
}

void BfGetBarReq::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  period_ = 0;
  todate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  totime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  count_ = 0;
}

BfGetBarReq::~BfGetBarReq() {
  // @@protoc_insertion_point(destructor:bftrader.BfGetBarReq)
  SharedDtor();
}

void BfGetBarReq::SharedDtor() {
  if (GetArenaNoVirtual() != NULL) {
    return;
  }

  symbol_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  exchange_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  todate_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  totime_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (this != default_instance_) {
  }
}

void BfGetBarReq::ArenaDtor(void* object) {
  BfGetBarReq* _this = reinterpret_cast< BfGetBarReq* >(object);
  (void)_this;
}
void BfGetBarReq::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void BfGetBarReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BfGetBarReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BfGetBarReq_descriptor_;
}

const BfGetBarReq& BfGetBarReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bftrader_2eproto();
  return *default_instance_;
}

BfGetBarReq* BfGetBarReq::default_instance_ = NULL;

BfGetBarReq* BfGetBarReq::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<BfGetBarReq>(arena);
}

void BfGetBarReq::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BfGetBarReq*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(period_, count_);
  symbol_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  exchange_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  todate_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  totime_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());

#undef ZR_HELPER_
#undef ZR_

}

bool BfGetBarReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bftrader.BfGetBarReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string symbol = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bftrader.BfGetBarReq.symbol"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_exchange;
        break;
      }

      // optional string exchange = 2;
      case 2: {
        if (tag == 18) {
         parse_exchange:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exchange().data(), this->exchange().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bftrader.BfGetBarReq.exchange"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_period;
        break;
      }

      // optional .bftrader.BfPeriod period = 3;
      case 3: {
        if (tag == 24) {
         parse_period:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_period(static_cast< ::bftrader::BfPeriod >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_toDate;
        break;
      }

      // optional string toDate = 4;
      case 4: {
        if (tag == 34) {
         parse_toDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_todate()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->todate().data(), this->todate().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bftrader.BfGetBarReq.toDate"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_toTime;
        break;
      }

      // optional string toTime = 5;
      case 5: {
        if (tag == 42) {
         parse_toTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_totime()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->totime().data(), this->totime().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bftrader.BfGetBarReq.toTime"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_count;
        break;
      }

      // optional int32 count = 6;
      case 6: {
        if (tag == 48) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bftrader.BfGetBarReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bftrader.BfGetBarReq)
  return false;
#undef DO_
}

void BfGetBarReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bftrader.BfGetBarReq)
  // optional string symbol = 1;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfGetBarReq.symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->symbol(), output);
  }

  // optional string exchange = 2;
  if (this->exchange().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfGetBarReq.exchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->exchange(), output);
  }

  // optional .bftrader.BfPeriod period = 3;
  if (this->period() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->period(), output);
  }

  // optional string toDate = 4;
  if (this->todate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->todate().data(), this->todate().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfGetBarReq.toDate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->todate(), output);
  }

  // optional string toTime = 5;
  if (this->totime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->totime().data(), this->totime().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfGetBarReq.toTime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->totime(), output);
  }

  // optional int32 count = 6;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->count(), output);
  }

  // @@protoc_insertion_point(serialize_end:bftrader.BfGetBarReq)
}

::google::protobuf::uint8* BfGetBarReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bftrader.BfGetBarReq)
  // optional string symbol = 1;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfGetBarReq.symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->symbol(), target);
  }

  // optional string exchange = 2;
  if (this->exchange().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfGetBarReq.exchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->exchange(), target);
  }

  // optional .bftrader.BfPeriod period = 3;
  if (this->period() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->period(), target);
  }

  // optional string toDate = 4;
  if (this->todate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->todate().data(), this->todate().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfGetBarReq.toDate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->todate(), target);
  }

  // optional string toTime = 5;
  if (this->totime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->totime().data(), this->totime().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bftrader.BfGetBarReq.toTime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->totime(), target);
  }

  // optional int32 count = 6;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->count(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:bftrader.BfGetBarReq)
  return target;
}

int BfGetBarReq::ByteSize() const {
  int total_size = 0;

  // optional string symbol = 1;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->symbol());
  }

  // optional string exchange = 2;
  if (this->exchange().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchange());
  }

  // optional .bftrader.BfPeriod period = 3;
  if (this->period() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->period());
  }

  // optional string toDate = 4;
  if (this->todate().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->todate());
  }

  // optional string toTime = 5;
  if (this->totime().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->totime());
  }

  // optional int32 count = 6;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BfGetBarReq::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BfGetBarReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BfGetBarReq>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BfGetBarReq::MergeFrom(const BfGetBarReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.symbol().size() > 0) {
    set_symbol(from.symbol());
  }
  if (from.exchange().size() > 0) {
    set_exchange(from.exchange());
  }
  if (from.period() != 0) {
    set_period(from.period());
  }
  if (from.todate().size() > 0) {
    set_todate(from.todate());
  }
  if (from.totime().size() > 0) {
    set_totime(from.totime());
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
}

void BfGetBarReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BfGetBarReq::CopyFrom(const BfGetBarReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BfGetBarReq::IsInitialized() const {

  return true;
}

void BfGetBarReq::Swap(BfGetBarReq* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    BfGetBarReq temp;
    temp.MergeFrom(*this);
    CopyFrom(*other);
    other->CopyFrom(temp);
  }
}
void BfGetBarReq::UnsafeArenaSwap(BfGetBarReq* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void BfGetBarReq::InternalSwap(BfGetBarReq* other) {
  symbol_.Swap(&other->symbol_);
  exchange_.Swap(&other->exchange_);
  std::swap(period_, other->period_);
  todate_.Swap(&other->todate_);
  totime_.Swap(&other->totime_);
  std::swap(count_, other->count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BfGetBarReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BfGetBarReq_descriptor_;
  metadata.reflection = BfGetBarReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BfGetBarReq

// optional string symbol = 1;
void BfGetBarReq::clear_symbol() {
  symbol_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& BfGetBarReq::symbol() const {
  // @@protoc_insertion_point(field_get:bftrader.BfGetBarReq.symbol)
  return symbol_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfGetBarReq::set_symbol(const ::std::string& value) {
  
  symbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfGetBarReq.symbol)
}
 void BfGetBarReq::set_symbol(const char* value) {
  
  symbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfGetBarReq.symbol)
}
 void BfGetBarReq::set_symbol(const char* value,
    size_t size) {
  
  symbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfGetBarReq.symbol)
}
 ::std::string* BfGetBarReq::mutable_symbol() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfGetBarReq.symbol)
  return symbol_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfGetBarReq::release_symbol() {
  
  return symbol_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfGetBarReq::unsafe_arena_release_symbol() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return symbol_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void BfGetBarReq::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfGetBarReq.symbol)
}
 void BfGetBarReq::unsafe_arena_set_allocated_symbol(
    ::std::string* symbol) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      symbol, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfGetBarReq.symbol)
}

// optional string exchange = 2;
void BfGetBarReq::clear_exchange() {
  exchange_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& BfGetBarReq::exchange() const {
  // @@protoc_insertion_point(field_get:bftrader.BfGetBarReq.exchange)
  return exchange_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfGetBarReq::set_exchange(const ::std::string& value) {
  
  exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfGetBarReq.exchange)
}
 void BfGetBarReq::set_exchange(const char* value) {
  
  exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfGetBarReq.exchange)
}
 void BfGetBarReq::set_exchange(const char* value,
    size_t size) {
  
  exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfGetBarReq.exchange)
}
 ::std::string* BfGetBarReq::mutable_exchange() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfGetBarReq.exchange)
  return exchange_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfGetBarReq::release_exchange() {
  
  return exchange_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfGetBarReq::unsafe_arena_release_exchange() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return exchange_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void BfGetBarReq::set_allocated_exchange(::std::string* exchange) {
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfGetBarReq.exchange)
}
 void BfGetBarReq::unsafe_arena_set_allocated_exchange(
    ::std::string* exchange) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      exchange, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfGetBarReq.exchange)
}

// optional .bftrader.BfPeriod period = 3;
void BfGetBarReq::clear_period() {
  period_ = 0;
}
 ::bftrader::BfPeriod BfGetBarReq::period() const {
  // @@protoc_insertion_point(field_get:bftrader.BfGetBarReq.period)
  return static_cast< ::bftrader::BfPeriod >(period_);
}
 void BfGetBarReq::set_period(::bftrader::BfPeriod value) {
  
  period_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfGetBarReq.period)
}

// optional string toDate = 4;
void BfGetBarReq::clear_todate() {
  todate_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& BfGetBarReq::todate() const {
  // @@protoc_insertion_point(field_get:bftrader.BfGetBarReq.toDate)
  return todate_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfGetBarReq::set_todate(const ::std::string& value) {
  
  todate_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfGetBarReq.toDate)
}
 void BfGetBarReq::set_todate(const char* value) {
  
  todate_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfGetBarReq.toDate)
}
 void BfGetBarReq::set_todate(const char* value,
    size_t size) {
  
  todate_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfGetBarReq.toDate)
}
 ::std::string* BfGetBarReq::mutable_todate() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfGetBarReq.toDate)
  return todate_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfGetBarReq::release_todate() {
  
  return todate_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfGetBarReq::unsafe_arena_release_todate() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return todate_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void BfGetBarReq::set_allocated_todate(::std::string* todate) {
  if (todate != NULL) {
    
  } else {
    
  }
  todate_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), todate,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfGetBarReq.toDate)
}
 void BfGetBarReq::unsafe_arena_set_allocated_todate(
    ::std::string* todate) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (todate != NULL) {
    
  } else {
    
  }
  todate_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      todate, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfGetBarReq.toDate)
}

// optional string toTime = 5;
void BfGetBarReq::clear_totime() {
  totime_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 const ::std::string& BfGetBarReq::totime() const {
  // @@protoc_insertion_point(field_get:bftrader.BfGetBarReq.toTime)
  return totime_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfGetBarReq::set_totime(const ::std::string& value) {
  
  totime_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfGetBarReq.toTime)
}
 void BfGetBarReq::set_totime(const char* value) {
  
  totime_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfGetBarReq.toTime)
}
 void BfGetBarReq::set_totime(const char* value,
    size_t size) {
  
  totime_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfGetBarReq.toTime)
}
 ::std::string* BfGetBarReq::mutable_totime() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfGetBarReq.toTime)
  return totime_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfGetBarReq::release_totime() {
  
  return totime_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
 ::std::string* BfGetBarReq::unsafe_arena_release_totime() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return totime_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
 void BfGetBarReq::set_allocated_totime(::std::string* totime) {
  if (totime != NULL) {
    
  } else {
    
  }
  totime_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), totime,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfGetBarReq.toTime)
}
 void BfGetBarReq::unsafe_arena_set_allocated_totime(
    ::std::string* totime) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (totime != NULL) {
    
  } else {
    
  }
  totime_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      totime, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfGetBarReq.toTime)
}

// optional int32 count = 6;
void BfGetBarReq::clear_count() {
  count_ = 0;
}
 ::google::protobuf::int32 BfGetBarReq::count() const {
  // @@protoc_insertion_point(field_get:bftrader.BfGetBarReq.count)
  return count_;
}
 void BfGetBarReq::set_count(::google::protobuf::int32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfGetBarReq.count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace bftrader

// @@protoc_insertion_point(global_scope)
