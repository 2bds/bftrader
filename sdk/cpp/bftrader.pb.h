// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bftrader.proto

#ifndef PROTOBUF_bftrader_2eproto__INCLUDED
#define PROTOBUF_bftrader_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace bftrader {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_bftrader_2eproto();
void protobuf_AssignDesc_bftrader_2eproto();
void protobuf_ShutdownFile_bftrader_2eproto();

class BfAccountData;
class BfBarData;
class BfBidAskInfo;
class BfCancelOrderReq;
class BfConnectReq;
class BfConnectResp;
class BfContractData;
class BfDailyInfo;
class BfErrorData;
class BfGetBarReq;
class BfGetContractReq;
class BfGetTickPackReq;
class BfKvData;
class BfLogData;
class BfOHLCInfo;
class BfOrderData;
class BfOrderReq;
class BfOrderResp;
class BfPositionData;
class BfSubscribeReq;
class BfTickData;
class BfTickPackData;
class BfTradeData;
class BfVoid;

enum BfDirection {
  DIRECTION_UNKNOWN = 0,
  DIRECTION_LONG = 1,
  DIRECTION_SHORT = 2,
  DIRECTION_NET = 3,
  BfDirection_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  BfDirection_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool BfDirection_IsValid(int value);
const BfDirection BfDirection_MIN = DIRECTION_UNKNOWN;
const BfDirection BfDirection_MAX = DIRECTION_NET;
const int BfDirection_ARRAYSIZE = BfDirection_MAX + 1;

const ::google::protobuf::EnumDescriptor* BfDirection_descriptor();
inline const ::std::string& BfDirection_Name(BfDirection value) {
  return ::google::protobuf::internal::NameOfEnum(
    BfDirection_descriptor(), value);
}
inline bool BfDirection_Parse(
    const ::std::string& name, BfDirection* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BfDirection>(
    BfDirection_descriptor(), name, value);
}
enum BfOffset {
  OFFSET_UNKNOWN = 0,
  OFFSET_OPEN = 1,
  OFFSET_CLOSE = 2,
  OFFSET_CLOSETODAY = 3,
  OFFSET_CLOSEYESTERDAY = 4,
  BfOffset_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  BfOffset_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool BfOffset_IsValid(int value);
const BfOffset BfOffset_MIN = OFFSET_UNKNOWN;
const BfOffset BfOffset_MAX = OFFSET_CLOSEYESTERDAY;
const int BfOffset_ARRAYSIZE = BfOffset_MAX + 1;

const ::google::protobuf::EnumDescriptor* BfOffset_descriptor();
inline const ::std::string& BfOffset_Name(BfOffset value) {
  return ::google::protobuf::internal::NameOfEnum(
    BfOffset_descriptor(), value);
}
inline bool BfOffset_Parse(
    const ::std::string& name, BfOffset* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BfOffset>(
    BfOffset_descriptor(), name, value);
}
enum BfStatus {
  STATUS_UNKNOWN = 0,
  STATUS_NOTTRADED = 1,
  STATUS_PARTTRADED = 2,
  STATUS_ALLTRADED = 3,
  STATUS_CANCELLED = 4,
  BfStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  BfStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool BfStatus_IsValid(int value);
const BfStatus BfStatus_MIN = STATUS_UNKNOWN;
const BfStatus BfStatus_MAX = STATUS_CANCELLED;
const int BfStatus_ARRAYSIZE = BfStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* BfStatus_descriptor();
inline const ::std::string& BfStatus_Name(BfStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    BfStatus_descriptor(), value);
}
inline bool BfStatus_Parse(
    const ::std::string& name, BfStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BfStatus>(
    BfStatus_descriptor(), name, value);
}
enum BfProduct {
  PRODUCT_UNKNOWN = 0,
  PRODUCT_EQUITY = 1,
  PRODUCT_FUTURES = 2,
  BfProduct_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  BfProduct_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool BfProduct_IsValid(int value);
const BfProduct BfProduct_MIN = PRODUCT_UNKNOWN;
const BfProduct BfProduct_MAX = PRODUCT_FUTURES;
const int BfProduct_ARRAYSIZE = BfProduct_MAX + 1;

const ::google::protobuf::EnumDescriptor* BfProduct_descriptor();
inline const ::std::string& BfProduct_Name(BfProduct value) {
  return ::google::protobuf::internal::NameOfEnum(
    BfProduct_descriptor(), value);
}
inline bool BfProduct_Parse(
    const ::std::string& name, BfProduct* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BfProduct>(
    BfProduct_descriptor(), name, value);
}
enum BfPriceType {
  PRICETYPE_UNKONWN = 0,
  PRICETYPE_LIMITPRICE = 1,
  PRICETYPE_MARKETPRICE = 2,
  BfPriceType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  BfPriceType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool BfPriceType_IsValid(int value);
const BfPriceType BfPriceType_MIN = PRICETYPE_UNKONWN;
const BfPriceType BfPriceType_MAX = PRICETYPE_MARKETPRICE;
const int BfPriceType_ARRAYSIZE = BfPriceType_MAX + 1;

const ::google::protobuf::EnumDescriptor* BfPriceType_descriptor();
inline const ::std::string& BfPriceType_Name(BfPriceType value) {
  return ::google::protobuf::internal::NameOfEnum(
    BfPriceType_descriptor(), value);
}
inline bool BfPriceType_Parse(
    const ::std::string& name, BfPriceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BfPriceType>(
    BfPriceType_descriptor(), name, value);
}
enum BfExchange {
  EXCHANGE_UNKNOWN = 0,
  EXCHANGE_SSE = 1,
  EXCHANGE_SZSE = 2,
  EXCHANGE_CFFEX = 3,
  EXCHANGE_SHFE = 4,
  EXCHANGE_CZCE = 5,
  EXCHANGE_DCE = 6,
  EXCHANGE_SGE = 7,
  BfExchange_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  BfExchange_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool BfExchange_IsValid(int value);
const BfExchange BfExchange_MIN = EXCHANGE_UNKNOWN;
const BfExchange BfExchange_MAX = EXCHANGE_SGE;
const int BfExchange_ARRAYSIZE = BfExchange_MAX + 1;

const ::google::protobuf::EnumDescriptor* BfExchange_descriptor();
inline const ::std::string& BfExchange_Name(BfExchange value) {
  return ::google::protobuf::internal::NameOfEnum(
    BfExchange_descriptor(), value);
}
inline bool BfExchange_Parse(
    const ::std::string& name, BfExchange* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BfExchange>(
    BfExchange_descriptor(), name, value);
}
enum BfPeriod {
  PERIOD_UNKNOWN = 0,
  PERIOD_M1 = 1,
  PERIOD_D1 = 2,
  BfPeriod_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  BfPeriod_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool BfPeriod_IsValid(int value);
const BfPeriod BfPeriod_MIN = PERIOD_UNKNOWN;
const BfPeriod BfPeriod_MAX = PERIOD_D1;
const int BfPeriod_ARRAYSIZE = BfPeriod_MAX + 1;

const ::google::protobuf::EnumDescriptor* BfPeriod_descriptor();
inline const ::std::string& BfPeriod_Name(BfPeriod value) {
  return ::google::protobuf::internal::NameOfEnum(
    BfPeriod_descriptor(), value);
}
inline bool BfPeriod_Parse(
    const ::std::string& name, BfPeriod* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BfPeriod>(
    BfPeriod_descriptor(), name, value);
}
// ===================================================================

class BfVoid : public ::google::protobuf::Message {
 public:
  BfVoid();
  virtual ~BfVoid();

  BfVoid(const BfVoid& from);

  inline BfVoid& operator=(const BfVoid& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const BfVoid& default_instance();

  void UnsafeArenaSwap(BfVoid* other);
  void Swap(BfVoid* other);

  // implements Message ----------------------------------------------

  inline BfVoid* New() const { return New(NULL); }

  BfVoid* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BfVoid& from);
  void MergeFrom(const BfVoid& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BfVoid* other);
  protected:
  explicit BfVoid(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bftrader.BfVoid)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bftrader_2eproto();
  friend void protobuf_AssignDesc_bftrader_2eproto();
  friend void protobuf_ShutdownFile_bftrader_2eproto();

  void InitAsDefaultInstance();
  static BfVoid* default_instance_;
};
// -------------------------------------------------------------------

class BfDailyInfo : public ::google::protobuf::Message {
 public:
  BfDailyInfo();
  virtual ~BfDailyInfo();

  BfDailyInfo(const BfDailyInfo& from);

  inline BfDailyInfo& operator=(const BfDailyInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const BfDailyInfo& default_instance();

  void UnsafeArenaSwap(BfDailyInfo* other);
  void Swap(BfDailyInfo* other);

  // implements Message ----------------------------------------------

  inline BfDailyInfo* New() const { return New(NULL); }

  BfDailyInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BfDailyInfo& from);
  void MergeFrom(const BfDailyInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BfDailyInfo* other);
  protected:
  explicit BfDailyInfo(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double openPrice = 1;
  void clear_openprice();
  static const int kOpenPriceFieldNumber = 1;
  double openprice() const;
  void set_openprice(double value);

  // optional double highPrice = 2;
  void clear_highprice();
  static const int kHighPriceFieldNumber = 2;
  double highprice() const;
  void set_highprice(double value);

  // optional double lowPrice = 3;
  void clear_lowprice();
  static const int kLowPriceFieldNumber = 3;
  double lowprice() const;
  void set_lowprice(double value);

  // optional double preClosePrice = 4;
  void clear_precloseprice();
  static const int kPreClosePriceFieldNumber = 4;
  double precloseprice() const;
  void set_precloseprice(double value);

  // optional double upperLimit = 5;
  void clear_upperlimit();
  static const int kUpperLimitFieldNumber = 5;
  double upperlimit() const;
  void set_upperlimit(double value);

  // optional double lowerLimit = 6;
  void clear_lowerlimit();
  static const int kLowerLimitFieldNumber = 6;
  double lowerlimit() const;
  void set_lowerlimit(double value);

  // @@protoc_insertion_point(class_scope:bftrader.BfDailyInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  double openprice_;
  double highprice_;
  double lowprice_;
  double precloseprice_;
  double upperlimit_;
  double lowerlimit_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bftrader_2eproto();
  friend void protobuf_AssignDesc_bftrader_2eproto();
  friend void protobuf_ShutdownFile_bftrader_2eproto();

  void InitAsDefaultInstance();
  static BfDailyInfo* default_instance_;
};
// -------------------------------------------------------------------

class BfBidAskInfo : public ::google::protobuf::Message {
 public:
  BfBidAskInfo();
  virtual ~BfBidAskInfo();

  BfBidAskInfo(const BfBidAskInfo& from);

  inline BfBidAskInfo& operator=(const BfBidAskInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const BfBidAskInfo& default_instance();

  void UnsafeArenaSwap(BfBidAskInfo* other);
  void Swap(BfBidAskInfo* other);

  // implements Message ----------------------------------------------

  inline BfBidAskInfo* New() const { return New(NULL); }

  BfBidAskInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BfBidAskInfo& from);
  void MergeFrom(const BfBidAskInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BfBidAskInfo* other);
  protected:
  explicit BfBidAskInfo(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double bidPrice = 1;
  void clear_bidprice();
  static const int kBidPriceFieldNumber = 1;
  double bidprice() const;
  void set_bidprice(double value);

  // optional double askPrice = 2;
  void clear_askprice();
  static const int kAskPriceFieldNumber = 2;
  double askprice() const;
  void set_askprice(double value);

  // optional int32 bidVolume = 3;
  void clear_bidvolume();
  static const int kBidVolumeFieldNumber = 3;
  ::google::protobuf::int32 bidvolume() const;
  void set_bidvolume(::google::protobuf::int32 value);

  // optional int32 askVolume = 4;
  void clear_askvolume();
  static const int kAskVolumeFieldNumber = 4;
  ::google::protobuf::int32 askvolume() const;
  void set_askvolume(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bftrader.BfBidAskInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  double bidprice_;
  double askprice_;
  ::google::protobuf::int32 bidvolume_;
  ::google::protobuf::int32 askvolume_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bftrader_2eproto();
  friend void protobuf_AssignDesc_bftrader_2eproto();
  friend void protobuf_ShutdownFile_bftrader_2eproto();

  void InitAsDefaultInstance();
  static BfBidAskInfo* default_instance_;
};
// -------------------------------------------------------------------

class BfOHLCInfo : public ::google::protobuf::Message {
 public:
  BfOHLCInfo();
  virtual ~BfOHLCInfo();

  BfOHLCInfo(const BfOHLCInfo& from);

  inline BfOHLCInfo& operator=(const BfOHLCInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const BfOHLCInfo& default_instance();

  void UnsafeArenaSwap(BfOHLCInfo* other);
  void Swap(BfOHLCInfo* other);

  // implements Message ----------------------------------------------

  inline BfOHLCInfo* New() const { return New(NULL); }

  BfOHLCInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BfOHLCInfo& from);
  void MergeFrom(const BfOHLCInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BfOHLCInfo* other);
  protected:
  explicit BfOHLCInfo(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double openPrice = 1;
  void clear_openprice();
  static const int kOpenPriceFieldNumber = 1;
  double openprice() const;
  void set_openprice(double value);

  // optional double highPrice = 2;
  void clear_highprice();
  static const int kHighPriceFieldNumber = 2;
  double highprice() const;
  void set_highprice(double value);

  // optional double lowPrice = 3;
  void clear_lowprice();
  static const int kLowPriceFieldNumber = 3;
  double lowprice() const;
  void set_lowprice(double value);

  // optional double closePrice = 4;
  void clear_closeprice();
  static const int kClosePriceFieldNumber = 4;
  double closeprice() const;
  void set_closeprice(double value);

  // @@protoc_insertion_point(class_scope:bftrader.BfOHLCInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  double openprice_;
  double highprice_;
  double lowprice_;
  double closeprice_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bftrader_2eproto();
  friend void protobuf_AssignDesc_bftrader_2eproto();
  friend void protobuf_ShutdownFile_bftrader_2eproto();

  void InitAsDefaultInstance();
  static BfOHLCInfo* default_instance_;
};
// -------------------------------------------------------------------

class BfTickData : public ::google::protobuf::Message {
 public:
  BfTickData();
  virtual ~BfTickData();

  BfTickData(const BfTickData& from);

  inline BfTickData& operator=(const BfTickData& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const BfTickData& default_instance();

  void UnsafeArenaSwap(BfTickData* other);
  void Swap(BfTickData* other);

  // implements Message ----------------------------------------------

  inline BfTickData* New() const { return New(NULL); }

  BfTickData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BfTickData& from);
  void MergeFrom(const BfTickData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BfTickData* other);
  protected:
  explicit BfTickData(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string symbol = 1;
  void clear_symbol();
  static const int kSymbolFieldNumber = 1;
  const ::std::string& symbol() const;
  void set_symbol(const ::std::string& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  ::std::string* mutable_symbol();
  ::std::string* release_symbol();
  void set_allocated_symbol(::std::string* symbol);
  ::std::string* unsafe_arena_release_symbol();
  void unsafe_arena_set_allocated_symbol(
      ::std::string* symbol);

  // optional string exchange = 2;
  void clear_exchange();
  static const int kExchangeFieldNumber = 2;
  const ::std::string& exchange() const;
  void set_exchange(const ::std::string& value);
  void set_exchange(const char* value);
  void set_exchange(const char* value, size_t size);
  ::std::string* mutable_exchange();
  ::std::string* release_exchange();
  void set_allocated_exchange(::std::string* exchange);
  ::std::string* unsafe_arena_release_exchange();
  void unsafe_arena_set_allocated_exchange(
      ::std::string* exchange);

  // optional string date = 3;
  void clear_date();
  static const int kDateFieldNumber = 3;
  const ::std::string& date() const;
  void set_date(const ::std::string& value);
  void set_date(const char* value);
  void set_date(const char* value, size_t size);
  ::std::string* mutable_date();
  ::std::string* release_date();
  void set_allocated_date(::std::string* date);
  ::std::string* unsafe_arena_release_date();
  void unsafe_arena_set_allocated_date(
      ::std::string* date);

  // optional string time = 4;
  void clear_time();
  static const int kTimeFieldNumber = 4;
  const ::std::string& time() const;
  void set_time(const ::std::string& value);
  void set_time(const char* value);
  void set_time(const char* value, size_t size);
  ::std::string* mutable_time();
  ::std::string* release_time();
  void set_allocated_time(::std::string* time);
  ::std::string* unsafe_arena_release_time();
  void unsafe_arena_set_allocated_time(
      ::std::string* time);

  // optional double lastPrice = 5;
  void clear_lastprice();
  static const int kLastPriceFieldNumber = 5;
  double lastprice() const;
  void set_lastprice(double value);

  // optional int32 volume = 6;
  void clear_volume();
  static const int kVolumeFieldNumber = 6;
  ::google::protobuf::int32 volume() const;
  void set_volume(::google::protobuf::int32 value);

  // optional double openInterest = 7;
  void clear_openinterest();
  static const int kOpenInterestFieldNumber = 7;
  double openinterest() const;
  void set_openinterest(double value);

  // optional int32 lastVolume = 8;
  void clear_lastvolume();
  static const int kLastVolumeFieldNumber = 8;
  ::google::protobuf::int32 lastvolume() const;
  void set_lastvolume(::google::protobuf::int32 value);

  // repeated .bftrader.BfBidAskInfo bidaskInfo = 9;
  int bidaskinfo_size() const;
  void clear_bidaskinfo();
  static const int kBidaskInfoFieldNumber = 9;
  const ::bftrader::BfBidAskInfo& bidaskinfo(int index) const;
  ::bftrader::BfBidAskInfo* mutable_bidaskinfo(int index);
  ::bftrader::BfBidAskInfo* add_bidaskinfo();
  ::google::protobuf::RepeatedPtrField< ::bftrader::BfBidAskInfo >*
      mutable_bidaskinfo();
  const ::google::protobuf::RepeatedPtrField< ::bftrader::BfBidAskInfo >&
      bidaskinfo() const;

  // optional .bftrader.BfDailyInfo dailyInfo = 10;
  bool has_dailyinfo() const;
  void clear_dailyinfo();
  static const int kDailyInfoFieldNumber = 10;
  private:
  void _slow_mutable_dailyinfo();
  void _slow_set_allocated_dailyinfo(
      ::google::protobuf::Arena* message_arena, ::bftrader::BfDailyInfo** dailyinfo);
  ::bftrader::BfDailyInfo* _slow_release_dailyinfo();
  public:
  const ::bftrader::BfDailyInfo& dailyinfo() const;
  ::bftrader::BfDailyInfo* mutable_dailyinfo();
  ::bftrader::BfDailyInfo* release_dailyinfo();
  void set_allocated_dailyinfo(::bftrader::BfDailyInfo* dailyinfo);
  ::bftrader::BfDailyInfo* unsafe_arena_release_dailyinfo();
  void unsafe_arena_set_allocated_dailyinfo(
      ::bftrader::BfDailyInfo* dailyinfo);

  // @@protoc_insertion_point(class_scope:bftrader.BfTickData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr symbol_;
  ::google::protobuf::internal::ArenaStringPtr exchange_;
  ::google::protobuf::internal::ArenaStringPtr date_;
  ::google::protobuf::internal::ArenaStringPtr time_;
  double lastprice_;
  double openinterest_;
  ::google::protobuf::int32 volume_;
  ::google::protobuf::int32 lastvolume_;
  ::google::protobuf::RepeatedPtrField< ::bftrader::BfBidAskInfo > bidaskinfo_;
  ::bftrader::BfDailyInfo* dailyinfo_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bftrader_2eproto();
  friend void protobuf_AssignDesc_bftrader_2eproto();
  friend void protobuf_ShutdownFile_bftrader_2eproto();

  void InitAsDefaultInstance();
  static BfTickData* default_instance_;
};
// -------------------------------------------------------------------

class BfTickPackData : public ::google::protobuf::Message {
 public:
  BfTickPackData();
  virtual ~BfTickPackData();

  BfTickPackData(const BfTickPackData& from);

  inline BfTickPackData& operator=(const BfTickPackData& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const BfTickPackData& default_instance();

  void UnsafeArenaSwap(BfTickPackData* other);
  void Swap(BfTickPackData* other);

  // implements Message ----------------------------------------------

  inline BfTickPackData* New() const { return New(NULL); }

  BfTickPackData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BfTickPackData& from);
  void MergeFrom(const BfTickPackData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BfTickPackData* other);
  protected:
  explicit BfTickPackData(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string symbol = 1;
  void clear_symbol();
  static const int kSymbolFieldNumber = 1;
  const ::std::string& symbol() const;
  void set_symbol(const ::std::string& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  ::std::string* mutable_symbol();
  ::std::string* release_symbol();
  void set_allocated_symbol(::std::string* symbol);
  ::std::string* unsafe_arena_release_symbol();
  void unsafe_arena_set_allocated_symbol(
      ::std::string* symbol);

  // optional string exchange = 2;
  void clear_exchange();
  static const int kExchangeFieldNumber = 2;
  const ::std::string& exchange() const;
  void set_exchange(const ::std::string& value);
  void set_exchange(const char* value);
  void set_exchange(const char* value, size_t size);
  ::std::string* mutable_exchange();
  ::std::string* release_exchange();
  void set_allocated_exchange(::std::string* exchange);
  ::std::string* unsafe_arena_release_exchange();
  void unsafe_arena_set_allocated_exchange(
      ::std::string* exchange);

  // optional string date = 3;
  void clear_date();
  static const int kDateFieldNumber = 3;
  const ::std::string& date() const;
  void set_date(const ::std::string& value);
  void set_date(const char* value);
  void set_date(const char* value, size_t size);
  ::std::string* mutable_date();
  ::std::string* release_date();
  void set_allocated_date(::std::string* date);
  ::std::string* unsafe_arena_release_date();
  void unsafe_arena_set_allocated_date(
      ::std::string* date);

  // optional string time = 4;
  void clear_time();
  static const int kTimeFieldNumber = 4;
  const ::std::string& time() const;
  void set_time(const ::std::string& value);
  void set_time(const char* value);
  void set_time(const char* value, size_t size);
  ::std::string* mutable_time();
  ::std::string* release_time();
  void set_allocated_time(::std::string* time);
  ::std::string* unsafe_arena_release_time();
  void unsafe_arena_set_allocated_time(
      ::std::string* time);

  // repeated .bftrader.BfTickData ticks = 5;
  int ticks_size() const;
  void clear_ticks();
  static const int kTicksFieldNumber = 5;
  const ::bftrader::BfTickData& ticks(int index) const;
  ::bftrader::BfTickData* mutable_ticks(int index);
  ::bftrader::BfTickData* add_ticks();
  ::google::protobuf::RepeatedPtrField< ::bftrader::BfTickData >*
      mutable_ticks();
  const ::google::protobuf::RepeatedPtrField< ::bftrader::BfTickData >&
      ticks() const;

  // @@protoc_insertion_point(class_scope:bftrader.BfTickPackData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr symbol_;
  ::google::protobuf::internal::ArenaStringPtr exchange_;
  ::google::protobuf::internal::ArenaStringPtr date_;
  ::google::protobuf::internal::ArenaStringPtr time_;
  ::google::protobuf::RepeatedPtrField< ::bftrader::BfTickData > ticks_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bftrader_2eproto();
  friend void protobuf_AssignDesc_bftrader_2eproto();
  friend void protobuf_ShutdownFile_bftrader_2eproto();

  void InitAsDefaultInstance();
  static BfTickPackData* default_instance_;
};
// -------------------------------------------------------------------

class BfBarData : public ::google::protobuf::Message {
 public:
  BfBarData();
  virtual ~BfBarData();

  BfBarData(const BfBarData& from);

  inline BfBarData& operator=(const BfBarData& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const BfBarData& default_instance();

  void UnsafeArenaSwap(BfBarData* other);
  void Swap(BfBarData* other);

  // implements Message ----------------------------------------------

  inline BfBarData* New() const { return New(NULL); }

  BfBarData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BfBarData& from);
  void MergeFrom(const BfBarData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BfBarData* other);
  protected:
  explicit BfBarData(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string symbol = 1;
  void clear_symbol();
  static const int kSymbolFieldNumber = 1;
  const ::std::string& symbol() const;
  void set_symbol(const ::std::string& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  ::std::string* mutable_symbol();
  ::std::string* release_symbol();
  void set_allocated_symbol(::std::string* symbol);
  ::std::string* unsafe_arena_release_symbol();
  void unsafe_arena_set_allocated_symbol(
      ::std::string* symbol);

  // optional string exchange = 2;
  void clear_exchange();
  static const int kExchangeFieldNumber = 2;
  const ::std::string& exchange() const;
  void set_exchange(const ::std::string& value);
  void set_exchange(const char* value);
  void set_exchange(const char* value, size_t size);
  ::std::string* mutable_exchange();
  ::std::string* release_exchange();
  void set_allocated_exchange(::std::string* exchange);
  ::std::string* unsafe_arena_release_exchange();
  void unsafe_arena_set_allocated_exchange(
      ::std::string* exchange);

  // optional .bftrader.BfPeriod period = 3;
  void clear_period();
  static const int kPeriodFieldNumber = 3;
  ::bftrader::BfPeriod period() const;
  void set_period(::bftrader::BfPeriod value);

  // optional string date = 4;
  void clear_date();
  static const int kDateFieldNumber = 4;
  const ::std::string& date() const;
  void set_date(const ::std::string& value);
  void set_date(const char* value);
  void set_date(const char* value, size_t size);
  ::std::string* mutable_date();
  ::std::string* release_date();
  void set_allocated_date(::std::string* date);
  ::std::string* unsafe_arena_release_date();
  void unsafe_arena_set_allocated_date(
      ::std::string* date);

  // optional string time = 5;
  void clear_time();
  static const int kTimeFieldNumber = 5;
  const ::std::string& time() const;
  void set_time(const ::std::string& value);
  void set_time(const char* value);
  void set_time(const char* value, size_t size);
  ::std::string* mutable_time();
  ::std::string* release_time();
  void set_allocated_time(::std::string* time);
  ::std::string* unsafe_arena_release_time();
  void unsafe_arena_set_allocated_time(
      ::std::string* time);

  // optional int32 volume = 6;
  void clear_volume();
  static const int kVolumeFieldNumber = 6;
  ::google::protobuf::int32 volume() const;
  void set_volume(::google::protobuf::int32 value);

  // optional double openInterest = 7;
  void clear_openinterest();
  static const int kOpenInterestFieldNumber = 7;
  double openinterest() const;
  void set_openinterest(double value);

  // optional int32 lastVolume = 8;
  void clear_lastvolume();
  static const int kLastVolumeFieldNumber = 8;
  ::google::protobuf::int32 lastvolume() const;
  void set_lastvolume(::google::protobuf::int32 value);

  // optional .bftrader.BfOHLCInfo ohlcInfo = 9;
  bool has_ohlcinfo() const;
  void clear_ohlcinfo();
  static const int kOhlcInfoFieldNumber = 9;
  private:
  void _slow_mutable_ohlcinfo();
  void _slow_set_allocated_ohlcinfo(
      ::google::protobuf::Arena* message_arena, ::bftrader::BfOHLCInfo** ohlcinfo);
  ::bftrader::BfOHLCInfo* _slow_release_ohlcinfo();
  public:
  const ::bftrader::BfOHLCInfo& ohlcinfo() const;
  ::bftrader::BfOHLCInfo* mutable_ohlcinfo();
  ::bftrader::BfOHLCInfo* release_ohlcinfo();
  void set_allocated_ohlcinfo(::bftrader::BfOHLCInfo* ohlcinfo);
  ::bftrader::BfOHLCInfo* unsafe_arena_release_ohlcinfo();
  void unsafe_arena_set_allocated_ohlcinfo(
      ::bftrader::BfOHLCInfo* ohlcinfo);

  // optional .bftrader.BfDailyInfo dailyInfo = 10;
  bool has_dailyinfo() const;
  void clear_dailyinfo();
  static const int kDailyInfoFieldNumber = 10;
  private:
  void _slow_mutable_dailyinfo();
  void _slow_set_allocated_dailyinfo(
      ::google::protobuf::Arena* message_arena, ::bftrader::BfDailyInfo** dailyinfo);
  ::bftrader::BfDailyInfo* _slow_release_dailyinfo();
  public:
  const ::bftrader::BfDailyInfo& dailyinfo() const;
  ::bftrader::BfDailyInfo* mutable_dailyinfo();
  ::bftrader::BfDailyInfo* release_dailyinfo();
  void set_allocated_dailyinfo(::bftrader::BfDailyInfo* dailyinfo);
  ::bftrader::BfDailyInfo* unsafe_arena_release_dailyinfo();
  void unsafe_arena_set_allocated_dailyinfo(
      ::bftrader::BfDailyInfo* dailyinfo);

  // @@protoc_insertion_point(class_scope:bftrader.BfBarData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr symbol_;
  ::google::protobuf::internal::ArenaStringPtr exchange_;
  ::google::protobuf::internal::ArenaStringPtr date_;
  int period_;
  ::google::protobuf::int32 volume_;
  ::google::protobuf::internal::ArenaStringPtr time_;
  double openinterest_;
  ::bftrader::BfOHLCInfo* ohlcinfo_;
  ::bftrader::BfDailyInfo* dailyinfo_;
  ::google::protobuf::int32 lastvolume_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bftrader_2eproto();
  friend void protobuf_AssignDesc_bftrader_2eproto();
  friend void protobuf_ShutdownFile_bftrader_2eproto();

  void InitAsDefaultInstance();
  static BfBarData* default_instance_;
};
// -------------------------------------------------------------------

class BfTradeData : public ::google::protobuf::Message {
 public:
  BfTradeData();
  virtual ~BfTradeData();

  BfTradeData(const BfTradeData& from);

  inline BfTradeData& operator=(const BfTradeData& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const BfTradeData& default_instance();

  void UnsafeArenaSwap(BfTradeData* other);
  void Swap(BfTradeData* other);

  // implements Message ----------------------------------------------

  inline BfTradeData* New() const { return New(NULL); }

  BfTradeData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BfTradeData& from);
  void MergeFrom(const BfTradeData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BfTradeData* other);
  protected:
  explicit BfTradeData(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string symbol = 1;
  void clear_symbol();
  static const int kSymbolFieldNumber = 1;
  const ::std::string& symbol() const;
  void set_symbol(const ::std::string& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  ::std::string* mutable_symbol();
  ::std::string* release_symbol();
  void set_allocated_symbol(::std::string* symbol);
  ::std::string* unsafe_arena_release_symbol();
  void unsafe_arena_set_allocated_symbol(
      ::std::string* symbol);

  // optional string exchange = 2;
  void clear_exchange();
  static const int kExchangeFieldNumber = 2;
  const ::std::string& exchange() const;
  void set_exchange(const ::std::string& value);
  void set_exchange(const char* value);
  void set_exchange(const char* value, size_t size);
  ::std::string* mutable_exchange();
  ::std::string* release_exchange();
  void set_allocated_exchange(::std::string* exchange);
  ::std::string* unsafe_arena_release_exchange();
  void unsafe_arena_set_allocated_exchange(
      ::std::string* exchange);

  // optional int32 tradeId = 3;
  void clear_tradeid();
  static const int kTradeIdFieldNumber = 3;
  ::google::protobuf::int32 tradeid() const;
  void set_tradeid(::google::protobuf::int32 value);

  // optional int32 orderId = 4;
  void clear_orderid();
  static const int kOrderIdFieldNumber = 4;
  ::google::protobuf::int32 orderid() const;
  void set_orderid(::google::protobuf::int32 value);

  // optional .bftrader.BfDirection direction = 5;
  void clear_direction();
  static const int kDirectionFieldNumber = 5;
  ::bftrader::BfDirection direction() const;
  void set_direction(::bftrader::BfDirection value);

  // optional .bftrader.BfOffset offset = 6;
  void clear_offset();
  static const int kOffsetFieldNumber = 6;
  ::bftrader::BfOffset offset() const;
  void set_offset(::bftrader::BfOffset value);

  // optional double price = 7;
  void clear_price();
  static const int kPriceFieldNumber = 7;
  double price() const;
  void set_price(double value);

  // optional int32 volume = 8;
  void clear_volume();
  static const int kVolumeFieldNumber = 8;
  ::google::protobuf::int32 volume() const;
  void set_volume(::google::protobuf::int32 value);

  // optional string tradeDate = 9;
  void clear_tradedate();
  static const int kTradeDateFieldNumber = 9;
  const ::std::string& tradedate() const;
  void set_tradedate(const ::std::string& value);
  void set_tradedate(const char* value);
  void set_tradedate(const char* value, size_t size);
  ::std::string* mutable_tradedate();
  ::std::string* release_tradedate();
  void set_allocated_tradedate(::std::string* tradedate);
  ::std::string* unsafe_arena_release_tradedate();
  void unsafe_arena_set_allocated_tradedate(
      ::std::string* tradedate);

  // optional string tradeTime = 10;
  void clear_tradetime();
  static const int kTradeTimeFieldNumber = 10;
  const ::std::string& tradetime() const;
  void set_tradetime(const ::std::string& value);
  void set_tradetime(const char* value);
  void set_tradetime(const char* value, size_t size);
  ::std::string* mutable_tradetime();
  ::std::string* release_tradetime();
  void set_allocated_tradetime(::std::string* tradetime);
  ::std::string* unsafe_arena_release_tradetime();
  void unsafe_arena_set_allocated_tradetime(
      ::std::string* tradetime);

  // @@protoc_insertion_point(class_scope:bftrader.BfTradeData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr symbol_;
  ::google::protobuf::internal::ArenaStringPtr exchange_;
  ::google::protobuf::int32 tradeid_;
  ::google::protobuf::int32 orderid_;
  int direction_;
  int offset_;
  double price_;
  ::google::protobuf::internal::ArenaStringPtr tradedate_;
  ::google::protobuf::internal::ArenaStringPtr tradetime_;
  ::google::protobuf::int32 volume_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bftrader_2eproto();
  friend void protobuf_AssignDesc_bftrader_2eproto();
  friend void protobuf_ShutdownFile_bftrader_2eproto();

  void InitAsDefaultInstance();
  static BfTradeData* default_instance_;
};
// -------------------------------------------------------------------

class BfOrderData : public ::google::protobuf::Message {
 public:
  BfOrderData();
  virtual ~BfOrderData();

  BfOrderData(const BfOrderData& from);

  inline BfOrderData& operator=(const BfOrderData& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const BfOrderData& default_instance();

  void UnsafeArenaSwap(BfOrderData* other);
  void Swap(BfOrderData* other);

  // implements Message ----------------------------------------------

  inline BfOrderData* New() const { return New(NULL); }

  BfOrderData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BfOrderData& from);
  void MergeFrom(const BfOrderData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BfOrderData* other);
  protected:
  explicit BfOrderData(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string symbol = 1;
  void clear_symbol();
  static const int kSymbolFieldNumber = 1;
  const ::std::string& symbol() const;
  void set_symbol(const ::std::string& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  ::std::string* mutable_symbol();
  ::std::string* release_symbol();
  void set_allocated_symbol(::std::string* symbol);
  ::std::string* unsafe_arena_release_symbol();
  void unsafe_arena_set_allocated_symbol(
      ::std::string* symbol);

  // optional string exchange = 2;
  void clear_exchange();
  static const int kExchangeFieldNumber = 2;
  const ::std::string& exchange() const;
  void set_exchange(const ::std::string& value);
  void set_exchange(const char* value);
  void set_exchange(const char* value, size_t size);
  ::std::string* mutable_exchange();
  ::std::string* release_exchange();
  void set_allocated_exchange(::std::string* exchange);
  ::std::string* unsafe_arena_release_exchange();
  void unsafe_arena_set_allocated_exchange(
      ::std::string* exchange);

  // optional int32 orderId = 3;
  void clear_orderid();
  static const int kOrderIdFieldNumber = 3;
  ::google::protobuf::int32 orderid() const;
  void set_orderid(::google::protobuf::int32 value);

  // optional .bftrader.BfDirection direction = 4;
  void clear_direction();
  static const int kDirectionFieldNumber = 4;
  ::bftrader::BfDirection direction() const;
  void set_direction(::bftrader::BfDirection value);

  // optional .bftrader.BfOffset offset = 5;
  void clear_offset();
  static const int kOffsetFieldNumber = 5;
  ::bftrader::BfOffset offset() const;
  void set_offset(::bftrader::BfOffset value);

  // optional double price = 6;
  void clear_price();
  static const int kPriceFieldNumber = 6;
  double price() const;
  void set_price(double value);

  // optional int32 totalVolume = 7;
  void clear_totalvolume();
  static const int kTotalVolumeFieldNumber = 7;
  ::google::protobuf::int32 totalvolume() const;
  void set_totalvolume(::google::protobuf::int32 value);

  // optional int32 tradedVolume = 8;
  void clear_tradedvolume();
  static const int kTradedVolumeFieldNumber = 8;
  ::google::protobuf::int32 tradedvolume() const;
  void set_tradedvolume(::google::protobuf::int32 value);

  // optional .bftrader.BfStatus status = 9;
  void clear_status();
  static const int kStatusFieldNumber = 9;
  ::bftrader::BfStatus status() const;
  void set_status(::bftrader::BfStatus value);

  // optional string insertDate = 10;
  void clear_insertdate();
  static const int kInsertDateFieldNumber = 10;
  const ::std::string& insertdate() const;
  void set_insertdate(const ::std::string& value);
  void set_insertdate(const char* value);
  void set_insertdate(const char* value, size_t size);
  ::std::string* mutable_insertdate();
  ::std::string* release_insertdate();
  void set_allocated_insertdate(::std::string* insertdate);
  ::std::string* unsafe_arena_release_insertdate();
  void unsafe_arena_set_allocated_insertdate(
      ::std::string* insertdate);

  // optional string insertTime = 11;
  void clear_inserttime();
  static const int kInsertTimeFieldNumber = 11;
  const ::std::string& inserttime() const;
  void set_inserttime(const ::std::string& value);
  void set_inserttime(const char* value);
  void set_inserttime(const char* value, size_t size);
  ::std::string* mutable_inserttime();
  ::std::string* release_inserttime();
  void set_allocated_inserttime(::std::string* inserttime);
  ::std::string* unsafe_arena_release_inserttime();
  void unsafe_arena_set_allocated_inserttime(
      ::std::string* inserttime);

  // optional string cancelTime = 12;
  void clear_canceltime();
  static const int kCancelTimeFieldNumber = 12;
  const ::std::string& canceltime() const;
  void set_canceltime(const ::std::string& value);
  void set_canceltime(const char* value);
  void set_canceltime(const char* value, size_t size);
  ::std::string* mutable_canceltime();
  ::std::string* release_canceltime();
  void set_allocated_canceltime(::std::string* canceltime);
  ::std::string* unsafe_arena_release_canceltime();
  void unsafe_arena_set_allocated_canceltime(
      ::std::string* canceltime);

  // optional int32 frontID = 13;
  void clear_frontid();
  static const int kFrontIDFieldNumber = 13;
  ::google::protobuf::int32 frontid() const;
  void set_frontid(::google::protobuf::int32 value);

  // optional int32 sessionID = 14;
  void clear_sessionid();
  static const int kSessionIDFieldNumber = 14;
  ::google::protobuf::int32 sessionid() const;
  void set_sessionid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bftrader.BfOrderData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr symbol_;
  ::google::protobuf::internal::ArenaStringPtr exchange_;
  ::google::protobuf::int32 orderid_;
  int direction_;
  double price_;
  int offset_;
  ::google::protobuf::int32 totalvolume_;
  ::google::protobuf::int32 tradedvolume_;
  int status_;
  ::google::protobuf::internal::ArenaStringPtr insertdate_;
  ::google::protobuf::internal::ArenaStringPtr inserttime_;
  ::google::protobuf::internal::ArenaStringPtr canceltime_;
  ::google::protobuf::int32 frontid_;
  ::google::protobuf::int32 sessionid_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bftrader_2eproto();
  friend void protobuf_AssignDesc_bftrader_2eproto();
  friend void protobuf_ShutdownFile_bftrader_2eproto();

  void InitAsDefaultInstance();
  static BfOrderData* default_instance_;
};
// -------------------------------------------------------------------

class BfPositionData : public ::google::protobuf::Message {
 public:
  BfPositionData();
  virtual ~BfPositionData();

  BfPositionData(const BfPositionData& from);

  inline BfPositionData& operator=(const BfPositionData& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const BfPositionData& default_instance();

  void UnsafeArenaSwap(BfPositionData* other);
  void Swap(BfPositionData* other);

  // implements Message ----------------------------------------------

  inline BfPositionData* New() const { return New(NULL); }

  BfPositionData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BfPositionData& from);
  void MergeFrom(const BfPositionData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BfPositionData* other);
  protected:
  explicit BfPositionData(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string symbol = 1;
  void clear_symbol();
  static const int kSymbolFieldNumber = 1;
  const ::std::string& symbol() const;
  void set_symbol(const ::std::string& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  ::std::string* mutable_symbol();
  ::std::string* release_symbol();
  void set_allocated_symbol(::std::string* symbol);
  ::std::string* unsafe_arena_release_symbol();
  void unsafe_arena_set_allocated_symbol(
      ::std::string* symbol);

  // optional string exchange = 2;
  void clear_exchange();
  static const int kExchangeFieldNumber = 2;
  const ::std::string& exchange() const;
  void set_exchange(const ::std::string& value);
  void set_exchange(const char* value);
  void set_exchange(const char* value, size_t size);
  ::std::string* mutable_exchange();
  ::std::string* release_exchange();
  void set_allocated_exchange(::std::string* exchange);
  ::std::string* unsafe_arena_release_exchange();
  void unsafe_arena_set_allocated_exchange(
      ::std::string* exchange);

  // optional .bftrader.BfDirection direction = 3;
  void clear_direction();
  static const int kDirectionFieldNumber = 3;
  ::bftrader::BfDirection direction() const;
  void set_direction(::bftrader::BfDirection value);

  // optional int32 position = 4;
  void clear_position();
  static const int kPositionFieldNumber = 4;
  ::google::protobuf::int32 position() const;
  void set_position(::google::protobuf::int32 value);

  // optional int32 frozen = 5;
  void clear_frozen();
  static const int kFrozenFieldNumber = 5;
  ::google::protobuf::int32 frozen() const;
  void set_frozen(::google::protobuf::int32 value);

  // optional double price = 6;
  void clear_price();
  static const int kPriceFieldNumber = 6;
  double price() const;
  void set_price(double value);

  // optional int32 ydPosition = 7;
  void clear_ydposition();
  static const int kYdPositionFieldNumber = 7;
  ::google::protobuf::int32 ydposition() const;
  void set_ydposition(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bftrader.BfPositionData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr symbol_;
  ::google::protobuf::internal::ArenaStringPtr exchange_;
  int direction_;
  ::google::protobuf::int32 position_;
  double price_;
  ::google::protobuf::int32 frozen_;
  ::google::protobuf::int32 ydposition_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bftrader_2eproto();
  friend void protobuf_AssignDesc_bftrader_2eproto();
  friend void protobuf_ShutdownFile_bftrader_2eproto();

  void InitAsDefaultInstance();
  static BfPositionData* default_instance_;
};
// -------------------------------------------------------------------

class BfAccountData : public ::google::protobuf::Message {
 public:
  BfAccountData();
  virtual ~BfAccountData();

  BfAccountData(const BfAccountData& from);

  inline BfAccountData& operator=(const BfAccountData& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const BfAccountData& default_instance();

  void UnsafeArenaSwap(BfAccountData* other);
  void Swap(BfAccountData* other);

  // implements Message ----------------------------------------------

  inline BfAccountData* New() const { return New(NULL); }

  BfAccountData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BfAccountData& from);
  void MergeFrom(const BfAccountData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BfAccountData* other);
  protected:
  explicit BfAccountData(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string accountId = 1;
  void clear_accountid();
  static const int kAccountIdFieldNumber = 1;
  const ::std::string& accountid() const;
  void set_accountid(const ::std::string& value);
  void set_accountid(const char* value);
  void set_accountid(const char* value, size_t size);
  ::std::string* mutable_accountid();
  ::std::string* release_accountid();
  void set_allocated_accountid(::std::string* accountid);
  ::std::string* unsafe_arena_release_accountid();
  void unsafe_arena_set_allocated_accountid(
      ::std::string* accountid);

  // optional double preBalance = 2;
  void clear_prebalance();
  static const int kPreBalanceFieldNumber = 2;
  double prebalance() const;
  void set_prebalance(double value);

  // optional double balance = 3;
  void clear_balance();
  static const int kBalanceFieldNumber = 3;
  double balance() const;
  void set_balance(double value);

  // optional double available = 4;
  void clear_available();
  static const int kAvailableFieldNumber = 4;
  double available() const;
  void set_available(double value);

  // optional double commission = 5;
  void clear_commission();
  static const int kCommissionFieldNumber = 5;
  double commission() const;
  void set_commission(double value);

  // optional double frozenMargin = 6;
  void clear_frozenmargin();
  static const int kFrozenMarginFieldNumber = 6;
  double frozenmargin() const;
  void set_frozenmargin(double value);

  // optional double closeProfit = 7;
  void clear_closeprofit();
  static const int kCloseProfitFieldNumber = 7;
  double closeprofit() const;
  void set_closeprofit(double value);

  // optional double positionProfit = 8;
  void clear_positionprofit();
  static const int kPositionProfitFieldNumber = 8;
  double positionprofit() const;
  void set_positionprofit(double value);

  // @@protoc_insertion_point(class_scope:bftrader.BfAccountData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr accountid_;
  double prebalance_;
  double balance_;
  double available_;
  double commission_;
  double frozenmargin_;
  double closeprofit_;
  double positionprofit_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bftrader_2eproto();
  friend void protobuf_AssignDesc_bftrader_2eproto();
  friend void protobuf_ShutdownFile_bftrader_2eproto();

  void InitAsDefaultInstance();
  static BfAccountData* default_instance_;
};
// -------------------------------------------------------------------

class BfErrorData : public ::google::protobuf::Message {
 public:
  BfErrorData();
  virtual ~BfErrorData();

  BfErrorData(const BfErrorData& from);

  inline BfErrorData& operator=(const BfErrorData& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const BfErrorData& default_instance();

  void UnsafeArenaSwap(BfErrorData* other);
  void Swap(BfErrorData* other);

  // implements Message ----------------------------------------------

  inline BfErrorData* New() const { return New(NULL); }

  BfErrorData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BfErrorData& from);
  void MergeFrom(const BfErrorData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BfErrorData* other);
  protected:
  explicit BfErrorData(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string errorId = 1;
  void clear_errorid();
  static const int kErrorIdFieldNumber = 1;
  const ::std::string& errorid() const;
  void set_errorid(const ::std::string& value);
  void set_errorid(const char* value);
  void set_errorid(const char* value, size_t size);
  ::std::string* mutable_errorid();
  ::std::string* release_errorid();
  void set_allocated_errorid(::std::string* errorid);
  ::std::string* unsafe_arena_release_errorid();
  void unsafe_arena_set_allocated_errorid(
      ::std::string* errorid);

  // optional string errorMsg = 2;
  void clear_errormsg();
  static const int kErrorMsgFieldNumber = 2;
  const ::std::string& errormsg() const;
  void set_errormsg(const ::std::string& value);
  void set_errormsg(const char* value);
  void set_errormsg(const char* value, size_t size);
  ::std::string* mutable_errormsg();
  ::std::string* release_errormsg();
  void set_allocated_errormsg(::std::string* errormsg);
  ::std::string* unsafe_arena_release_errormsg();
  void unsafe_arena_set_allocated_errormsg(
      ::std::string* errormsg);

  // optional string additionalInfo = 3;
  void clear_additionalinfo();
  static const int kAdditionalInfoFieldNumber = 3;
  const ::std::string& additionalinfo() const;
  void set_additionalinfo(const ::std::string& value);
  void set_additionalinfo(const char* value);
  void set_additionalinfo(const char* value, size_t size);
  ::std::string* mutable_additionalinfo();
  ::std::string* release_additionalinfo();
  void set_allocated_additionalinfo(::std::string* additionalinfo);
  ::std::string* unsafe_arena_release_additionalinfo();
  void unsafe_arena_set_allocated_additionalinfo(
      ::std::string* additionalinfo);

  // @@protoc_insertion_point(class_scope:bftrader.BfErrorData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr errorid_;
  ::google::protobuf::internal::ArenaStringPtr errormsg_;
  ::google::protobuf::internal::ArenaStringPtr additionalinfo_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bftrader_2eproto();
  friend void protobuf_AssignDesc_bftrader_2eproto();
  friend void protobuf_ShutdownFile_bftrader_2eproto();

  void InitAsDefaultInstance();
  static BfErrorData* default_instance_;
};
// -------------------------------------------------------------------

class BfLogData : public ::google::protobuf::Message {
 public:
  BfLogData();
  virtual ~BfLogData();

  BfLogData(const BfLogData& from);

  inline BfLogData& operator=(const BfLogData& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const BfLogData& default_instance();

  void UnsafeArenaSwap(BfLogData* other);
  void Swap(BfLogData* other);

  // implements Message ----------------------------------------------

  inline BfLogData* New() const { return New(NULL); }

  BfLogData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BfLogData& from);
  void MergeFrom(const BfLogData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BfLogData* other);
  protected:
  explicit BfLogData(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string logTime = 1;
  void clear_logtime();
  static const int kLogTimeFieldNumber = 1;
  const ::std::string& logtime() const;
  void set_logtime(const ::std::string& value);
  void set_logtime(const char* value);
  void set_logtime(const char* value, size_t size);
  ::std::string* mutable_logtime();
  ::std::string* release_logtime();
  void set_allocated_logtime(::std::string* logtime);
  ::std::string* unsafe_arena_release_logtime();
  void unsafe_arena_set_allocated_logtime(
      ::std::string* logtime);

  // optional string logContent = 2;
  void clear_logcontent();
  static const int kLogContentFieldNumber = 2;
  const ::std::string& logcontent() const;
  void set_logcontent(const ::std::string& value);
  void set_logcontent(const char* value);
  void set_logcontent(const char* value, size_t size);
  ::std::string* mutable_logcontent();
  ::std::string* release_logcontent();
  void set_allocated_logcontent(::std::string* logcontent);
  ::std::string* unsafe_arena_release_logcontent();
  void unsafe_arena_set_allocated_logcontent(
      ::std::string* logcontent);

  // @@protoc_insertion_point(class_scope:bftrader.BfLogData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr logtime_;
  ::google::protobuf::internal::ArenaStringPtr logcontent_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bftrader_2eproto();
  friend void protobuf_AssignDesc_bftrader_2eproto();
  friend void protobuf_ShutdownFile_bftrader_2eproto();

  void InitAsDefaultInstance();
  static BfLogData* default_instance_;
};
// -------------------------------------------------------------------

class BfContractData : public ::google::protobuf::Message {
 public:
  BfContractData();
  virtual ~BfContractData();

  BfContractData(const BfContractData& from);

  inline BfContractData& operator=(const BfContractData& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const BfContractData& default_instance();

  void UnsafeArenaSwap(BfContractData* other);
  void Swap(BfContractData* other);

  // implements Message ----------------------------------------------

  inline BfContractData* New() const { return New(NULL); }

  BfContractData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BfContractData& from);
  void MergeFrom(const BfContractData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BfContractData* other);
  protected:
  explicit BfContractData(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string symbol = 1;
  void clear_symbol();
  static const int kSymbolFieldNumber = 1;
  const ::std::string& symbol() const;
  void set_symbol(const ::std::string& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  ::std::string* mutable_symbol();
  ::std::string* release_symbol();
  void set_allocated_symbol(::std::string* symbol);
  ::std::string* unsafe_arena_release_symbol();
  void unsafe_arena_set_allocated_symbol(
      ::std::string* symbol);

  // optional string exchange = 2;
  void clear_exchange();
  static const int kExchangeFieldNumber = 2;
  const ::std::string& exchange() const;
  void set_exchange(const ::std::string& value);
  void set_exchange(const char* value);
  void set_exchange(const char* value, size_t size);
  ::std::string* mutable_exchange();
  ::std::string* release_exchange();
  void set_allocated_exchange(::std::string* exchange);
  ::std::string* unsafe_arena_release_exchange();
  void unsafe_arena_set_allocated_exchange(
      ::std::string* exchange);

  // optional string name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  ::std::string* unsafe_arena_release_name();
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // optional .bftrader.BfProduct productClass = 4;
  void clear_productclass();
  static const int kProductClassFieldNumber = 4;
  ::bftrader::BfProduct productclass() const;
  void set_productclass(::bftrader::BfProduct value);

  // optional int32 volumeMultiple = 5;
  void clear_volumemultiple();
  static const int kVolumeMultipleFieldNumber = 5;
  ::google::protobuf::int32 volumemultiple() const;
  void set_volumemultiple(::google::protobuf::int32 value);

  // optional double priceTick = 6;
  void clear_pricetick();
  static const int kPriceTickFieldNumber = 6;
  double pricetick() const;
  void set_pricetick(double value);

  // optional int32 maxLimit = 7;
  void clear_maxlimit();
  static const int kMaxLimitFieldNumber = 7;
  ::google::protobuf::int32 maxlimit() const;
  void set_maxlimit(::google::protobuf::int32 value);

  // optional int32 minLimit = 8;
  void clear_minlimit();
  static const int kMinLimitFieldNumber = 8;
  ::google::protobuf::int32 minlimit() const;
  void set_minlimit(::google::protobuf::int32 value);

  // optional int32 maxMarket = 9;
  void clear_maxmarket();
  static const int kMaxMarketFieldNumber = 9;
  ::google::protobuf::int32 maxmarket() const;
  void set_maxmarket(::google::protobuf::int32 value);

  // optional int32 minMartet = 10;
  void clear_minmartet();
  static const int kMinMartetFieldNumber = 10;
  ::google::protobuf::int32 minmartet() const;
  void set_minmartet(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bftrader.BfContractData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr symbol_;
  ::google::protobuf::internal::ArenaStringPtr exchange_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  int productclass_;
  ::google::protobuf::int32 volumemultiple_;
  double pricetick_;
  ::google::protobuf::int32 maxlimit_;
  ::google::protobuf::int32 minlimit_;
  ::google::protobuf::int32 maxmarket_;
  ::google::protobuf::int32 minmartet_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bftrader_2eproto();
  friend void protobuf_AssignDesc_bftrader_2eproto();
  friend void protobuf_ShutdownFile_bftrader_2eproto();

  void InitAsDefaultInstance();
  static BfContractData* default_instance_;
};
// -------------------------------------------------------------------

class BfKvData : public ::google::protobuf::Message {
 public:
  BfKvData();
  virtual ~BfKvData();

  BfKvData(const BfKvData& from);

  inline BfKvData& operator=(const BfKvData& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const BfKvData& default_instance();

  void UnsafeArenaSwap(BfKvData* other);
  void Swap(BfKvData* other);

  // implements Message ----------------------------------------------

  inline BfKvData* New() const { return New(NULL); }

  BfKvData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BfKvData& from);
  void MergeFrom(const BfKvData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BfKvData* other);
  protected:
  explicit BfKvData(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);
  ::std::string* unsafe_arena_release_key();
  void unsafe_arena_set_allocated_key(
      ::std::string* key);

  // optional string value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);
  ::std::string* unsafe_arena_release_value();
  void unsafe_arena_set_allocated_value(
      ::std::string* value);

  // @@protoc_insertion_point(class_scope:bftrader.BfKvData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bftrader_2eproto();
  friend void protobuf_AssignDesc_bftrader_2eproto();
  friend void protobuf_ShutdownFile_bftrader_2eproto();

  void InitAsDefaultInstance();
  static BfKvData* default_instance_;
};
// -------------------------------------------------------------------

class BfSubscribeReq : public ::google::protobuf::Message {
 public:
  BfSubscribeReq();
  virtual ~BfSubscribeReq();

  BfSubscribeReq(const BfSubscribeReq& from);

  inline BfSubscribeReq& operator=(const BfSubscribeReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const BfSubscribeReq& default_instance();

  void UnsafeArenaSwap(BfSubscribeReq* other);
  void Swap(BfSubscribeReq* other);

  // implements Message ----------------------------------------------

  inline BfSubscribeReq* New() const { return New(NULL); }

  BfSubscribeReq* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BfSubscribeReq& from);
  void MergeFrom(const BfSubscribeReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BfSubscribeReq* other);
  protected:
  explicit BfSubscribeReq(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string symbol = 1;
  void clear_symbol();
  static const int kSymbolFieldNumber = 1;
  const ::std::string& symbol() const;
  void set_symbol(const ::std::string& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  ::std::string* mutable_symbol();
  ::std::string* release_symbol();
  void set_allocated_symbol(::std::string* symbol);
  ::std::string* unsafe_arena_release_symbol();
  void unsafe_arena_set_allocated_symbol(
      ::std::string* symbol);

  // optional string exchange = 2;
  void clear_exchange();
  static const int kExchangeFieldNumber = 2;
  const ::std::string& exchange() const;
  void set_exchange(const ::std::string& value);
  void set_exchange(const char* value);
  void set_exchange(const char* value, size_t size);
  ::std::string* mutable_exchange();
  ::std::string* release_exchange();
  void set_allocated_exchange(::std::string* exchange);
  ::std::string* unsafe_arena_release_exchange();
  void unsafe_arena_set_allocated_exchange(
      ::std::string* exchange);

  // @@protoc_insertion_point(class_scope:bftrader.BfSubscribeReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr symbol_;
  ::google::protobuf::internal::ArenaStringPtr exchange_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bftrader_2eproto();
  friend void protobuf_AssignDesc_bftrader_2eproto();
  friend void protobuf_ShutdownFile_bftrader_2eproto();

  void InitAsDefaultInstance();
  static BfSubscribeReq* default_instance_;
};
// -------------------------------------------------------------------

class BfOrderReq : public ::google::protobuf::Message {
 public:
  BfOrderReq();
  virtual ~BfOrderReq();

  BfOrderReq(const BfOrderReq& from);

  inline BfOrderReq& operator=(const BfOrderReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const BfOrderReq& default_instance();

  void UnsafeArenaSwap(BfOrderReq* other);
  void Swap(BfOrderReq* other);

  // implements Message ----------------------------------------------

  inline BfOrderReq* New() const { return New(NULL); }

  BfOrderReq* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BfOrderReq& from);
  void MergeFrom(const BfOrderReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BfOrderReq* other);
  protected:
  explicit BfOrderReq(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string symbol = 1;
  void clear_symbol();
  static const int kSymbolFieldNumber = 1;
  const ::std::string& symbol() const;
  void set_symbol(const ::std::string& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  ::std::string* mutable_symbol();
  ::std::string* release_symbol();
  void set_allocated_symbol(::std::string* symbol);
  ::std::string* unsafe_arena_release_symbol();
  void unsafe_arena_set_allocated_symbol(
      ::std::string* symbol);

  // optional string exchange = 2;
  void clear_exchange();
  static const int kExchangeFieldNumber = 2;
  const ::std::string& exchange() const;
  void set_exchange(const ::std::string& value);
  void set_exchange(const char* value);
  void set_exchange(const char* value, size_t size);
  ::std::string* mutable_exchange();
  ::std::string* release_exchange();
  void set_allocated_exchange(::std::string* exchange);
  ::std::string* unsafe_arena_release_exchange();
  void unsafe_arena_set_allocated_exchange(
      ::std::string* exchange);

  // optional double price = 3;
  void clear_price();
  static const int kPriceFieldNumber = 3;
  double price() const;
  void set_price(double value);

  // optional int32 volume = 4;
  void clear_volume();
  static const int kVolumeFieldNumber = 4;
  ::google::protobuf::int32 volume() const;
  void set_volume(::google::protobuf::int32 value);

  // optional .bftrader.BfPriceType priceType = 5;
  void clear_pricetype();
  static const int kPriceTypeFieldNumber = 5;
  ::bftrader::BfPriceType pricetype() const;
  void set_pricetype(::bftrader::BfPriceType value);

  // optional .bftrader.BfDirection direction = 6;
  void clear_direction();
  static const int kDirectionFieldNumber = 6;
  ::bftrader::BfDirection direction() const;
  void set_direction(::bftrader::BfDirection value);

  // optional .bftrader.BfOffset offset = 7;
  void clear_offset();
  static const int kOffsetFieldNumber = 7;
  ::bftrader::BfOffset offset() const;
  void set_offset(::bftrader::BfOffset value);

  // @@protoc_insertion_point(class_scope:bftrader.BfOrderReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr symbol_;
  ::google::protobuf::internal::ArenaStringPtr exchange_;
  double price_;
  ::google::protobuf::int32 volume_;
  int pricetype_;
  int direction_;
  int offset_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bftrader_2eproto();
  friend void protobuf_AssignDesc_bftrader_2eproto();
  friend void protobuf_ShutdownFile_bftrader_2eproto();

  void InitAsDefaultInstance();
  static BfOrderReq* default_instance_;
};
// -------------------------------------------------------------------

class BfOrderResp : public ::google::protobuf::Message {
 public:
  BfOrderResp();
  virtual ~BfOrderResp();

  BfOrderResp(const BfOrderResp& from);

  inline BfOrderResp& operator=(const BfOrderResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const BfOrderResp& default_instance();

  void UnsafeArenaSwap(BfOrderResp* other);
  void Swap(BfOrderResp* other);

  // implements Message ----------------------------------------------

  inline BfOrderResp* New() const { return New(NULL); }

  BfOrderResp* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BfOrderResp& from);
  void MergeFrom(const BfOrderResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BfOrderResp* other);
  protected:
  explicit BfOrderResp(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 orderId = 1;
  void clear_orderid();
  static const int kOrderIdFieldNumber = 1;
  ::google::protobuf::int32 orderid() const;
  void set_orderid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bftrader.BfOrderResp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  ::google::protobuf::int32 orderid_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bftrader_2eproto();
  friend void protobuf_AssignDesc_bftrader_2eproto();
  friend void protobuf_ShutdownFile_bftrader_2eproto();

  void InitAsDefaultInstance();
  static BfOrderResp* default_instance_;
};
// -------------------------------------------------------------------

class BfCancelOrderReq : public ::google::protobuf::Message {
 public:
  BfCancelOrderReq();
  virtual ~BfCancelOrderReq();

  BfCancelOrderReq(const BfCancelOrderReq& from);

  inline BfCancelOrderReq& operator=(const BfCancelOrderReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const BfCancelOrderReq& default_instance();

  void UnsafeArenaSwap(BfCancelOrderReq* other);
  void Swap(BfCancelOrderReq* other);

  // implements Message ----------------------------------------------

  inline BfCancelOrderReq* New() const { return New(NULL); }

  BfCancelOrderReq* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BfCancelOrderReq& from);
  void MergeFrom(const BfCancelOrderReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BfCancelOrderReq* other);
  protected:
  explicit BfCancelOrderReq(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string symbol = 1;
  void clear_symbol();
  static const int kSymbolFieldNumber = 1;
  const ::std::string& symbol() const;
  void set_symbol(const ::std::string& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  ::std::string* mutable_symbol();
  ::std::string* release_symbol();
  void set_allocated_symbol(::std::string* symbol);
  ::std::string* unsafe_arena_release_symbol();
  void unsafe_arena_set_allocated_symbol(
      ::std::string* symbol);

  // optional string exchange = 2;
  void clear_exchange();
  static const int kExchangeFieldNumber = 2;
  const ::std::string& exchange() const;
  void set_exchange(const ::std::string& value);
  void set_exchange(const char* value);
  void set_exchange(const char* value, size_t size);
  ::std::string* mutable_exchange();
  ::std::string* release_exchange();
  void set_allocated_exchange(::std::string* exchange);
  ::std::string* unsafe_arena_release_exchange();
  void unsafe_arena_set_allocated_exchange(
      ::std::string* exchange);

  // optional int32 orderId = 3;
  void clear_orderid();
  static const int kOrderIdFieldNumber = 3;
  ::google::protobuf::int32 orderid() const;
  void set_orderid(::google::protobuf::int32 value);

  // optional int32 frontID = 4;
  void clear_frontid();
  static const int kFrontIDFieldNumber = 4;
  ::google::protobuf::int32 frontid() const;
  void set_frontid(::google::protobuf::int32 value);

  // optional int32 sessionID = 5;
  void clear_sessionid();
  static const int kSessionIDFieldNumber = 5;
  ::google::protobuf::int32 sessionid() const;
  void set_sessionid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bftrader.BfCancelOrderReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr symbol_;
  ::google::protobuf::internal::ArenaStringPtr exchange_;
  ::google::protobuf::int32 orderid_;
  ::google::protobuf::int32 frontid_;
  ::google::protobuf::int32 sessionid_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bftrader_2eproto();
  friend void protobuf_AssignDesc_bftrader_2eproto();
  friend void protobuf_ShutdownFile_bftrader_2eproto();

  void InitAsDefaultInstance();
  static BfCancelOrderReq* default_instance_;
};
// -------------------------------------------------------------------

class BfConnectReq : public ::google::protobuf::Message {
 public:
  BfConnectReq();
  virtual ~BfConnectReq();

  BfConnectReq(const BfConnectReq& from);

  inline BfConnectReq& operator=(const BfConnectReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const BfConnectReq& default_instance();

  void UnsafeArenaSwap(BfConnectReq* other);
  void Swap(BfConnectReq* other);

  // implements Message ----------------------------------------------

  inline BfConnectReq* New() const { return New(NULL); }

  BfConnectReq* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BfConnectReq& from);
  void MergeFrom(const BfConnectReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BfConnectReq* other);
  protected:
  explicit BfConnectReq(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string robotId = 1;
  void clear_robotid();
  static const int kRobotIdFieldNumber = 1;
  const ::std::string& robotid() const;
  void set_robotid(const ::std::string& value);
  void set_robotid(const char* value);
  void set_robotid(const char* value, size_t size);
  ::std::string* mutable_robotid();
  ::std::string* release_robotid();
  void set_allocated_robotid(::std::string* robotid);
  ::std::string* unsafe_arena_release_robotid();
  void unsafe_arena_set_allocated_robotid(
      ::std::string* robotid);

  // optional string robotIp = 2;
  void clear_robotip();
  static const int kRobotIpFieldNumber = 2;
  const ::std::string& robotip() const;
  void set_robotip(const ::std::string& value);
  void set_robotip(const char* value);
  void set_robotip(const char* value, size_t size);
  ::std::string* mutable_robotip();
  ::std::string* release_robotip();
  void set_allocated_robotip(::std::string* robotip);
  ::std::string* unsafe_arena_release_robotip();
  void unsafe_arena_set_allocated_robotip(
      ::std::string* robotip);

  // optional int32 robotPort = 3;
  void clear_robotport();
  static const int kRobotPortFieldNumber = 3;
  ::google::protobuf::int32 robotport() const;
  void set_robotport(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bftrader.BfConnectReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr robotid_;
  ::google::protobuf::internal::ArenaStringPtr robotip_;
  ::google::protobuf::int32 robotport_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bftrader_2eproto();
  friend void protobuf_AssignDesc_bftrader_2eproto();
  friend void protobuf_ShutdownFile_bftrader_2eproto();

  void InitAsDefaultInstance();
  static BfConnectReq* default_instance_;
};
// -------------------------------------------------------------------

class BfConnectResp : public ::google::protobuf::Message {
 public:
  BfConnectResp();
  virtual ~BfConnectResp();

  BfConnectResp(const BfConnectResp& from);

  inline BfConnectResp& operator=(const BfConnectResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const BfConnectResp& default_instance();

  void UnsafeArenaSwap(BfConnectResp* other);
  void Swap(BfConnectResp* other);

  // implements Message ----------------------------------------------

  inline BfConnectResp* New() const { return New(NULL); }

  BfConnectResp* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BfConnectResp& from);
  void MergeFrom(const BfConnectResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BfConnectResp* other);
  protected:
  explicit BfConnectResp(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool exchangeOpened = 1;
  void clear_exchangeopened();
  static const int kExchangeOpenedFieldNumber = 1;
  bool exchangeopened() const;
  void set_exchangeopened(bool value);

  // @@protoc_insertion_point(class_scope:bftrader.BfConnectResp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  bool exchangeopened_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bftrader_2eproto();
  friend void protobuf_AssignDesc_bftrader_2eproto();
  friend void protobuf_ShutdownFile_bftrader_2eproto();

  void InitAsDefaultInstance();
  static BfConnectResp* default_instance_;
};
// -------------------------------------------------------------------

class BfGetContractReq : public ::google::protobuf::Message {
 public:
  BfGetContractReq();
  virtual ~BfGetContractReq();

  BfGetContractReq(const BfGetContractReq& from);

  inline BfGetContractReq& operator=(const BfGetContractReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const BfGetContractReq& default_instance();

  void UnsafeArenaSwap(BfGetContractReq* other);
  void Swap(BfGetContractReq* other);

  // implements Message ----------------------------------------------

  inline BfGetContractReq* New() const { return New(NULL); }

  BfGetContractReq* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BfGetContractReq& from);
  void MergeFrom(const BfGetContractReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BfGetContractReq* other);
  protected:
  explicit BfGetContractReq(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string symbol = 1;
  void clear_symbol();
  static const int kSymbolFieldNumber = 1;
  const ::std::string& symbol() const;
  void set_symbol(const ::std::string& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  ::std::string* mutable_symbol();
  ::std::string* release_symbol();
  void set_allocated_symbol(::std::string* symbol);
  ::std::string* unsafe_arena_release_symbol();
  void unsafe_arena_set_allocated_symbol(
      ::std::string* symbol);

  // optional string exchange = 2;
  void clear_exchange();
  static const int kExchangeFieldNumber = 2;
  const ::std::string& exchange() const;
  void set_exchange(const ::std::string& value);
  void set_exchange(const char* value);
  void set_exchange(const char* value, size_t size);
  ::std::string* mutable_exchange();
  ::std::string* release_exchange();
  void set_allocated_exchange(::std::string* exchange);
  ::std::string* unsafe_arena_release_exchange();
  void unsafe_arena_set_allocated_exchange(
      ::std::string* exchange);

  // @@protoc_insertion_point(class_scope:bftrader.BfGetContractReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr symbol_;
  ::google::protobuf::internal::ArenaStringPtr exchange_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bftrader_2eproto();
  friend void protobuf_AssignDesc_bftrader_2eproto();
  friend void protobuf_ShutdownFile_bftrader_2eproto();

  void InitAsDefaultInstance();
  static BfGetContractReq* default_instance_;
};
// -------------------------------------------------------------------

class BfGetTickPackReq : public ::google::protobuf::Message {
 public:
  BfGetTickPackReq();
  virtual ~BfGetTickPackReq();

  BfGetTickPackReq(const BfGetTickPackReq& from);

  inline BfGetTickPackReq& operator=(const BfGetTickPackReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const BfGetTickPackReq& default_instance();

  void UnsafeArenaSwap(BfGetTickPackReq* other);
  void Swap(BfGetTickPackReq* other);

  // implements Message ----------------------------------------------

  inline BfGetTickPackReq* New() const { return New(NULL); }

  BfGetTickPackReq* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BfGetTickPackReq& from);
  void MergeFrom(const BfGetTickPackReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BfGetTickPackReq* other);
  protected:
  explicit BfGetTickPackReq(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string symbol = 1;
  void clear_symbol();
  static const int kSymbolFieldNumber = 1;
  const ::std::string& symbol() const;
  void set_symbol(const ::std::string& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  ::std::string* mutable_symbol();
  ::std::string* release_symbol();
  void set_allocated_symbol(::std::string* symbol);
  ::std::string* unsafe_arena_release_symbol();
  void unsafe_arena_set_allocated_symbol(
      ::std::string* symbol);

  // optional string exchange = 2;
  void clear_exchange();
  static const int kExchangeFieldNumber = 2;
  const ::std::string& exchange() const;
  void set_exchange(const ::std::string& value);
  void set_exchange(const char* value);
  void set_exchange(const char* value, size_t size);
  ::std::string* mutable_exchange();
  ::std::string* release_exchange();
  void set_allocated_exchange(::std::string* exchange);
  ::std::string* unsafe_arena_release_exchange();
  void unsafe_arena_set_allocated_exchange(
      ::std::string* exchange);

  // optional string toDate = 3;
  void clear_todate();
  static const int kToDateFieldNumber = 3;
  const ::std::string& todate() const;
  void set_todate(const ::std::string& value);
  void set_todate(const char* value);
  void set_todate(const char* value, size_t size);
  ::std::string* mutable_todate();
  ::std::string* release_todate();
  void set_allocated_todate(::std::string* todate);
  ::std::string* unsafe_arena_release_todate();
  void unsafe_arena_set_allocated_todate(
      ::std::string* todate);

  // optional string toTime = 4;
  void clear_totime();
  static const int kToTimeFieldNumber = 4;
  const ::std::string& totime() const;
  void set_totime(const ::std::string& value);
  void set_totime(const char* value);
  void set_totime(const char* value, size_t size);
  ::std::string* mutable_totime();
  ::std::string* release_totime();
  void set_allocated_totime(::std::string* totime);
  ::std::string* unsafe_arena_release_totime();
  void unsafe_arena_set_allocated_totime(
      ::std::string* totime);

  // optional int32 count = 5;
  void clear_count();
  static const int kCountFieldNumber = 5;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bftrader.BfGetTickPackReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr symbol_;
  ::google::protobuf::internal::ArenaStringPtr exchange_;
  ::google::protobuf::internal::ArenaStringPtr todate_;
  ::google::protobuf::internal::ArenaStringPtr totime_;
  ::google::protobuf::int32 count_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bftrader_2eproto();
  friend void protobuf_AssignDesc_bftrader_2eproto();
  friend void protobuf_ShutdownFile_bftrader_2eproto();

  void InitAsDefaultInstance();
  static BfGetTickPackReq* default_instance_;
};
// -------------------------------------------------------------------

class BfGetBarReq : public ::google::protobuf::Message {
 public:
  BfGetBarReq();
  virtual ~BfGetBarReq();

  BfGetBarReq(const BfGetBarReq& from);

  inline BfGetBarReq& operator=(const BfGetBarReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const BfGetBarReq& default_instance();

  void UnsafeArenaSwap(BfGetBarReq* other);
  void Swap(BfGetBarReq* other);

  // implements Message ----------------------------------------------

  inline BfGetBarReq* New() const { return New(NULL); }

  BfGetBarReq* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BfGetBarReq& from);
  void MergeFrom(const BfGetBarReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BfGetBarReq* other);
  protected:
  explicit BfGetBarReq(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string symbol = 1;
  void clear_symbol();
  static const int kSymbolFieldNumber = 1;
  const ::std::string& symbol() const;
  void set_symbol(const ::std::string& value);
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  ::std::string* mutable_symbol();
  ::std::string* release_symbol();
  void set_allocated_symbol(::std::string* symbol);
  ::std::string* unsafe_arena_release_symbol();
  void unsafe_arena_set_allocated_symbol(
      ::std::string* symbol);

  // optional string exchange = 2;
  void clear_exchange();
  static const int kExchangeFieldNumber = 2;
  const ::std::string& exchange() const;
  void set_exchange(const ::std::string& value);
  void set_exchange(const char* value);
  void set_exchange(const char* value, size_t size);
  ::std::string* mutable_exchange();
  ::std::string* release_exchange();
  void set_allocated_exchange(::std::string* exchange);
  ::std::string* unsafe_arena_release_exchange();
  void unsafe_arena_set_allocated_exchange(
      ::std::string* exchange);

  // optional .bftrader.BfPeriod period = 3;
  void clear_period();
  static const int kPeriodFieldNumber = 3;
  ::bftrader::BfPeriod period() const;
  void set_period(::bftrader::BfPeriod value);

  // optional string toDate = 4;
  void clear_todate();
  static const int kToDateFieldNumber = 4;
  const ::std::string& todate() const;
  void set_todate(const ::std::string& value);
  void set_todate(const char* value);
  void set_todate(const char* value, size_t size);
  ::std::string* mutable_todate();
  ::std::string* release_todate();
  void set_allocated_todate(::std::string* todate);
  ::std::string* unsafe_arena_release_todate();
  void unsafe_arena_set_allocated_todate(
      ::std::string* todate);

  // optional string toTime = 5;
  void clear_totime();
  static const int kToTimeFieldNumber = 5;
  const ::std::string& totime() const;
  void set_totime(const ::std::string& value);
  void set_totime(const char* value);
  void set_totime(const char* value, size_t size);
  ::std::string* mutable_totime();
  ::std::string* release_totime();
  void set_allocated_totime(::std::string* totime);
  ::std::string* unsafe_arena_release_totime();
  void unsafe_arena_set_allocated_totime(
      ::std::string* totime);

  // optional int32 count = 6;
  void clear_count();
  static const int kCountFieldNumber = 6;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bftrader.BfGetBarReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr symbol_;
  ::google::protobuf::internal::ArenaStringPtr exchange_;
  ::google::protobuf::internal::ArenaStringPtr todate_;
  int period_;
  ::google::protobuf::int32 count_;
  ::google::protobuf::internal::ArenaStringPtr totime_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_bftrader_2eproto();
  friend void protobuf_AssignDesc_bftrader_2eproto();
  friend void protobuf_ShutdownFile_bftrader_2eproto();

  void InitAsDefaultInstance();
  static BfGetBarReq* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// BfVoid

// -------------------------------------------------------------------

// BfDailyInfo

// optional double openPrice = 1;
inline void BfDailyInfo::clear_openprice() {
  openprice_ = 0;
}
inline double BfDailyInfo::openprice() const {
  // @@protoc_insertion_point(field_get:bftrader.BfDailyInfo.openPrice)
  return openprice_;
}
inline void BfDailyInfo::set_openprice(double value) {
  
  openprice_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfDailyInfo.openPrice)
}

// optional double highPrice = 2;
inline void BfDailyInfo::clear_highprice() {
  highprice_ = 0;
}
inline double BfDailyInfo::highprice() const {
  // @@protoc_insertion_point(field_get:bftrader.BfDailyInfo.highPrice)
  return highprice_;
}
inline void BfDailyInfo::set_highprice(double value) {
  
  highprice_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfDailyInfo.highPrice)
}

// optional double lowPrice = 3;
inline void BfDailyInfo::clear_lowprice() {
  lowprice_ = 0;
}
inline double BfDailyInfo::lowprice() const {
  // @@protoc_insertion_point(field_get:bftrader.BfDailyInfo.lowPrice)
  return lowprice_;
}
inline void BfDailyInfo::set_lowprice(double value) {
  
  lowprice_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfDailyInfo.lowPrice)
}

// optional double preClosePrice = 4;
inline void BfDailyInfo::clear_precloseprice() {
  precloseprice_ = 0;
}
inline double BfDailyInfo::precloseprice() const {
  // @@protoc_insertion_point(field_get:bftrader.BfDailyInfo.preClosePrice)
  return precloseprice_;
}
inline void BfDailyInfo::set_precloseprice(double value) {
  
  precloseprice_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfDailyInfo.preClosePrice)
}

// optional double upperLimit = 5;
inline void BfDailyInfo::clear_upperlimit() {
  upperlimit_ = 0;
}
inline double BfDailyInfo::upperlimit() const {
  // @@protoc_insertion_point(field_get:bftrader.BfDailyInfo.upperLimit)
  return upperlimit_;
}
inline void BfDailyInfo::set_upperlimit(double value) {
  
  upperlimit_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfDailyInfo.upperLimit)
}

// optional double lowerLimit = 6;
inline void BfDailyInfo::clear_lowerlimit() {
  lowerlimit_ = 0;
}
inline double BfDailyInfo::lowerlimit() const {
  // @@protoc_insertion_point(field_get:bftrader.BfDailyInfo.lowerLimit)
  return lowerlimit_;
}
inline void BfDailyInfo::set_lowerlimit(double value) {
  
  lowerlimit_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfDailyInfo.lowerLimit)
}

// -------------------------------------------------------------------

// BfBidAskInfo

// optional double bidPrice = 1;
inline void BfBidAskInfo::clear_bidprice() {
  bidprice_ = 0;
}
inline double BfBidAskInfo::bidprice() const {
  // @@protoc_insertion_point(field_get:bftrader.BfBidAskInfo.bidPrice)
  return bidprice_;
}
inline void BfBidAskInfo::set_bidprice(double value) {
  
  bidprice_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfBidAskInfo.bidPrice)
}

// optional double askPrice = 2;
inline void BfBidAskInfo::clear_askprice() {
  askprice_ = 0;
}
inline double BfBidAskInfo::askprice() const {
  // @@protoc_insertion_point(field_get:bftrader.BfBidAskInfo.askPrice)
  return askprice_;
}
inline void BfBidAskInfo::set_askprice(double value) {
  
  askprice_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfBidAskInfo.askPrice)
}

// optional int32 bidVolume = 3;
inline void BfBidAskInfo::clear_bidvolume() {
  bidvolume_ = 0;
}
inline ::google::protobuf::int32 BfBidAskInfo::bidvolume() const {
  // @@protoc_insertion_point(field_get:bftrader.BfBidAskInfo.bidVolume)
  return bidvolume_;
}
inline void BfBidAskInfo::set_bidvolume(::google::protobuf::int32 value) {
  
  bidvolume_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfBidAskInfo.bidVolume)
}

// optional int32 askVolume = 4;
inline void BfBidAskInfo::clear_askvolume() {
  askvolume_ = 0;
}
inline ::google::protobuf::int32 BfBidAskInfo::askvolume() const {
  // @@protoc_insertion_point(field_get:bftrader.BfBidAskInfo.askVolume)
  return askvolume_;
}
inline void BfBidAskInfo::set_askvolume(::google::protobuf::int32 value) {
  
  askvolume_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfBidAskInfo.askVolume)
}

// -------------------------------------------------------------------

// BfOHLCInfo

// optional double openPrice = 1;
inline void BfOHLCInfo::clear_openprice() {
  openprice_ = 0;
}
inline double BfOHLCInfo::openprice() const {
  // @@protoc_insertion_point(field_get:bftrader.BfOHLCInfo.openPrice)
  return openprice_;
}
inline void BfOHLCInfo::set_openprice(double value) {
  
  openprice_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfOHLCInfo.openPrice)
}

// optional double highPrice = 2;
inline void BfOHLCInfo::clear_highprice() {
  highprice_ = 0;
}
inline double BfOHLCInfo::highprice() const {
  // @@protoc_insertion_point(field_get:bftrader.BfOHLCInfo.highPrice)
  return highprice_;
}
inline void BfOHLCInfo::set_highprice(double value) {
  
  highprice_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfOHLCInfo.highPrice)
}

// optional double lowPrice = 3;
inline void BfOHLCInfo::clear_lowprice() {
  lowprice_ = 0;
}
inline double BfOHLCInfo::lowprice() const {
  // @@protoc_insertion_point(field_get:bftrader.BfOHLCInfo.lowPrice)
  return lowprice_;
}
inline void BfOHLCInfo::set_lowprice(double value) {
  
  lowprice_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfOHLCInfo.lowPrice)
}

// optional double closePrice = 4;
inline void BfOHLCInfo::clear_closeprice() {
  closeprice_ = 0;
}
inline double BfOHLCInfo::closeprice() const {
  // @@protoc_insertion_point(field_get:bftrader.BfOHLCInfo.closePrice)
  return closeprice_;
}
inline void BfOHLCInfo::set_closeprice(double value) {
  
  closeprice_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfOHLCInfo.closePrice)
}

// -------------------------------------------------------------------

// BfTickData

// optional string symbol = 1;
inline void BfTickData::clear_symbol() {
  symbol_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& BfTickData::symbol() const {
  // @@protoc_insertion_point(field_get:bftrader.BfTickData.symbol)
  return symbol_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BfTickData::set_symbol(const ::std::string& value) {
  
  symbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfTickData.symbol)
}
inline void BfTickData::set_symbol(const char* value) {
  
  symbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfTickData.symbol)
}
inline void BfTickData::set_symbol(const char* value,
    size_t size) {
  
  symbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfTickData.symbol)
}
inline ::std::string* BfTickData::mutable_symbol() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfTickData.symbol)
  return symbol_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfTickData::release_symbol() {
  
  return symbol_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfTickData::unsafe_arena_release_symbol() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return symbol_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void BfTickData::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfTickData.symbol)
}
inline void BfTickData::unsafe_arena_set_allocated_symbol(
    ::std::string* symbol) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      symbol, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfTickData.symbol)
}

// optional string exchange = 2;
inline void BfTickData::clear_exchange() {
  exchange_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& BfTickData::exchange() const {
  // @@protoc_insertion_point(field_get:bftrader.BfTickData.exchange)
  return exchange_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BfTickData::set_exchange(const ::std::string& value) {
  
  exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfTickData.exchange)
}
inline void BfTickData::set_exchange(const char* value) {
  
  exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfTickData.exchange)
}
inline void BfTickData::set_exchange(const char* value,
    size_t size) {
  
  exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfTickData.exchange)
}
inline ::std::string* BfTickData::mutable_exchange() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfTickData.exchange)
  return exchange_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfTickData::release_exchange() {
  
  return exchange_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfTickData::unsafe_arena_release_exchange() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return exchange_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void BfTickData::set_allocated_exchange(::std::string* exchange) {
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfTickData.exchange)
}
inline void BfTickData::unsafe_arena_set_allocated_exchange(
    ::std::string* exchange) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      exchange, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfTickData.exchange)
}

// optional string date = 3;
inline void BfTickData::clear_date() {
  date_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& BfTickData::date() const {
  // @@protoc_insertion_point(field_get:bftrader.BfTickData.date)
  return date_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BfTickData::set_date(const ::std::string& value) {
  
  date_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfTickData.date)
}
inline void BfTickData::set_date(const char* value) {
  
  date_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfTickData.date)
}
inline void BfTickData::set_date(const char* value,
    size_t size) {
  
  date_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfTickData.date)
}
inline ::std::string* BfTickData::mutable_date() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfTickData.date)
  return date_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfTickData::release_date() {
  
  return date_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfTickData::unsafe_arena_release_date() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return date_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void BfTickData::set_allocated_date(::std::string* date) {
  if (date != NULL) {
    
  } else {
    
  }
  date_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), date,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfTickData.date)
}
inline void BfTickData::unsafe_arena_set_allocated_date(
    ::std::string* date) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (date != NULL) {
    
  } else {
    
  }
  date_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      date, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfTickData.date)
}

// optional string time = 4;
inline void BfTickData::clear_time() {
  time_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& BfTickData::time() const {
  // @@protoc_insertion_point(field_get:bftrader.BfTickData.time)
  return time_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BfTickData::set_time(const ::std::string& value) {
  
  time_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfTickData.time)
}
inline void BfTickData::set_time(const char* value) {
  
  time_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfTickData.time)
}
inline void BfTickData::set_time(const char* value,
    size_t size) {
  
  time_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfTickData.time)
}
inline ::std::string* BfTickData::mutable_time() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfTickData.time)
  return time_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfTickData::release_time() {
  
  return time_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfTickData::unsafe_arena_release_time() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return time_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void BfTickData::set_allocated_time(::std::string* time) {
  if (time != NULL) {
    
  } else {
    
  }
  time_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), time,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfTickData.time)
}
inline void BfTickData::unsafe_arena_set_allocated_time(
    ::std::string* time) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (time != NULL) {
    
  } else {
    
  }
  time_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      time, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfTickData.time)
}

// optional double lastPrice = 5;
inline void BfTickData::clear_lastprice() {
  lastprice_ = 0;
}
inline double BfTickData::lastprice() const {
  // @@protoc_insertion_point(field_get:bftrader.BfTickData.lastPrice)
  return lastprice_;
}
inline void BfTickData::set_lastprice(double value) {
  
  lastprice_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfTickData.lastPrice)
}

// optional int32 volume = 6;
inline void BfTickData::clear_volume() {
  volume_ = 0;
}
inline ::google::protobuf::int32 BfTickData::volume() const {
  // @@protoc_insertion_point(field_get:bftrader.BfTickData.volume)
  return volume_;
}
inline void BfTickData::set_volume(::google::protobuf::int32 value) {
  
  volume_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfTickData.volume)
}

// optional double openInterest = 7;
inline void BfTickData::clear_openinterest() {
  openinterest_ = 0;
}
inline double BfTickData::openinterest() const {
  // @@protoc_insertion_point(field_get:bftrader.BfTickData.openInterest)
  return openinterest_;
}
inline void BfTickData::set_openinterest(double value) {
  
  openinterest_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfTickData.openInterest)
}

// optional int32 lastVolume = 8;
inline void BfTickData::clear_lastvolume() {
  lastvolume_ = 0;
}
inline ::google::protobuf::int32 BfTickData::lastvolume() const {
  // @@protoc_insertion_point(field_get:bftrader.BfTickData.lastVolume)
  return lastvolume_;
}
inline void BfTickData::set_lastvolume(::google::protobuf::int32 value) {
  
  lastvolume_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfTickData.lastVolume)
}

// repeated .bftrader.BfBidAskInfo bidaskInfo = 9;
inline int BfTickData::bidaskinfo_size() const {
  return bidaskinfo_.size();
}
inline void BfTickData::clear_bidaskinfo() {
  bidaskinfo_.Clear();
}
inline const ::bftrader::BfBidAskInfo& BfTickData::bidaskinfo(int index) const {
  // @@protoc_insertion_point(field_get:bftrader.BfTickData.bidaskInfo)
  return bidaskinfo_.Get(index);
}
inline ::bftrader::BfBidAskInfo* BfTickData::mutable_bidaskinfo(int index) {
  // @@protoc_insertion_point(field_mutable:bftrader.BfTickData.bidaskInfo)
  return bidaskinfo_.Mutable(index);
}
inline ::bftrader::BfBidAskInfo* BfTickData::add_bidaskinfo() {
  // @@protoc_insertion_point(field_add:bftrader.BfTickData.bidaskInfo)
  return bidaskinfo_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::bftrader::BfBidAskInfo >*
BfTickData::mutable_bidaskinfo() {
  // @@protoc_insertion_point(field_mutable_list:bftrader.BfTickData.bidaskInfo)
  return &bidaskinfo_;
}
inline const ::google::protobuf::RepeatedPtrField< ::bftrader::BfBidAskInfo >&
BfTickData::bidaskinfo() const {
  // @@protoc_insertion_point(field_list:bftrader.BfTickData.bidaskInfo)
  return bidaskinfo_;
}

// optional .bftrader.BfDailyInfo dailyInfo = 10;
inline bool BfTickData::has_dailyinfo() const {
  return !_is_default_instance_ && dailyinfo_ != NULL;
}
inline void BfTickData::clear_dailyinfo() {
  if (GetArenaNoVirtual() == NULL && dailyinfo_ != NULL) delete dailyinfo_;
  dailyinfo_ = NULL;
}
inline const ::bftrader::BfDailyInfo& BfTickData::dailyinfo() const {
  // @@protoc_insertion_point(field_get:bftrader.BfTickData.dailyInfo)
  return dailyinfo_ != NULL ? *dailyinfo_ : *default_instance_->dailyinfo_;
}
inline ::bftrader::BfDailyInfo* BfTickData::mutable_dailyinfo() {
  
  if (dailyinfo_ == NULL) {
    _slow_mutable_dailyinfo();
  }
  // @@protoc_insertion_point(field_mutable:bftrader.BfTickData.dailyInfo)
  return dailyinfo_;
}
inline ::bftrader::BfDailyInfo* BfTickData::release_dailyinfo() {
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_dailyinfo();
  } else {
    ::bftrader::BfDailyInfo* temp = dailyinfo_;
    dailyinfo_ = NULL;
    return temp;
  }
}
inline  void BfTickData::set_allocated_dailyinfo(::bftrader::BfDailyInfo* dailyinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete dailyinfo_;
  }
  if (dailyinfo != NULL) {
    _slow_set_allocated_dailyinfo(message_arena, &dailyinfo);
  }
  dailyinfo_ = dailyinfo;
  if (dailyinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfTickData.dailyInfo)
}

// -------------------------------------------------------------------

// BfTickPackData

// optional string symbol = 1;
inline void BfTickPackData::clear_symbol() {
  symbol_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& BfTickPackData::symbol() const {
  // @@protoc_insertion_point(field_get:bftrader.BfTickPackData.symbol)
  return symbol_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BfTickPackData::set_symbol(const ::std::string& value) {
  
  symbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfTickPackData.symbol)
}
inline void BfTickPackData::set_symbol(const char* value) {
  
  symbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfTickPackData.symbol)
}
inline void BfTickPackData::set_symbol(const char* value,
    size_t size) {
  
  symbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfTickPackData.symbol)
}
inline ::std::string* BfTickPackData::mutable_symbol() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfTickPackData.symbol)
  return symbol_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfTickPackData::release_symbol() {
  
  return symbol_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfTickPackData::unsafe_arena_release_symbol() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return symbol_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void BfTickPackData::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfTickPackData.symbol)
}
inline void BfTickPackData::unsafe_arena_set_allocated_symbol(
    ::std::string* symbol) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      symbol, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfTickPackData.symbol)
}

// optional string exchange = 2;
inline void BfTickPackData::clear_exchange() {
  exchange_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& BfTickPackData::exchange() const {
  // @@protoc_insertion_point(field_get:bftrader.BfTickPackData.exchange)
  return exchange_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BfTickPackData::set_exchange(const ::std::string& value) {
  
  exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfTickPackData.exchange)
}
inline void BfTickPackData::set_exchange(const char* value) {
  
  exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfTickPackData.exchange)
}
inline void BfTickPackData::set_exchange(const char* value,
    size_t size) {
  
  exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfTickPackData.exchange)
}
inline ::std::string* BfTickPackData::mutable_exchange() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfTickPackData.exchange)
  return exchange_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfTickPackData::release_exchange() {
  
  return exchange_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfTickPackData::unsafe_arena_release_exchange() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return exchange_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void BfTickPackData::set_allocated_exchange(::std::string* exchange) {
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfTickPackData.exchange)
}
inline void BfTickPackData::unsafe_arena_set_allocated_exchange(
    ::std::string* exchange) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      exchange, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfTickPackData.exchange)
}

// optional string date = 3;
inline void BfTickPackData::clear_date() {
  date_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& BfTickPackData::date() const {
  // @@protoc_insertion_point(field_get:bftrader.BfTickPackData.date)
  return date_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BfTickPackData::set_date(const ::std::string& value) {
  
  date_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfTickPackData.date)
}
inline void BfTickPackData::set_date(const char* value) {
  
  date_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfTickPackData.date)
}
inline void BfTickPackData::set_date(const char* value,
    size_t size) {
  
  date_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfTickPackData.date)
}
inline ::std::string* BfTickPackData::mutable_date() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfTickPackData.date)
  return date_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfTickPackData::release_date() {
  
  return date_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfTickPackData::unsafe_arena_release_date() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return date_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void BfTickPackData::set_allocated_date(::std::string* date) {
  if (date != NULL) {
    
  } else {
    
  }
  date_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), date,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfTickPackData.date)
}
inline void BfTickPackData::unsafe_arena_set_allocated_date(
    ::std::string* date) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (date != NULL) {
    
  } else {
    
  }
  date_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      date, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfTickPackData.date)
}

// optional string time = 4;
inline void BfTickPackData::clear_time() {
  time_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& BfTickPackData::time() const {
  // @@protoc_insertion_point(field_get:bftrader.BfTickPackData.time)
  return time_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BfTickPackData::set_time(const ::std::string& value) {
  
  time_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfTickPackData.time)
}
inline void BfTickPackData::set_time(const char* value) {
  
  time_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfTickPackData.time)
}
inline void BfTickPackData::set_time(const char* value,
    size_t size) {
  
  time_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfTickPackData.time)
}
inline ::std::string* BfTickPackData::mutable_time() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfTickPackData.time)
  return time_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfTickPackData::release_time() {
  
  return time_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfTickPackData::unsafe_arena_release_time() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return time_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void BfTickPackData::set_allocated_time(::std::string* time) {
  if (time != NULL) {
    
  } else {
    
  }
  time_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), time,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfTickPackData.time)
}
inline void BfTickPackData::unsafe_arena_set_allocated_time(
    ::std::string* time) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (time != NULL) {
    
  } else {
    
  }
  time_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      time, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfTickPackData.time)
}

// repeated .bftrader.BfTickData ticks = 5;
inline int BfTickPackData::ticks_size() const {
  return ticks_.size();
}
inline void BfTickPackData::clear_ticks() {
  ticks_.Clear();
}
inline const ::bftrader::BfTickData& BfTickPackData::ticks(int index) const {
  // @@protoc_insertion_point(field_get:bftrader.BfTickPackData.ticks)
  return ticks_.Get(index);
}
inline ::bftrader::BfTickData* BfTickPackData::mutable_ticks(int index) {
  // @@protoc_insertion_point(field_mutable:bftrader.BfTickPackData.ticks)
  return ticks_.Mutable(index);
}
inline ::bftrader::BfTickData* BfTickPackData::add_ticks() {
  // @@protoc_insertion_point(field_add:bftrader.BfTickPackData.ticks)
  return ticks_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::bftrader::BfTickData >*
BfTickPackData::mutable_ticks() {
  // @@protoc_insertion_point(field_mutable_list:bftrader.BfTickPackData.ticks)
  return &ticks_;
}
inline const ::google::protobuf::RepeatedPtrField< ::bftrader::BfTickData >&
BfTickPackData::ticks() const {
  // @@protoc_insertion_point(field_list:bftrader.BfTickPackData.ticks)
  return ticks_;
}

// -------------------------------------------------------------------

// BfBarData

// optional string symbol = 1;
inline void BfBarData::clear_symbol() {
  symbol_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& BfBarData::symbol() const {
  // @@protoc_insertion_point(field_get:bftrader.BfBarData.symbol)
  return symbol_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BfBarData::set_symbol(const ::std::string& value) {
  
  symbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfBarData.symbol)
}
inline void BfBarData::set_symbol(const char* value) {
  
  symbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfBarData.symbol)
}
inline void BfBarData::set_symbol(const char* value,
    size_t size) {
  
  symbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfBarData.symbol)
}
inline ::std::string* BfBarData::mutable_symbol() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfBarData.symbol)
  return symbol_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfBarData::release_symbol() {
  
  return symbol_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfBarData::unsafe_arena_release_symbol() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return symbol_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void BfBarData::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfBarData.symbol)
}
inline void BfBarData::unsafe_arena_set_allocated_symbol(
    ::std::string* symbol) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      symbol, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfBarData.symbol)
}

// optional string exchange = 2;
inline void BfBarData::clear_exchange() {
  exchange_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& BfBarData::exchange() const {
  // @@protoc_insertion_point(field_get:bftrader.BfBarData.exchange)
  return exchange_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BfBarData::set_exchange(const ::std::string& value) {
  
  exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfBarData.exchange)
}
inline void BfBarData::set_exchange(const char* value) {
  
  exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfBarData.exchange)
}
inline void BfBarData::set_exchange(const char* value,
    size_t size) {
  
  exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfBarData.exchange)
}
inline ::std::string* BfBarData::mutable_exchange() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfBarData.exchange)
  return exchange_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfBarData::release_exchange() {
  
  return exchange_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfBarData::unsafe_arena_release_exchange() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return exchange_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void BfBarData::set_allocated_exchange(::std::string* exchange) {
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfBarData.exchange)
}
inline void BfBarData::unsafe_arena_set_allocated_exchange(
    ::std::string* exchange) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      exchange, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfBarData.exchange)
}

// optional .bftrader.BfPeriod period = 3;
inline void BfBarData::clear_period() {
  period_ = 0;
}
inline ::bftrader::BfPeriod BfBarData::period() const {
  // @@protoc_insertion_point(field_get:bftrader.BfBarData.period)
  return static_cast< ::bftrader::BfPeriod >(period_);
}
inline void BfBarData::set_period(::bftrader::BfPeriod value) {
  
  period_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfBarData.period)
}

// optional string date = 4;
inline void BfBarData::clear_date() {
  date_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& BfBarData::date() const {
  // @@protoc_insertion_point(field_get:bftrader.BfBarData.date)
  return date_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BfBarData::set_date(const ::std::string& value) {
  
  date_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfBarData.date)
}
inline void BfBarData::set_date(const char* value) {
  
  date_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfBarData.date)
}
inline void BfBarData::set_date(const char* value,
    size_t size) {
  
  date_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfBarData.date)
}
inline ::std::string* BfBarData::mutable_date() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfBarData.date)
  return date_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfBarData::release_date() {
  
  return date_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfBarData::unsafe_arena_release_date() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return date_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void BfBarData::set_allocated_date(::std::string* date) {
  if (date != NULL) {
    
  } else {
    
  }
  date_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), date,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfBarData.date)
}
inline void BfBarData::unsafe_arena_set_allocated_date(
    ::std::string* date) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (date != NULL) {
    
  } else {
    
  }
  date_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      date, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfBarData.date)
}

// optional string time = 5;
inline void BfBarData::clear_time() {
  time_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& BfBarData::time() const {
  // @@protoc_insertion_point(field_get:bftrader.BfBarData.time)
  return time_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BfBarData::set_time(const ::std::string& value) {
  
  time_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfBarData.time)
}
inline void BfBarData::set_time(const char* value) {
  
  time_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfBarData.time)
}
inline void BfBarData::set_time(const char* value,
    size_t size) {
  
  time_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfBarData.time)
}
inline ::std::string* BfBarData::mutable_time() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfBarData.time)
  return time_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfBarData::release_time() {
  
  return time_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfBarData::unsafe_arena_release_time() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return time_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void BfBarData::set_allocated_time(::std::string* time) {
  if (time != NULL) {
    
  } else {
    
  }
  time_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), time,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfBarData.time)
}
inline void BfBarData::unsafe_arena_set_allocated_time(
    ::std::string* time) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (time != NULL) {
    
  } else {
    
  }
  time_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      time, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfBarData.time)
}

// optional int32 volume = 6;
inline void BfBarData::clear_volume() {
  volume_ = 0;
}
inline ::google::protobuf::int32 BfBarData::volume() const {
  // @@protoc_insertion_point(field_get:bftrader.BfBarData.volume)
  return volume_;
}
inline void BfBarData::set_volume(::google::protobuf::int32 value) {
  
  volume_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfBarData.volume)
}

// optional double openInterest = 7;
inline void BfBarData::clear_openinterest() {
  openinterest_ = 0;
}
inline double BfBarData::openinterest() const {
  // @@protoc_insertion_point(field_get:bftrader.BfBarData.openInterest)
  return openinterest_;
}
inline void BfBarData::set_openinterest(double value) {
  
  openinterest_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfBarData.openInterest)
}

// optional int32 lastVolume = 8;
inline void BfBarData::clear_lastvolume() {
  lastvolume_ = 0;
}
inline ::google::protobuf::int32 BfBarData::lastvolume() const {
  // @@protoc_insertion_point(field_get:bftrader.BfBarData.lastVolume)
  return lastvolume_;
}
inline void BfBarData::set_lastvolume(::google::protobuf::int32 value) {
  
  lastvolume_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfBarData.lastVolume)
}

// optional .bftrader.BfOHLCInfo ohlcInfo = 9;
inline bool BfBarData::has_ohlcinfo() const {
  return !_is_default_instance_ && ohlcinfo_ != NULL;
}
inline void BfBarData::clear_ohlcinfo() {
  if (GetArenaNoVirtual() == NULL && ohlcinfo_ != NULL) delete ohlcinfo_;
  ohlcinfo_ = NULL;
}
inline const ::bftrader::BfOHLCInfo& BfBarData::ohlcinfo() const {
  // @@protoc_insertion_point(field_get:bftrader.BfBarData.ohlcInfo)
  return ohlcinfo_ != NULL ? *ohlcinfo_ : *default_instance_->ohlcinfo_;
}
inline ::bftrader::BfOHLCInfo* BfBarData::mutable_ohlcinfo() {
  
  if (ohlcinfo_ == NULL) {
    _slow_mutable_ohlcinfo();
  }
  // @@protoc_insertion_point(field_mutable:bftrader.BfBarData.ohlcInfo)
  return ohlcinfo_;
}
inline ::bftrader::BfOHLCInfo* BfBarData::release_ohlcinfo() {
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_ohlcinfo();
  } else {
    ::bftrader::BfOHLCInfo* temp = ohlcinfo_;
    ohlcinfo_ = NULL;
    return temp;
  }
}
inline  void BfBarData::set_allocated_ohlcinfo(::bftrader::BfOHLCInfo* ohlcinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ohlcinfo_;
  }
  if (ohlcinfo != NULL) {
    _slow_set_allocated_ohlcinfo(message_arena, &ohlcinfo);
  }
  ohlcinfo_ = ohlcinfo;
  if (ohlcinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfBarData.ohlcInfo)
}

// optional .bftrader.BfDailyInfo dailyInfo = 10;
inline bool BfBarData::has_dailyinfo() const {
  return !_is_default_instance_ && dailyinfo_ != NULL;
}
inline void BfBarData::clear_dailyinfo() {
  if (GetArenaNoVirtual() == NULL && dailyinfo_ != NULL) delete dailyinfo_;
  dailyinfo_ = NULL;
}
inline const ::bftrader::BfDailyInfo& BfBarData::dailyinfo() const {
  // @@protoc_insertion_point(field_get:bftrader.BfBarData.dailyInfo)
  return dailyinfo_ != NULL ? *dailyinfo_ : *default_instance_->dailyinfo_;
}
inline ::bftrader::BfDailyInfo* BfBarData::mutable_dailyinfo() {
  
  if (dailyinfo_ == NULL) {
    _slow_mutable_dailyinfo();
  }
  // @@protoc_insertion_point(field_mutable:bftrader.BfBarData.dailyInfo)
  return dailyinfo_;
}
inline ::bftrader::BfDailyInfo* BfBarData::release_dailyinfo() {
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_dailyinfo();
  } else {
    ::bftrader::BfDailyInfo* temp = dailyinfo_;
    dailyinfo_ = NULL;
    return temp;
  }
}
inline  void BfBarData::set_allocated_dailyinfo(::bftrader::BfDailyInfo* dailyinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete dailyinfo_;
  }
  if (dailyinfo != NULL) {
    _slow_set_allocated_dailyinfo(message_arena, &dailyinfo);
  }
  dailyinfo_ = dailyinfo;
  if (dailyinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfBarData.dailyInfo)
}

// -------------------------------------------------------------------

// BfTradeData

// optional string symbol = 1;
inline void BfTradeData::clear_symbol() {
  symbol_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& BfTradeData::symbol() const {
  // @@protoc_insertion_point(field_get:bftrader.BfTradeData.symbol)
  return symbol_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BfTradeData::set_symbol(const ::std::string& value) {
  
  symbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfTradeData.symbol)
}
inline void BfTradeData::set_symbol(const char* value) {
  
  symbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfTradeData.symbol)
}
inline void BfTradeData::set_symbol(const char* value,
    size_t size) {
  
  symbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfTradeData.symbol)
}
inline ::std::string* BfTradeData::mutable_symbol() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfTradeData.symbol)
  return symbol_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfTradeData::release_symbol() {
  
  return symbol_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfTradeData::unsafe_arena_release_symbol() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return symbol_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void BfTradeData::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfTradeData.symbol)
}
inline void BfTradeData::unsafe_arena_set_allocated_symbol(
    ::std::string* symbol) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      symbol, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfTradeData.symbol)
}

// optional string exchange = 2;
inline void BfTradeData::clear_exchange() {
  exchange_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& BfTradeData::exchange() const {
  // @@protoc_insertion_point(field_get:bftrader.BfTradeData.exchange)
  return exchange_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BfTradeData::set_exchange(const ::std::string& value) {
  
  exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfTradeData.exchange)
}
inline void BfTradeData::set_exchange(const char* value) {
  
  exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfTradeData.exchange)
}
inline void BfTradeData::set_exchange(const char* value,
    size_t size) {
  
  exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfTradeData.exchange)
}
inline ::std::string* BfTradeData::mutable_exchange() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfTradeData.exchange)
  return exchange_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfTradeData::release_exchange() {
  
  return exchange_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfTradeData::unsafe_arena_release_exchange() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return exchange_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void BfTradeData::set_allocated_exchange(::std::string* exchange) {
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfTradeData.exchange)
}
inline void BfTradeData::unsafe_arena_set_allocated_exchange(
    ::std::string* exchange) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      exchange, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfTradeData.exchange)
}

// optional int32 tradeId = 3;
inline void BfTradeData::clear_tradeid() {
  tradeid_ = 0;
}
inline ::google::protobuf::int32 BfTradeData::tradeid() const {
  // @@protoc_insertion_point(field_get:bftrader.BfTradeData.tradeId)
  return tradeid_;
}
inline void BfTradeData::set_tradeid(::google::protobuf::int32 value) {
  
  tradeid_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfTradeData.tradeId)
}

// optional int32 orderId = 4;
inline void BfTradeData::clear_orderid() {
  orderid_ = 0;
}
inline ::google::protobuf::int32 BfTradeData::orderid() const {
  // @@protoc_insertion_point(field_get:bftrader.BfTradeData.orderId)
  return orderid_;
}
inline void BfTradeData::set_orderid(::google::protobuf::int32 value) {
  
  orderid_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfTradeData.orderId)
}

// optional .bftrader.BfDirection direction = 5;
inline void BfTradeData::clear_direction() {
  direction_ = 0;
}
inline ::bftrader::BfDirection BfTradeData::direction() const {
  // @@protoc_insertion_point(field_get:bftrader.BfTradeData.direction)
  return static_cast< ::bftrader::BfDirection >(direction_);
}
inline void BfTradeData::set_direction(::bftrader::BfDirection value) {
  
  direction_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfTradeData.direction)
}

// optional .bftrader.BfOffset offset = 6;
inline void BfTradeData::clear_offset() {
  offset_ = 0;
}
inline ::bftrader::BfOffset BfTradeData::offset() const {
  // @@protoc_insertion_point(field_get:bftrader.BfTradeData.offset)
  return static_cast< ::bftrader::BfOffset >(offset_);
}
inline void BfTradeData::set_offset(::bftrader::BfOffset value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfTradeData.offset)
}

// optional double price = 7;
inline void BfTradeData::clear_price() {
  price_ = 0;
}
inline double BfTradeData::price() const {
  // @@protoc_insertion_point(field_get:bftrader.BfTradeData.price)
  return price_;
}
inline void BfTradeData::set_price(double value) {
  
  price_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfTradeData.price)
}

// optional int32 volume = 8;
inline void BfTradeData::clear_volume() {
  volume_ = 0;
}
inline ::google::protobuf::int32 BfTradeData::volume() const {
  // @@protoc_insertion_point(field_get:bftrader.BfTradeData.volume)
  return volume_;
}
inline void BfTradeData::set_volume(::google::protobuf::int32 value) {
  
  volume_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfTradeData.volume)
}

// optional string tradeDate = 9;
inline void BfTradeData::clear_tradedate() {
  tradedate_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& BfTradeData::tradedate() const {
  // @@protoc_insertion_point(field_get:bftrader.BfTradeData.tradeDate)
  return tradedate_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BfTradeData::set_tradedate(const ::std::string& value) {
  
  tradedate_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfTradeData.tradeDate)
}
inline void BfTradeData::set_tradedate(const char* value) {
  
  tradedate_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfTradeData.tradeDate)
}
inline void BfTradeData::set_tradedate(const char* value,
    size_t size) {
  
  tradedate_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfTradeData.tradeDate)
}
inline ::std::string* BfTradeData::mutable_tradedate() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfTradeData.tradeDate)
  return tradedate_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfTradeData::release_tradedate() {
  
  return tradedate_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfTradeData::unsafe_arena_release_tradedate() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return tradedate_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void BfTradeData::set_allocated_tradedate(::std::string* tradedate) {
  if (tradedate != NULL) {
    
  } else {
    
  }
  tradedate_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tradedate,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfTradeData.tradeDate)
}
inline void BfTradeData::unsafe_arena_set_allocated_tradedate(
    ::std::string* tradedate) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (tradedate != NULL) {
    
  } else {
    
  }
  tradedate_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      tradedate, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfTradeData.tradeDate)
}

// optional string tradeTime = 10;
inline void BfTradeData::clear_tradetime() {
  tradetime_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& BfTradeData::tradetime() const {
  // @@protoc_insertion_point(field_get:bftrader.BfTradeData.tradeTime)
  return tradetime_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BfTradeData::set_tradetime(const ::std::string& value) {
  
  tradetime_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfTradeData.tradeTime)
}
inline void BfTradeData::set_tradetime(const char* value) {
  
  tradetime_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfTradeData.tradeTime)
}
inline void BfTradeData::set_tradetime(const char* value,
    size_t size) {
  
  tradetime_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfTradeData.tradeTime)
}
inline ::std::string* BfTradeData::mutable_tradetime() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfTradeData.tradeTime)
  return tradetime_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfTradeData::release_tradetime() {
  
  return tradetime_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfTradeData::unsafe_arena_release_tradetime() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return tradetime_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void BfTradeData::set_allocated_tradetime(::std::string* tradetime) {
  if (tradetime != NULL) {
    
  } else {
    
  }
  tradetime_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tradetime,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfTradeData.tradeTime)
}
inline void BfTradeData::unsafe_arena_set_allocated_tradetime(
    ::std::string* tradetime) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (tradetime != NULL) {
    
  } else {
    
  }
  tradetime_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      tradetime, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfTradeData.tradeTime)
}

// -------------------------------------------------------------------

// BfOrderData

// optional string symbol = 1;
inline void BfOrderData::clear_symbol() {
  symbol_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& BfOrderData::symbol() const {
  // @@protoc_insertion_point(field_get:bftrader.BfOrderData.symbol)
  return symbol_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BfOrderData::set_symbol(const ::std::string& value) {
  
  symbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfOrderData.symbol)
}
inline void BfOrderData::set_symbol(const char* value) {
  
  symbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfOrderData.symbol)
}
inline void BfOrderData::set_symbol(const char* value,
    size_t size) {
  
  symbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfOrderData.symbol)
}
inline ::std::string* BfOrderData::mutable_symbol() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfOrderData.symbol)
  return symbol_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfOrderData::release_symbol() {
  
  return symbol_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfOrderData::unsafe_arena_release_symbol() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return symbol_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void BfOrderData::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfOrderData.symbol)
}
inline void BfOrderData::unsafe_arena_set_allocated_symbol(
    ::std::string* symbol) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      symbol, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfOrderData.symbol)
}

// optional string exchange = 2;
inline void BfOrderData::clear_exchange() {
  exchange_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& BfOrderData::exchange() const {
  // @@protoc_insertion_point(field_get:bftrader.BfOrderData.exchange)
  return exchange_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BfOrderData::set_exchange(const ::std::string& value) {
  
  exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfOrderData.exchange)
}
inline void BfOrderData::set_exchange(const char* value) {
  
  exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfOrderData.exchange)
}
inline void BfOrderData::set_exchange(const char* value,
    size_t size) {
  
  exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfOrderData.exchange)
}
inline ::std::string* BfOrderData::mutable_exchange() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfOrderData.exchange)
  return exchange_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfOrderData::release_exchange() {
  
  return exchange_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfOrderData::unsafe_arena_release_exchange() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return exchange_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void BfOrderData::set_allocated_exchange(::std::string* exchange) {
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfOrderData.exchange)
}
inline void BfOrderData::unsafe_arena_set_allocated_exchange(
    ::std::string* exchange) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      exchange, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfOrderData.exchange)
}

// optional int32 orderId = 3;
inline void BfOrderData::clear_orderid() {
  orderid_ = 0;
}
inline ::google::protobuf::int32 BfOrderData::orderid() const {
  // @@protoc_insertion_point(field_get:bftrader.BfOrderData.orderId)
  return orderid_;
}
inline void BfOrderData::set_orderid(::google::protobuf::int32 value) {
  
  orderid_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfOrderData.orderId)
}

// optional .bftrader.BfDirection direction = 4;
inline void BfOrderData::clear_direction() {
  direction_ = 0;
}
inline ::bftrader::BfDirection BfOrderData::direction() const {
  // @@protoc_insertion_point(field_get:bftrader.BfOrderData.direction)
  return static_cast< ::bftrader::BfDirection >(direction_);
}
inline void BfOrderData::set_direction(::bftrader::BfDirection value) {
  
  direction_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfOrderData.direction)
}

// optional .bftrader.BfOffset offset = 5;
inline void BfOrderData::clear_offset() {
  offset_ = 0;
}
inline ::bftrader::BfOffset BfOrderData::offset() const {
  // @@protoc_insertion_point(field_get:bftrader.BfOrderData.offset)
  return static_cast< ::bftrader::BfOffset >(offset_);
}
inline void BfOrderData::set_offset(::bftrader::BfOffset value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfOrderData.offset)
}

// optional double price = 6;
inline void BfOrderData::clear_price() {
  price_ = 0;
}
inline double BfOrderData::price() const {
  // @@protoc_insertion_point(field_get:bftrader.BfOrderData.price)
  return price_;
}
inline void BfOrderData::set_price(double value) {
  
  price_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfOrderData.price)
}

// optional int32 totalVolume = 7;
inline void BfOrderData::clear_totalvolume() {
  totalvolume_ = 0;
}
inline ::google::protobuf::int32 BfOrderData::totalvolume() const {
  // @@protoc_insertion_point(field_get:bftrader.BfOrderData.totalVolume)
  return totalvolume_;
}
inline void BfOrderData::set_totalvolume(::google::protobuf::int32 value) {
  
  totalvolume_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfOrderData.totalVolume)
}

// optional int32 tradedVolume = 8;
inline void BfOrderData::clear_tradedvolume() {
  tradedvolume_ = 0;
}
inline ::google::protobuf::int32 BfOrderData::tradedvolume() const {
  // @@protoc_insertion_point(field_get:bftrader.BfOrderData.tradedVolume)
  return tradedvolume_;
}
inline void BfOrderData::set_tradedvolume(::google::protobuf::int32 value) {
  
  tradedvolume_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfOrderData.tradedVolume)
}

// optional .bftrader.BfStatus status = 9;
inline void BfOrderData::clear_status() {
  status_ = 0;
}
inline ::bftrader::BfStatus BfOrderData::status() const {
  // @@protoc_insertion_point(field_get:bftrader.BfOrderData.status)
  return static_cast< ::bftrader::BfStatus >(status_);
}
inline void BfOrderData::set_status(::bftrader::BfStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfOrderData.status)
}

// optional string insertDate = 10;
inline void BfOrderData::clear_insertdate() {
  insertdate_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& BfOrderData::insertdate() const {
  // @@protoc_insertion_point(field_get:bftrader.BfOrderData.insertDate)
  return insertdate_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BfOrderData::set_insertdate(const ::std::string& value) {
  
  insertdate_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfOrderData.insertDate)
}
inline void BfOrderData::set_insertdate(const char* value) {
  
  insertdate_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfOrderData.insertDate)
}
inline void BfOrderData::set_insertdate(const char* value,
    size_t size) {
  
  insertdate_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfOrderData.insertDate)
}
inline ::std::string* BfOrderData::mutable_insertdate() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfOrderData.insertDate)
  return insertdate_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfOrderData::release_insertdate() {
  
  return insertdate_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfOrderData::unsafe_arena_release_insertdate() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return insertdate_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void BfOrderData::set_allocated_insertdate(::std::string* insertdate) {
  if (insertdate != NULL) {
    
  } else {
    
  }
  insertdate_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), insertdate,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfOrderData.insertDate)
}
inline void BfOrderData::unsafe_arena_set_allocated_insertdate(
    ::std::string* insertdate) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (insertdate != NULL) {
    
  } else {
    
  }
  insertdate_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      insertdate, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfOrderData.insertDate)
}

// optional string insertTime = 11;
inline void BfOrderData::clear_inserttime() {
  inserttime_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& BfOrderData::inserttime() const {
  // @@protoc_insertion_point(field_get:bftrader.BfOrderData.insertTime)
  return inserttime_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BfOrderData::set_inserttime(const ::std::string& value) {
  
  inserttime_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfOrderData.insertTime)
}
inline void BfOrderData::set_inserttime(const char* value) {
  
  inserttime_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfOrderData.insertTime)
}
inline void BfOrderData::set_inserttime(const char* value,
    size_t size) {
  
  inserttime_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfOrderData.insertTime)
}
inline ::std::string* BfOrderData::mutable_inserttime() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfOrderData.insertTime)
  return inserttime_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfOrderData::release_inserttime() {
  
  return inserttime_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfOrderData::unsafe_arena_release_inserttime() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return inserttime_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void BfOrderData::set_allocated_inserttime(::std::string* inserttime) {
  if (inserttime != NULL) {
    
  } else {
    
  }
  inserttime_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), inserttime,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfOrderData.insertTime)
}
inline void BfOrderData::unsafe_arena_set_allocated_inserttime(
    ::std::string* inserttime) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (inserttime != NULL) {
    
  } else {
    
  }
  inserttime_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      inserttime, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfOrderData.insertTime)
}

// optional string cancelTime = 12;
inline void BfOrderData::clear_canceltime() {
  canceltime_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& BfOrderData::canceltime() const {
  // @@protoc_insertion_point(field_get:bftrader.BfOrderData.cancelTime)
  return canceltime_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BfOrderData::set_canceltime(const ::std::string& value) {
  
  canceltime_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfOrderData.cancelTime)
}
inline void BfOrderData::set_canceltime(const char* value) {
  
  canceltime_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfOrderData.cancelTime)
}
inline void BfOrderData::set_canceltime(const char* value,
    size_t size) {
  
  canceltime_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfOrderData.cancelTime)
}
inline ::std::string* BfOrderData::mutable_canceltime() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfOrderData.cancelTime)
  return canceltime_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfOrderData::release_canceltime() {
  
  return canceltime_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfOrderData::unsafe_arena_release_canceltime() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return canceltime_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void BfOrderData::set_allocated_canceltime(::std::string* canceltime) {
  if (canceltime != NULL) {
    
  } else {
    
  }
  canceltime_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), canceltime,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfOrderData.cancelTime)
}
inline void BfOrderData::unsafe_arena_set_allocated_canceltime(
    ::std::string* canceltime) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (canceltime != NULL) {
    
  } else {
    
  }
  canceltime_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      canceltime, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfOrderData.cancelTime)
}

// optional int32 frontID = 13;
inline void BfOrderData::clear_frontid() {
  frontid_ = 0;
}
inline ::google::protobuf::int32 BfOrderData::frontid() const {
  // @@protoc_insertion_point(field_get:bftrader.BfOrderData.frontID)
  return frontid_;
}
inline void BfOrderData::set_frontid(::google::protobuf::int32 value) {
  
  frontid_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfOrderData.frontID)
}

// optional int32 sessionID = 14;
inline void BfOrderData::clear_sessionid() {
  sessionid_ = 0;
}
inline ::google::protobuf::int32 BfOrderData::sessionid() const {
  // @@protoc_insertion_point(field_get:bftrader.BfOrderData.sessionID)
  return sessionid_;
}
inline void BfOrderData::set_sessionid(::google::protobuf::int32 value) {
  
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfOrderData.sessionID)
}

// -------------------------------------------------------------------

// BfPositionData

// optional string symbol = 1;
inline void BfPositionData::clear_symbol() {
  symbol_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& BfPositionData::symbol() const {
  // @@protoc_insertion_point(field_get:bftrader.BfPositionData.symbol)
  return symbol_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BfPositionData::set_symbol(const ::std::string& value) {
  
  symbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfPositionData.symbol)
}
inline void BfPositionData::set_symbol(const char* value) {
  
  symbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfPositionData.symbol)
}
inline void BfPositionData::set_symbol(const char* value,
    size_t size) {
  
  symbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfPositionData.symbol)
}
inline ::std::string* BfPositionData::mutable_symbol() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfPositionData.symbol)
  return symbol_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfPositionData::release_symbol() {
  
  return symbol_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfPositionData::unsafe_arena_release_symbol() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return symbol_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void BfPositionData::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfPositionData.symbol)
}
inline void BfPositionData::unsafe_arena_set_allocated_symbol(
    ::std::string* symbol) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      symbol, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfPositionData.symbol)
}

// optional string exchange = 2;
inline void BfPositionData::clear_exchange() {
  exchange_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& BfPositionData::exchange() const {
  // @@protoc_insertion_point(field_get:bftrader.BfPositionData.exchange)
  return exchange_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BfPositionData::set_exchange(const ::std::string& value) {
  
  exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfPositionData.exchange)
}
inline void BfPositionData::set_exchange(const char* value) {
  
  exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfPositionData.exchange)
}
inline void BfPositionData::set_exchange(const char* value,
    size_t size) {
  
  exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfPositionData.exchange)
}
inline ::std::string* BfPositionData::mutable_exchange() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfPositionData.exchange)
  return exchange_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfPositionData::release_exchange() {
  
  return exchange_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfPositionData::unsafe_arena_release_exchange() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return exchange_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void BfPositionData::set_allocated_exchange(::std::string* exchange) {
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfPositionData.exchange)
}
inline void BfPositionData::unsafe_arena_set_allocated_exchange(
    ::std::string* exchange) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      exchange, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfPositionData.exchange)
}

// optional .bftrader.BfDirection direction = 3;
inline void BfPositionData::clear_direction() {
  direction_ = 0;
}
inline ::bftrader::BfDirection BfPositionData::direction() const {
  // @@protoc_insertion_point(field_get:bftrader.BfPositionData.direction)
  return static_cast< ::bftrader::BfDirection >(direction_);
}
inline void BfPositionData::set_direction(::bftrader::BfDirection value) {
  
  direction_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfPositionData.direction)
}

// optional int32 position = 4;
inline void BfPositionData::clear_position() {
  position_ = 0;
}
inline ::google::protobuf::int32 BfPositionData::position() const {
  // @@protoc_insertion_point(field_get:bftrader.BfPositionData.position)
  return position_;
}
inline void BfPositionData::set_position(::google::protobuf::int32 value) {
  
  position_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfPositionData.position)
}

// optional int32 frozen = 5;
inline void BfPositionData::clear_frozen() {
  frozen_ = 0;
}
inline ::google::protobuf::int32 BfPositionData::frozen() const {
  // @@protoc_insertion_point(field_get:bftrader.BfPositionData.frozen)
  return frozen_;
}
inline void BfPositionData::set_frozen(::google::protobuf::int32 value) {
  
  frozen_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfPositionData.frozen)
}

// optional double price = 6;
inline void BfPositionData::clear_price() {
  price_ = 0;
}
inline double BfPositionData::price() const {
  // @@protoc_insertion_point(field_get:bftrader.BfPositionData.price)
  return price_;
}
inline void BfPositionData::set_price(double value) {
  
  price_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfPositionData.price)
}

// optional int32 ydPosition = 7;
inline void BfPositionData::clear_ydposition() {
  ydposition_ = 0;
}
inline ::google::protobuf::int32 BfPositionData::ydposition() const {
  // @@protoc_insertion_point(field_get:bftrader.BfPositionData.ydPosition)
  return ydposition_;
}
inline void BfPositionData::set_ydposition(::google::protobuf::int32 value) {
  
  ydposition_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfPositionData.ydPosition)
}

// -------------------------------------------------------------------

// BfAccountData

// optional string accountId = 1;
inline void BfAccountData::clear_accountid() {
  accountid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& BfAccountData::accountid() const {
  // @@protoc_insertion_point(field_get:bftrader.BfAccountData.accountId)
  return accountid_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BfAccountData::set_accountid(const ::std::string& value) {
  
  accountid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfAccountData.accountId)
}
inline void BfAccountData::set_accountid(const char* value) {
  
  accountid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfAccountData.accountId)
}
inline void BfAccountData::set_accountid(const char* value,
    size_t size) {
  
  accountid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfAccountData.accountId)
}
inline ::std::string* BfAccountData::mutable_accountid() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfAccountData.accountId)
  return accountid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfAccountData::release_accountid() {
  
  return accountid_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfAccountData::unsafe_arena_release_accountid() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return accountid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void BfAccountData::set_allocated_accountid(::std::string* accountid) {
  if (accountid != NULL) {
    
  } else {
    
  }
  accountid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), accountid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfAccountData.accountId)
}
inline void BfAccountData::unsafe_arena_set_allocated_accountid(
    ::std::string* accountid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (accountid != NULL) {
    
  } else {
    
  }
  accountid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      accountid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfAccountData.accountId)
}

// optional double preBalance = 2;
inline void BfAccountData::clear_prebalance() {
  prebalance_ = 0;
}
inline double BfAccountData::prebalance() const {
  // @@protoc_insertion_point(field_get:bftrader.BfAccountData.preBalance)
  return prebalance_;
}
inline void BfAccountData::set_prebalance(double value) {
  
  prebalance_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfAccountData.preBalance)
}

// optional double balance = 3;
inline void BfAccountData::clear_balance() {
  balance_ = 0;
}
inline double BfAccountData::balance() const {
  // @@protoc_insertion_point(field_get:bftrader.BfAccountData.balance)
  return balance_;
}
inline void BfAccountData::set_balance(double value) {
  
  balance_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfAccountData.balance)
}

// optional double available = 4;
inline void BfAccountData::clear_available() {
  available_ = 0;
}
inline double BfAccountData::available() const {
  // @@protoc_insertion_point(field_get:bftrader.BfAccountData.available)
  return available_;
}
inline void BfAccountData::set_available(double value) {
  
  available_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfAccountData.available)
}

// optional double commission = 5;
inline void BfAccountData::clear_commission() {
  commission_ = 0;
}
inline double BfAccountData::commission() const {
  // @@protoc_insertion_point(field_get:bftrader.BfAccountData.commission)
  return commission_;
}
inline void BfAccountData::set_commission(double value) {
  
  commission_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfAccountData.commission)
}

// optional double frozenMargin = 6;
inline void BfAccountData::clear_frozenmargin() {
  frozenmargin_ = 0;
}
inline double BfAccountData::frozenmargin() const {
  // @@protoc_insertion_point(field_get:bftrader.BfAccountData.frozenMargin)
  return frozenmargin_;
}
inline void BfAccountData::set_frozenmargin(double value) {
  
  frozenmargin_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfAccountData.frozenMargin)
}

// optional double closeProfit = 7;
inline void BfAccountData::clear_closeprofit() {
  closeprofit_ = 0;
}
inline double BfAccountData::closeprofit() const {
  // @@protoc_insertion_point(field_get:bftrader.BfAccountData.closeProfit)
  return closeprofit_;
}
inline void BfAccountData::set_closeprofit(double value) {
  
  closeprofit_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfAccountData.closeProfit)
}

// optional double positionProfit = 8;
inline void BfAccountData::clear_positionprofit() {
  positionprofit_ = 0;
}
inline double BfAccountData::positionprofit() const {
  // @@protoc_insertion_point(field_get:bftrader.BfAccountData.positionProfit)
  return positionprofit_;
}
inline void BfAccountData::set_positionprofit(double value) {
  
  positionprofit_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfAccountData.positionProfit)
}

// -------------------------------------------------------------------

// BfErrorData

// optional string errorId = 1;
inline void BfErrorData::clear_errorid() {
  errorid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& BfErrorData::errorid() const {
  // @@protoc_insertion_point(field_get:bftrader.BfErrorData.errorId)
  return errorid_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BfErrorData::set_errorid(const ::std::string& value) {
  
  errorid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfErrorData.errorId)
}
inline void BfErrorData::set_errorid(const char* value) {
  
  errorid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfErrorData.errorId)
}
inline void BfErrorData::set_errorid(const char* value,
    size_t size) {
  
  errorid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfErrorData.errorId)
}
inline ::std::string* BfErrorData::mutable_errorid() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfErrorData.errorId)
  return errorid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfErrorData::release_errorid() {
  
  return errorid_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfErrorData::unsafe_arena_release_errorid() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return errorid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void BfErrorData::set_allocated_errorid(::std::string* errorid) {
  if (errorid != NULL) {
    
  } else {
    
  }
  errorid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errorid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfErrorData.errorId)
}
inline void BfErrorData::unsafe_arena_set_allocated_errorid(
    ::std::string* errorid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (errorid != NULL) {
    
  } else {
    
  }
  errorid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      errorid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfErrorData.errorId)
}

// optional string errorMsg = 2;
inline void BfErrorData::clear_errormsg() {
  errormsg_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& BfErrorData::errormsg() const {
  // @@protoc_insertion_point(field_get:bftrader.BfErrorData.errorMsg)
  return errormsg_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BfErrorData::set_errormsg(const ::std::string& value) {
  
  errormsg_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfErrorData.errorMsg)
}
inline void BfErrorData::set_errormsg(const char* value) {
  
  errormsg_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfErrorData.errorMsg)
}
inline void BfErrorData::set_errormsg(const char* value,
    size_t size) {
  
  errormsg_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfErrorData.errorMsg)
}
inline ::std::string* BfErrorData::mutable_errormsg() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfErrorData.errorMsg)
  return errormsg_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfErrorData::release_errormsg() {
  
  return errormsg_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfErrorData::unsafe_arena_release_errormsg() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return errormsg_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void BfErrorData::set_allocated_errormsg(::std::string* errormsg) {
  if (errormsg != NULL) {
    
  } else {
    
  }
  errormsg_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errormsg,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfErrorData.errorMsg)
}
inline void BfErrorData::unsafe_arena_set_allocated_errormsg(
    ::std::string* errormsg) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (errormsg != NULL) {
    
  } else {
    
  }
  errormsg_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      errormsg, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfErrorData.errorMsg)
}

// optional string additionalInfo = 3;
inline void BfErrorData::clear_additionalinfo() {
  additionalinfo_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& BfErrorData::additionalinfo() const {
  // @@protoc_insertion_point(field_get:bftrader.BfErrorData.additionalInfo)
  return additionalinfo_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BfErrorData::set_additionalinfo(const ::std::string& value) {
  
  additionalinfo_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfErrorData.additionalInfo)
}
inline void BfErrorData::set_additionalinfo(const char* value) {
  
  additionalinfo_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfErrorData.additionalInfo)
}
inline void BfErrorData::set_additionalinfo(const char* value,
    size_t size) {
  
  additionalinfo_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfErrorData.additionalInfo)
}
inline ::std::string* BfErrorData::mutable_additionalinfo() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfErrorData.additionalInfo)
  return additionalinfo_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfErrorData::release_additionalinfo() {
  
  return additionalinfo_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfErrorData::unsafe_arena_release_additionalinfo() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return additionalinfo_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void BfErrorData::set_allocated_additionalinfo(::std::string* additionalinfo) {
  if (additionalinfo != NULL) {
    
  } else {
    
  }
  additionalinfo_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), additionalinfo,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfErrorData.additionalInfo)
}
inline void BfErrorData::unsafe_arena_set_allocated_additionalinfo(
    ::std::string* additionalinfo) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (additionalinfo != NULL) {
    
  } else {
    
  }
  additionalinfo_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      additionalinfo, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfErrorData.additionalInfo)
}

// -------------------------------------------------------------------

// BfLogData

// optional string logTime = 1;
inline void BfLogData::clear_logtime() {
  logtime_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& BfLogData::logtime() const {
  // @@protoc_insertion_point(field_get:bftrader.BfLogData.logTime)
  return logtime_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BfLogData::set_logtime(const ::std::string& value) {
  
  logtime_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfLogData.logTime)
}
inline void BfLogData::set_logtime(const char* value) {
  
  logtime_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfLogData.logTime)
}
inline void BfLogData::set_logtime(const char* value,
    size_t size) {
  
  logtime_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfLogData.logTime)
}
inline ::std::string* BfLogData::mutable_logtime() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfLogData.logTime)
  return logtime_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfLogData::release_logtime() {
  
  return logtime_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfLogData::unsafe_arena_release_logtime() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return logtime_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void BfLogData::set_allocated_logtime(::std::string* logtime) {
  if (logtime != NULL) {
    
  } else {
    
  }
  logtime_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), logtime,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfLogData.logTime)
}
inline void BfLogData::unsafe_arena_set_allocated_logtime(
    ::std::string* logtime) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (logtime != NULL) {
    
  } else {
    
  }
  logtime_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      logtime, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfLogData.logTime)
}

// optional string logContent = 2;
inline void BfLogData::clear_logcontent() {
  logcontent_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& BfLogData::logcontent() const {
  // @@protoc_insertion_point(field_get:bftrader.BfLogData.logContent)
  return logcontent_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BfLogData::set_logcontent(const ::std::string& value) {
  
  logcontent_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfLogData.logContent)
}
inline void BfLogData::set_logcontent(const char* value) {
  
  logcontent_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfLogData.logContent)
}
inline void BfLogData::set_logcontent(const char* value,
    size_t size) {
  
  logcontent_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfLogData.logContent)
}
inline ::std::string* BfLogData::mutable_logcontent() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfLogData.logContent)
  return logcontent_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfLogData::release_logcontent() {
  
  return logcontent_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfLogData::unsafe_arena_release_logcontent() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return logcontent_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void BfLogData::set_allocated_logcontent(::std::string* logcontent) {
  if (logcontent != NULL) {
    
  } else {
    
  }
  logcontent_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), logcontent,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfLogData.logContent)
}
inline void BfLogData::unsafe_arena_set_allocated_logcontent(
    ::std::string* logcontent) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (logcontent != NULL) {
    
  } else {
    
  }
  logcontent_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      logcontent, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfLogData.logContent)
}

// -------------------------------------------------------------------

// BfContractData

// optional string symbol = 1;
inline void BfContractData::clear_symbol() {
  symbol_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& BfContractData::symbol() const {
  // @@protoc_insertion_point(field_get:bftrader.BfContractData.symbol)
  return symbol_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BfContractData::set_symbol(const ::std::string& value) {
  
  symbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfContractData.symbol)
}
inline void BfContractData::set_symbol(const char* value) {
  
  symbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfContractData.symbol)
}
inline void BfContractData::set_symbol(const char* value,
    size_t size) {
  
  symbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfContractData.symbol)
}
inline ::std::string* BfContractData::mutable_symbol() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfContractData.symbol)
  return symbol_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfContractData::release_symbol() {
  
  return symbol_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfContractData::unsafe_arena_release_symbol() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return symbol_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void BfContractData::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfContractData.symbol)
}
inline void BfContractData::unsafe_arena_set_allocated_symbol(
    ::std::string* symbol) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      symbol, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfContractData.symbol)
}

// optional string exchange = 2;
inline void BfContractData::clear_exchange() {
  exchange_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& BfContractData::exchange() const {
  // @@protoc_insertion_point(field_get:bftrader.BfContractData.exchange)
  return exchange_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BfContractData::set_exchange(const ::std::string& value) {
  
  exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfContractData.exchange)
}
inline void BfContractData::set_exchange(const char* value) {
  
  exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfContractData.exchange)
}
inline void BfContractData::set_exchange(const char* value,
    size_t size) {
  
  exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfContractData.exchange)
}
inline ::std::string* BfContractData::mutable_exchange() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfContractData.exchange)
  return exchange_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfContractData::release_exchange() {
  
  return exchange_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfContractData::unsafe_arena_release_exchange() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return exchange_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void BfContractData::set_allocated_exchange(::std::string* exchange) {
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfContractData.exchange)
}
inline void BfContractData::unsafe_arena_set_allocated_exchange(
    ::std::string* exchange) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      exchange, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfContractData.exchange)
}

// optional string name = 3;
inline void BfContractData::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& BfContractData::name() const {
  // @@protoc_insertion_point(field_get:bftrader.BfContractData.name)
  return name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BfContractData::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfContractData.name)
}
inline void BfContractData::set_name(const char* value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfContractData.name)
}
inline void BfContractData::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfContractData.name)
}
inline ::std::string* BfContractData::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfContractData.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfContractData::release_name() {
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfContractData::unsafe_arena_release_name() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void BfContractData::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfContractData.name)
}
inline void BfContractData::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfContractData.name)
}

// optional .bftrader.BfProduct productClass = 4;
inline void BfContractData::clear_productclass() {
  productclass_ = 0;
}
inline ::bftrader::BfProduct BfContractData::productclass() const {
  // @@protoc_insertion_point(field_get:bftrader.BfContractData.productClass)
  return static_cast< ::bftrader::BfProduct >(productclass_);
}
inline void BfContractData::set_productclass(::bftrader::BfProduct value) {
  
  productclass_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfContractData.productClass)
}

// optional int32 volumeMultiple = 5;
inline void BfContractData::clear_volumemultiple() {
  volumemultiple_ = 0;
}
inline ::google::protobuf::int32 BfContractData::volumemultiple() const {
  // @@protoc_insertion_point(field_get:bftrader.BfContractData.volumeMultiple)
  return volumemultiple_;
}
inline void BfContractData::set_volumemultiple(::google::protobuf::int32 value) {
  
  volumemultiple_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfContractData.volumeMultiple)
}

// optional double priceTick = 6;
inline void BfContractData::clear_pricetick() {
  pricetick_ = 0;
}
inline double BfContractData::pricetick() const {
  // @@protoc_insertion_point(field_get:bftrader.BfContractData.priceTick)
  return pricetick_;
}
inline void BfContractData::set_pricetick(double value) {
  
  pricetick_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfContractData.priceTick)
}

// optional int32 maxLimit = 7;
inline void BfContractData::clear_maxlimit() {
  maxlimit_ = 0;
}
inline ::google::protobuf::int32 BfContractData::maxlimit() const {
  // @@protoc_insertion_point(field_get:bftrader.BfContractData.maxLimit)
  return maxlimit_;
}
inline void BfContractData::set_maxlimit(::google::protobuf::int32 value) {
  
  maxlimit_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfContractData.maxLimit)
}

// optional int32 minLimit = 8;
inline void BfContractData::clear_minlimit() {
  minlimit_ = 0;
}
inline ::google::protobuf::int32 BfContractData::minlimit() const {
  // @@protoc_insertion_point(field_get:bftrader.BfContractData.minLimit)
  return minlimit_;
}
inline void BfContractData::set_minlimit(::google::protobuf::int32 value) {
  
  minlimit_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfContractData.minLimit)
}

// optional int32 maxMarket = 9;
inline void BfContractData::clear_maxmarket() {
  maxmarket_ = 0;
}
inline ::google::protobuf::int32 BfContractData::maxmarket() const {
  // @@protoc_insertion_point(field_get:bftrader.BfContractData.maxMarket)
  return maxmarket_;
}
inline void BfContractData::set_maxmarket(::google::protobuf::int32 value) {
  
  maxmarket_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfContractData.maxMarket)
}

// optional int32 minMartet = 10;
inline void BfContractData::clear_minmartet() {
  minmartet_ = 0;
}
inline ::google::protobuf::int32 BfContractData::minmartet() const {
  // @@protoc_insertion_point(field_get:bftrader.BfContractData.minMartet)
  return minmartet_;
}
inline void BfContractData::set_minmartet(::google::protobuf::int32 value) {
  
  minmartet_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfContractData.minMartet)
}

// -------------------------------------------------------------------

// BfKvData

// optional string key = 1;
inline void BfKvData::clear_key() {
  key_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& BfKvData::key() const {
  // @@protoc_insertion_point(field_get:bftrader.BfKvData.key)
  return key_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BfKvData::set_key(const ::std::string& value) {
  
  key_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfKvData.key)
}
inline void BfKvData::set_key(const char* value) {
  
  key_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfKvData.key)
}
inline void BfKvData::set_key(const char* value,
    size_t size) {
  
  key_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfKvData.key)
}
inline ::std::string* BfKvData::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfKvData.key)
  return key_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfKvData::release_key() {
  
  return key_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfKvData::unsafe_arena_release_key() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return key_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void BfKvData::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfKvData.key)
}
inline void BfKvData::unsafe_arena_set_allocated_key(
    ::std::string* key) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (key != NULL) {
    
  } else {
    
  }
  key_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      key, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfKvData.key)
}

// optional string value = 2;
inline void BfKvData::clear_value() {
  value_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& BfKvData::value() const {
  // @@protoc_insertion_point(field_get:bftrader.BfKvData.value)
  return value_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BfKvData::set_value(const ::std::string& value) {
  
  value_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfKvData.value)
}
inline void BfKvData::set_value(const char* value) {
  
  value_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfKvData.value)
}
inline void BfKvData::set_value(const char* value,
    size_t size) {
  
  value_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfKvData.value)
}
inline ::std::string* BfKvData::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfKvData.value)
  return value_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfKvData::release_value() {
  
  return value_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfKvData::unsafe_arena_release_value() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return value_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void BfKvData::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfKvData.value)
}
inline void BfKvData::unsafe_arena_set_allocated_value(
    ::std::string* value) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (value != NULL) {
    
  } else {
    
  }
  value_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfKvData.value)
}

// -------------------------------------------------------------------

// BfSubscribeReq

// optional string symbol = 1;
inline void BfSubscribeReq::clear_symbol() {
  symbol_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& BfSubscribeReq::symbol() const {
  // @@protoc_insertion_point(field_get:bftrader.BfSubscribeReq.symbol)
  return symbol_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BfSubscribeReq::set_symbol(const ::std::string& value) {
  
  symbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfSubscribeReq.symbol)
}
inline void BfSubscribeReq::set_symbol(const char* value) {
  
  symbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfSubscribeReq.symbol)
}
inline void BfSubscribeReq::set_symbol(const char* value,
    size_t size) {
  
  symbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfSubscribeReq.symbol)
}
inline ::std::string* BfSubscribeReq::mutable_symbol() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfSubscribeReq.symbol)
  return symbol_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfSubscribeReq::release_symbol() {
  
  return symbol_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfSubscribeReq::unsafe_arena_release_symbol() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return symbol_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void BfSubscribeReq::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfSubscribeReq.symbol)
}
inline void BfSubscribeReq::unsafe_arena_set_allocated_symbol(
    ::std::string* symbol) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      symbol, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfSubscribeReq.symbol)
}

// optional string exchange = 2;
inline void BfSubscribeReq::clear_exchange() {
  exchange_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& BfSubscribeReq::exchange() const {
  // @@protoc_insertion_point(field_get:bftrader.BfSubscribeReq.exchange)
  return exchange_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BfSubscribeReq::set_exchange(const ::std::string& value) {
  
  exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfSubscribeReq.exchange)
}
inline void BfSubscribeReq::set_exchange(const char* value) {
  
  exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfSubscribeReq.exchange)
}
inline void BfSubscribeReq::set_exchange(const char* value,
    size_t size) {
  
  exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfSubscribeReq.exchange)
}
inline ::std::string* BfSubscribeReq::mutable_exchange() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfSubscribeReq.exchange)
  return exchange_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfSubscribeReq::release_exchange() {
  
  return exchange_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfSubscribeReq::unsafe_arena_release_exchange() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return exchange_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void BfSubscribeReq::set_allocated_exchange(::std::string* exchange) {
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfSubscribeReq.exchange)
}
inline void BfSubscribeReq::unsafe_arena_set_allocated_exchange(
    ::std::string* exchange) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      exchange, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfSubscribeReq.exchange)
}

// -------------------------------------------------------------------

// BfOrderReq

// optional string symbol = 1;
inline void BfOrderReq::clear_symbol() {
  symbol_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& BfOrderReq::symbol() const {
  // @@protoc_insertion_point(field_get:bftrader.BfOrderReq.symbol)
  return symbol_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BfOrderReq::set_symbol(const ::std::string& value) {
  
  symbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfOrderReq.symbol)
}
inline void BfOrderReq::set_symbol(const char* value) {
  
  symbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfOrderReq.symbol)
}
inline void BfOrderReq::set_symbol(const char* value,
    size_t size) {
  
  symbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfOrderReq.symbol)
}
inline ::std::string* BfOrderReq::mutable_symbol() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfOrderReq.symbol)
  return symbol_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfOrderReq::release_symbol() {
  
  return symbol_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfOrderReq::unsafe_arena_release_symbol() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return symbol_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void BfOrderReq::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfOrderReq.symbol)
}
inline void BfOrderReq::unsafe_arena_set_allocated_symbol(
    ::std::string* symbol) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      symbol, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfOrderReq.symbol)
}

// optional string exchange = 2;
inline void BfOrderReq::clear_exchange() {
  exchange_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& BfOrderReq::exchange() const {
  // @@protoc_insertion_point(field_get:bftrader.BfOrderReq.exchange)
  return exchange_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BfOrderReq::set_exchange(const ::std::string& value) {
  
  exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfOrderReq.exchange)
}
inline void BfOrderReq::set_exchange(const char* value) {
  
  exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfOrderReq.exchange)
}
inline void BfOrderReq::set_exchange(const char* value,
    size_t size) {
  
  exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfOrderReq.exchange)
}
inline ::std::string* BfOrderReq::mutable_exchange() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfOrderReq.exchange)
  return exchange_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfOrderReq::release_exchange() {
  
  return exchange_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfOrderReq::unsafe_arena_release_exchange() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return exchange_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void BfOrderReq::set_allocated_exchange(::std::string* exchange) {
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfOrderReq.exchange)
}
inline void BfOrderReq::unsafe_arena_set_allocated_exchange(
    ::std::string* exchange) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      exchange, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfOrderReq.exchange)
}

// optional double price = 3;
inline void BfOrderReq::clear_price() {
  price_ = 0;
}
inline double BfOrderReq::price() const {
  // @@protoc_insertion_point(field_get:bftrader.BfOrderReq.price)
  return price_;
}
inline void BfOrderReq::set_price(double value) {
  
  price_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfOrderReq.price)
}

// optional int32 volume = 4;
inline void BfOrderReq::clear_volume() {
  volume_ = 0;
}
inline ::google::protobuf::int32 BfOrderReq::volume() const {
  // @@protoc_insertion_point(field_get:bftrader.BfOrderReq.volume)
  return volume_;
}
inline void BfOrderReq::set_volume(::google::protobuf::int32 value) {
  
  volume_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfOrderReq.volume)
}

// optional .bftrader.BfPriceType priceType = 5;
inline void BfOrderReq::clear_pricetype() {
  pricetype_ = 0;
}
inline ::bftrader::BfPriceType BfOrderReq::pricetype() const {
  // @@protoc_insertion_point(field_get:bftrader.BfOrderReq.priceType)
  return static_cast< ::bftrader::BfPriceType >(pricetype_);
}
inline void BfOrderReq::set_pricetype(::bftrader::BfPriceType value) {
  
  pricetype_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfOrderReq.priceType)
}

// optional .bftrader.BfDirection direction = 6;
inline void BfOrderReq::clear_direction() {
  direction_ = 0;
}
inline ::bftrader::BfDirection BfOrderReq::direction() const {
  // @@protoc_insertion_point(field_get:bftrader.BfOrderReq.direction)
  return static_cast< ::bftrader::BfDirection >(direction_);
}
inline void BfOrderReq::set_direction(::bftrader::BfDirection value) {
  
  direction_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfOrderReq.direction)
}

// optional .bftrader.BfOffset offset = 7;
inline void BfOrderReq::clear_offset() {
  offset_ = 0;
}
inline ::bftrader::BfOffset BfOrderReq::offset() const {
  // @@protoc_insertion_point(field_get:bftrader.BfOrderReq.offset)
  return static_cast< ::bftrader::BfOffset >(offset_);
}
inline void BfOrderReq::set_offset(::bftrader::BfOffset value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfOrderReq.offset)
}

// -------------------------------------------------------------------

// BfOrderResp

// optional int32 orderId = 1;
inline void BfOrderResp::clear_orderid() {
  orderid_ = 0;
}
inline ::google::protobuf::int32 BfOrderResp::orderid() const {
  // @@protoc_insertion_point(field_get:bftrader.BfOrderResp.orderId)
  return orderid_;
}
inline void BfOrderResp::set_orderid(::google::protobuf::int32 value) {
  
  orderid_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfOrderResp.orderId)
}

// -------------------------------------------------------------------

// BfCancelOrderReq

// optional string symbol = 1;
inline void BfCancelOrderReq::clear_symbol() {
  symbol_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& BfCancelOrderReq::symbol() const {
  // @@protoc_insertion_point(field_get:bftrader.BfCancelOrderReq.symbol)
  return symbol_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BfCancelOrderReq::set_symbol(const ::std::string& value) {
  
  symbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfCancelOrderReq.symbol)
}
inline void BfCancelOrderReq::set_symbol(const char* value) {
  
  symbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfCancelOrderReq.symbol)
}
inline void BfCancelOrderReq::set_symbol(const char* value,
    size_t size) {
  
  symbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfCancelOrderReq.symbol)
}
inline ::std::string* BfCancelOrderReq::mutable_symbol() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfCancelOrderReq.symbol)
  return symbol_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfCancelOrderReq::release_symbol() {
  
  return symbol_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfCancelOrderReq::unsafe_arena_release_symbol() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return symbol_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void BfCancelOrderReq::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfCancelOrderReq.symbol)
}
inline void BfCancelOrderReq::unsafe_arena_set_allocated_symbol(
    ::std::string* symbol) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      symbol, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfCancelOrderReq.symbol)
}

// optional string exchange = 2;
inline void BfCancelOrderReq::clear_exchange() {
  exchange_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& BfCancelOrderReq::exchange() const {
  // @@protoc_insertion_point(field_get:bftrader.BfCancelOrderReq.exchange)
  return exchange_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BfCancelOrderReq::set_exchange(const ::std::string& value) {
  
  exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfCancelOrderReq.exchange)
}
inline void BfCancelOrderReq::set_exchange(const char* value) {
  
  exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfCancelOrderReq.exchange)
}
inline void BfCancelOrderReq::set_exchange(const char* value,
    size_t size) {
  
  exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfCancelOrderReq.exchange)
}
inline ::std::string* BfCancelOrderReq::mutable_exchange() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfCancelOrderReq.exchange)
  return exchange_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfCancelOrderReq::release_exchange() {
  
  return exchange_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfCancelOrderReq::unsafe_arena_release_exchange() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return exchange_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void BfCancelOrderReq::set_allocated_exchange(::std::string* exchange) {
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfCancelOrderReq.exchange)
}
inline void BfCancelOrderReq::unsafe_arena_set_allocated_exchange(
    ::std::string* exchange) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      exchange, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfCancelOrderReq.exchange)
}

// optional int32 orderId = 3;
inline void BfCancelOrderReq::clear_orderid() {
  orderid_ = 0;
}
inline ::google::protobuf::int32 BfCancelOrderReq::orderid() const {
  // @@protoc_insertion_point(field_get:bftrader.BfCancelOrderReq.orderId)
  return orderid_;
}
inline void BfCancelOrderReq::set_orderid(::google::protobuf::int32 value) {
  
  orderid_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfCancelOrderReq.orderId)
}

// optional int32 frontID = 4;
inline void BfCancelOrderReq::clear_frontid() {
  frontid_ = 0;
}
inline ::google::protobuf::int32 BfCancelOrderReq::frontid() const {
  // @@protoc_insertion_point(field_get:bftrader.BfCancelOrderReq.frontID)
  return frontid_;
}
inline void BfCancelOrderReq::set_frontid(::google::protobuf::int32 value) {
  
  frontid_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfCancelOrderReq.frontID)
}

// optional int32 sessionID = 5;
inline void BfCancelOrderReq::clear_sessionid() {
  sessionid_ = 0;
}
inline ::google::protobuf::int32 BfCancelOrderReq::sessionid() const {
  // @@protoc_insertion_point(field_get:bftrader.BfCancelOrderReq.sessionID)
  return sessionid_;
}
inline void BfCancelOrderReq::set_sessionid(::google::protobuf::int32 value) {
  
  sessionid_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfCancelOrderReq.sessionID)
}

// -------------------------------------------------------------------

// BfConnectReq

// optional string robotId = 1;
inline void BfConnectReq::clear_robotid() {
  robotid_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& BfConnectReq::robotid() const {
  // @@protoc_insertion_point(field_get:bftrader.BfConnectReq.robotId)
  return robotid_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BfConnectReq::set_robotid(const ::std::string& value) {
  
  robotid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfConnectReq.robotId)
}
inline void BfConnectReq::set_robotid(const char* value) {
  
  robotid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfConnectReq.robotId)
}
inline void BfConnectReq::set_robotid(const char* value,
    size_t size) {
  
  robotid_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfConnectReq.robotId)
}
inline ::std::string* BfConnectReq::mutable_robotid() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfConnectReq.robotId)
  return robotid_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfConnectReq::release_robotid() {
  
  return robotid_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfConnectReq::unsafe_arena_release_robotid() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return robotid_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void BfConnectReq::set_allocated_robotid(::std::string* robotid) {
  if (robotid != NULL) {
    
  } else {
    
  }
  robotid_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), robotid,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfConnectReq.robotId)
}
inline void BfConnectReq::unsafe_arena_set_allocated_robotid(
    ::std::string* robotid) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (robotid != NULL) {
    
  } else {
    
  }
  robotid_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      robotid, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfConnectReq.robotId)
}

// optional string robotIp = 2;
inline void BfConnectReq::clear_robotip() {
  robotip_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& BfConnectReq::robotip() const {
  // @@protoc_insertion_point(field_get:bftrader.BfConnectReq.robotIp)
  return robotip_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BfConnectReq::set_robotip(const ::std::string& value) {
  
  robotip_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfConnectReq.robotIp)
}
inline void BfConnectReq::set_robotip(const char* value) {
  
  robotip_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfConnectReq.robotIp)
}
inline void BfConnectReq::set_robotip(const char* value,
    size_t size) {
  
  robotip_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfConnectReq.robotIp)
}
inline ::std::string* BfConnectReq::mutable_robotip() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfConnectReq.robotIp)
  return robotip_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfConnectReq::release_robotip() {
  
  return robotip_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfConnectReq::unsafe_arena_release_robotip() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return robotip_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void BfConnectReq::set_allocated_robotip(::std::string* robotip) {
  if (robotip != NULL) {
    
  } else {
    
  }
  robotip_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), robotip,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfConnectReq.robotIp)
}
inline void BfConnectReq::unsafe_arena_set_allocated_robotip(
    ::std::string* robotip) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (robotip != NULL) {
    
  } else {
    
  }
  robotip_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      robotip, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfConnectReq.robotIp)
}

// optional int32 robotPort = 3;
inline void BfConnectReq::clear_robotport() {
  robotport_ = 0;
}
inline ::google::protobuf::int32 BfConnectReq::robotport() const {
  // @@protoc_insertion_point(field_get:bftrader.BfConnectReq.robotPort)
  return robotport_;
}
inline void BfConnectReq::set_robotport(::google::protobuf::int32 value) {
  
  robotport_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfConnectReq.robotPort)
}

// -------------------------------------------------------------------

// BfConnectResp

// optional bool exchangeOpened = 1;
inline void BfConnectResp::clear_exchangeopened() {
  exchangeopened_ = false;
}
inline bool BfConnectResp::exchangeopened() const {
  // @@protoc_insertion_point(field_get:bftrader.BfConnectResp.exchangeOpened)
  return exchangeopened_;
}
inline void BfConnectResp::set_exchangeopened(bool value) {
  
  exchangeopened_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfConnectResp.exchangeOpened)
}

// -------------------------------------------------------------------

// BfGetContractReq

// optional string symbol = 1;
inline void BfGetContractReq::clear_symbol() {
  symbol_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& BfGetContractReq::symbol() const {
  // @@protoc_insertion_point(field_get:bftrader.BfGetContractReq.symbol)
  return symbol_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BfGetContractReq::set_symbol(const ::std::string& value) {
  
  symbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfGetContractReq.symbol)
}
inline void BfGetContractReq::set_symbol(const char* value) {
  
  symbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfGetContractReq.symbol)
}
inline void BfGetContractReq::set_symbol(const char* value,
    size_t size) {
  
  symbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfGetContractReq.symbol)
}
inline ::std::string* BfGetContractReq::mutable_symbol() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfGetContractReq.symbol)
  return symbol_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfGetContractReq::release_symbol() {
  
  return symbol_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfGetContractReq::unsafe_arena_release_symbol() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return symbol_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void BfGetContractReq::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfGetContractReq.symbol)
}
inline void BfGetContractReq::unsafe_arena_set_allocated_symbol(
    ::std::string* symbol) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      symbol, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfGetContractReq.symbol)
}

// optional string exchange = 2;
inline void BfGetContractReq::clear_exchange() {
  exchange_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& BfGetContractReq::exchange() const {
  // @@protoc_insertion_point(field_get:bftrader.BfGetContractReq.exchange)
  return exchange_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BfGetContractReq::set_exchange(const ::std::string& value) {
  
  exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfGetContractReq.exchange)
}
inline void BfGetContractReq::set_exchange(const char* value) {
  
  exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfGetContractReq.exchange)
}
inline void BfGetContractReq::set_exchange(const char* value,
    size_t size) {
  
  exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfGetContractReq.exchange)
}
inline ::std::string* BfGetContractReq::mutable_exchange() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfGetContractReq.exchange)
  return exchange_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfGetContractReq::release_exchange() {
  
  return exchange_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfGetContractReq::unsafe_arena_release_exchange() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return exchange_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void BfGetContractReq::set_allocated_exchange(::std::string* exchange) {
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfGetContractReq.exchange)
}
inline void BfGetContractReq::unsafe_arena_set_allocated_exchange(
    ::std::string* exchange) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      exchange, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfGetContractReq.exchange)
}

// -------------------------------------------------------------------

// BfGetTickPackReq

// optional string symbol = 1;
inline void BfGetTickPackReq::clear_symbol() {
  symbol_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& BfGetTickPackReq::symbol() const {
  // @@protoc_insertion_point(field_get:bftrader.BfGetTickPackReq.symbol)
  return symbol_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BfGetTickPackReq::set_symbol(const ::std::string& value) {
  
  symbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfGetTickPackReq.symbol)
}
inline void BfGetTickPackReq::set_symbol(const char* value) {
  
  symbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfGetTickPackReq.symbol)
}
inline void BfGetTickPackReq::set_symbol(const char* value,
    size_t size) {
  
  symbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfGetTickPackReq.symbol)
}
inline ::std::string* BfGetTickPackReq::mutable_symbol() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfGetTickPackReq.symbol)
  return symbol_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfGetTickPackReq::release_symbol() {
  
  return symbol_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfGetTickPackReq::unsafe_arena_release_symbol() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return symbol_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void BfGetTickPackReq::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfGetTickPackReq.symbol)
}
inline void BfGetTickPackReq::unsafe_arena_set_allocated_symbol(
    ::std::string* symbol) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      symbol, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfGetTickPackReq.symbol)
}

// optional string exchange = 2;
inline void BfGetTickPackReq::clear_exchange() {
  exchange_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& BfGetTickPackReq::exchange() const {
  // @@protoc_insertion_point(field_get:bftrader.BfGetTickPackReq.exchange)
  return exchange_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BfGetTickPackReq::set_exchange(const ::std::string& value) {
  
  exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfGetTickPackReq.exchange)
}
inline void BfGetTickPackReq::set_exchange(const char* value) {
  
  exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfGetTickPackReq.exchange)
}
inline void BfGetTickPackReq::set_exchange(const char* value,
    size_t size) {
  
  exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfGetTickPackReq.exchange)
}
inline ::std::string* BfGetTickPackReq::mutable_exchange() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfGetTickPackReq.exchange)
  return exchange_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfGetTickPackReq::release_exchange() {
  
  return exchange_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfGetTickPackReq::unsafe_arena_release_exchange() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return exchange_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void BfGetTickPackReq::set_allocated_exchange(::std::string* exchange) {
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfGetTickPackReq.exchange)
}
inline void BfGetTickPackReq::unsafe_arena_set_allocated_exchange(
    ::std::string* exchange) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      exchange, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfGetTickPackReq.exchange)
}

// optional string toDate = 3;
inline void BfGetTickPackReq::clear_todate() {
  todate_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& BfGetTickPackReq::todate() const {
  // @@protoc_insertion_point(field_get:bftrader.BfGetTickPackReq.toDate)
  return todate_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BfGetTickPackReq::set_todate(const ::std::string& value) {
  
  todate_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfGetTickPackReq.toDate)
}
inline void BfGetTickPackReq::set_todate(const char* value) {
  
  todate_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfGetTickPackReq.toDate)
}
inline void BfGetTickPackReq::set_todate(const char* value,
    size_t size) {
  
  todate_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfGetTickPackReq.toDate)
}
inline ::std::string* BfGetTickPackReq::mutable_todate() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfGetTickPackReq.toDate)
  return todate_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfGetTickPackReq::release_todate() {
  
  return todate_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfGetTickPackReq::unsafe_arena_release_todate() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return todate_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void BfGetTickPackReq::set_allocated_todate(::std::string* todate) {
  if (todate != NULL) {
    
  } else {
    
  }
  todate_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), todate,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfGetTickPackReq.toDate)
}
inline void BfGetTickPackReq::unsafe_arena_set_allocated_todate(
    ::std::string* todate) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (todate != NULL) {
    
  } else {
    
  }
  todate_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      todate, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfGetTickPackReq.toDate)
}

// optional string toTime = 4;
inline void BfGetTickPackReq::clear_totime() {
  totime_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& BfGetTickPackReq::totime() const {
  // @@protoc_insertion_point(field_get:bftrader.BfGetTickPackReq.toTime)
  return totime_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BfGetTickPackReq::set_totime(const ::std::string& value) {
  
  totime_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfGetTickPackReq.toTime)
}
inline void BfGetTickPackReq::set_totime(const char* value) {
  
  totime_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfGetTickPackReq.toTime)
}
inline void BfGetTickPackReq::set_totime(const char* value,
    size_t size) {
  
  totime_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfGetTickPackReq.toTime)
}
inline ::std::string* BfGetTickPackReq::mutable_totime() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfGetTickPackReq.toTime)
  return totime_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfGetTickPackReq::release_totime() {
  
  return totime_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfGetTickPackReq::unsafe_arena_release_totime() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return totime_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void BfGetTickPackReq::set_allocated_totime(::std::string* totime) {
  if (totime != NULL) {
    
  } else {
    
  }
  totime_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), totime,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfGetTickPackReq.toTime)
}
inline void BfGetTickPackReq::unsafe_arena_set_allocated_totime(
    ::std::string* totime) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (totime != NULL) {
    
  } else {
    
  }
  totime_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      totime, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfGetTickPackReq.toTime)
}

// optional int32 count = 5;
inline void BfGetTickPackReq::clear_count() {
  count_ = 0;
}
inline ::google::protobuf::int32 BfGetTickPackReq::count() const {
  // @@protoc_insertion_point(field_get:bftrader.BfGetTickPackReq.count)
  return count_;
}
inline void BfGetTickPackReq::set_count(::google::protobuf::int32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfGetTickPackReq.count)
}

// -------------------------------------------------------------------

// BfGetBarReq

// optional string symbol = 1;
inline void BfGetBarReq::clear_symbol() {
  symbol_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& BfGetBarReq::symbol() const {
  // @@protoc_insertion_point(field_get:bftrader.BfGetBarReq.symbol)
  return symbol_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BfGetBarReq::set_symbol(const ::std::string& value) {
  
  symbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfGetBarReq.symbol)
}
inline void BfGetBarReq::set_symbol(const char* value) {
  
  symbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfGetBarReq.symbol)
}
inline void BfGetBarReq::set_symbol(const char* value,
    size_t size) {
  
  symbol_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfGetBarReq.symbol)
}
inline ::std::string* BfGetBarReq::mutable_symbol() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfGetBarReq.symbol)
  return symbol_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfGetBarReq::release_symbol() {
  
  return symbol_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfGetBarReq::unsafe_arena_release_symbol() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return symbol_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void BfGetBarReq::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfGetBarReq.symbol)
}
inline void BfGetBarReq::unsafe_arena_set_allocated_symbol(
    ::std::string* symbol) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      symbol, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfGetBarReq.symbol)
}

// optional string exchange = 2;
inline void BfGetBarReq::clear_exchange() {
  exchange_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& BfGetBarReq::exchange() const {
  // @@protoc_insertion_point(field_get:bftrader.BfGetBarReq.exchange)
  return exchange_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BfGetBarReq::set_exchange(const ::std::string& value) {
  
  exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfGetBarReq.exchange)
}
inline void BfGetBarReq::set_exchange(const char* value) {
  
  exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfGetBarReq.exchange)
}
inline void BfGetBarReq::set_exchange(const char* value,
    size_t size) {
  
  exchange_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfGetBarReq.exchange)
}
inline ::std::string* BfGetBarReq::mutable_exchange() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfGetBarReq.exchange)
  return exchange_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfGetBarReq::release_exchange() {
  
  return exchange_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfGetBarReq::unsafe_arena_release_exchange() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return exchange_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void BfGetBarReq::set_allocated_exchange(::std::string* exchange) {
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfGetBarReq.exchange)
}
inline void BfGetBarReq::unsafe_arena_set_allocated_exchange(
    ::std::string* exchange) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      exchange, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfGetBarReq.exchange)
}

// optional .bftrader.BfPeriod period = 3;
inline void BfGetBarReq::clear_period() {
  period_ = 0;
}
inline ::bftrader::BfPeriod BfGetBarReq::period() const {
  // @@protoc_insertion_point(field_get:bftrader.BfGetBarReq.period)
  return static_cast< ::bftrader::BfPeriod >(period_);
}
inline void BfGetBarReq::set_period(::bftrader::BfPeriod value) {
  
  period_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfGetBarReq.period)
}

// optional string toDate = 4;
inline void BfGetBarReq::clear_todate() {
  todate_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& BfGetBarReq::todate() const {
  // @@protoc_insertion_point(field_get:bftrader.BfGetBarReq.toDate)
  return todate_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BfGetBarReq::set_todate(const ::std::string& value) {
  
  todate_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfGetBarReq.toDate)
}
inline void BfGetBarReq::set_todate(const char* value) {
  
  todate_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfGetBarReq.toDate)
}
inline void BfGetBarReq::set_todate(const char* value,
    size_t size) {
  
  todate_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfGetBarReq.toDate)
}
inline ::std::string* BfGetBarReq::mutable_todate() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfGetBarReq.toDate)
  return todate_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfGetBarReq::release_todate() {
  
  return todate_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfGetBarReq::unsafe_arena_release_todate() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return todate_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void BfGetBarReq::set_allocated_todate(::std::string* todate) {
  if (todate != NULL) {
    
  } else {
    
  }
  todate_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), todate,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfGetBarReq.toDate)
}
inline void BfGetBarReq::unsafe_arena_set_allocated_todate(
    ::std::string* todate) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (todate != NULL) {
    
  } else {
    
  }
  todate_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      todate, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfGetBarReq.toDate)
}

// optional string toTime = 5;
inline void BfGetBarReq::clear_totime() {
  totime_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& BfGetBarReq::totime() const {
  // @@protoc_insertion_point(field_get:bftrader.BfGetBarReq.toTime)
  return totime_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BfGetBarReq::set_totime(const ::std::string& value) {
  
  totime_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:bftrader.BfGetBarReq.toTime)
}
inline void BfGetBarReq::set_totime(const char* value) {
  
  totime_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:bftrader.BfGetBarReq.toTime)
}
inline void BfGetBarReq::set_totime(const char* value,
    size_t size) {
  
  totime_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:bftrader.BfGetBarReq.toTime)
}
inline ::std::string* BfGetBarReq::mutable_totime() {
  
  // @@protoc_insertion_point(field_mutable:bftrader.BfGetBarReq.toTime)
  return totime_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfGetBarReq::release_totime() {
  
  return totime_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* BfGetBarReq::unsafe_arena_release_totime() {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return totime_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void BfGetBarReq::set_allocated_totime(::std::string* totime) {
  if (totime != NULL) {
    
  } else {
    
  }
  totime_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), totime,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfGetBarReq.toTime)
}
inline void BfGetBarReq::unsafe_arena_set_allocated_totime(
    ::std::string* totime) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (totime != NULL) {
    
  } else {
    
  }
  totime_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      totime, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:bftrader.BfGetBarReq.toTime)
}

// optional int32 count = 6;
inline void BfGetBarReq::clear_count() {
  count_ = 0;
}
inline ::google::protobuf::int32 BfGetBarReq::count() const {
  // @@protoc_insertion_point(field_get:bftrader.BfGetBarReq.count)
  return count_;
}
inline void BfGetBarReq::set_count(::google::protobuf::int32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:bftrader.BfGetBarReq.count)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace bftrader

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::bftrader::BfDirection> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bftrader::BfDirection>() {
  return ::bftrader::BfDirection_descriptor();
}
template <> struct is_proto_enum< ::bftrader::BfOffset> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bftrader::BfOffset>() {
  return ::bftrader::BfOffset_descriptor();
}
template <> struct is_proto_enum< ::bftrader::BfStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bftrader::BfStatus>() {
  return ::bftrader::BfStatus_descriptor();
}
template <> struct is_proto_enum< ::bftrader::BfProduct> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bftrader::BfProduct>() {
  return ::bftrader::BfProduct_descriptor();
}
template <> struct is_proto_enum< ::bftrader::BfPriceType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bftrader::BfPriceType>() {
  return ::bftrader::BfPriceType_descriptor();
}
template <> struct is_proto_enum< ::bftrader::BfExchange> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bftrader::BfExchange>() {
  return ::bftrader::BfExchange_descriptor();
}
template <> struct is_proto_enum< ::bftrader::BfPeriod> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bftrader::BfPeriod>() {
  return ::bftrader::BfPeriod_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_bftrader_2eproto__INCLUDED
