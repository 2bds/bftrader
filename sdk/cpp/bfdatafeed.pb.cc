// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bfdatafeed.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "bfdatafeed.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace bfdatafeed {

namespace {

const ::google::protobuf::Descriptor* BfBarData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BfBarData_reflection_ = NULL;
const ::google::protobuf::Descriptor* BfGetTickReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BfGetTickReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* BfGetBarReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BfGetBarReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* BfDatafeedGetContractReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BfDatafeedGetContractReq_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BfBarPeriod_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_bfdatafeed_2eproto() {
  protobuf_AddDesc_bfdatafeed_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "bfdatafeed.proto");
  GOOGLE_CHECK(file != NULL);
  BfBarData_descriptor_ = file->message_type(0);
  static const int BfBarData_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfBarData, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfBarData, exchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfBarData, period_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfBarData, actiondate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfBarData, bartime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfBarData, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfBarData, openinterest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfBarData, lastvolume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfBarData, openprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfBarData, highprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfBarData, lowprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfBarData, closeprice_),
  };
  BfBarData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BfBarData_descriptor_,
      BfBarData::default_instance_,
      BfBarData_offsets_,
      -1,
      -1,
      -1,
      sizeof(BfBarData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfBarData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfBarData, _is_default_instance_));
  BfGetTickReq_descriptor_ = file->message_type(1);
  static const int BfGetTickReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfGetTickReq, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfGetTickReq, exchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfGetTickReq, todate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfGetTickReq, totime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfGetTickReq, count_),
  };
  BfGetTickReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BfGetTickReq_descriptor_,
      BfGetTickReq::default_instance_,
      BfGetTickReq_offsets_,
      -1,
      -1,
      -1,
      sizeof(BfGetTickReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfGetTickReq, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfGetTickReq, _is_default_instance_));
  BfGetBarReq_descriptor_ = file->message_type(2);
  static const int BfGetBarReq_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfGetBarReq, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfGetBarReq, exchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfGetBarReq, period_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfGetBarReq, todate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfGetBarReq, totime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfGetBarReq, count_),
  };
  BfGetBarReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BfGetBarReq_descriptor_,
      BfGetBarReq::default_instance_,
      BfGetBarReq_offsets_,
      -1,
      -1,
      -1,
      sizeof(BfGetBarReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfGetBarReq, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfGetBarReq, _is_default_instance_));
  BfDatafeedGetContractReq_descriptor_ = file->message_type(3);
  static const int BfDatafeedGetContractReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfDatafeedGetContractReq, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfDatafeedGetContractReq, exchange_),
  };
  BfDatafeedGetContractReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BfDatafeedGetContractReq_descriptor_,
      BfDatafeedGetContractReq::default_instance_,
      BfDatafeedGetContractReq_offsets_,
      -1,
      -1,
      -1,
      sizeof(BfDatafeedGetContractReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfDatafeedGetContractReq, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfDatafeedGetContractReq, _is_default_instance_));
  BfBarPeriod_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_bfdatafeed_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BfBarData_descriptor_, &BfBarData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BfGetTickReq_descriptor_, &BfGetTickReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BfGetBarReq_descriptor_, &BfGetBarReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BfDatafeedGetContractReq_descriptor_, &BfDatafeedGetContractReq::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_bfdatafeed_2eproto() {
  delete BfBarData::default_instance_;
  delete BfBarData_reflection_;
  delete BfGetTickReq::default_instance_;
  delete BfGetTickReq_reflection_;
  delete BfGetBarReq::default_instance_;
  delete BfGetBarReq_reflection_;
  delete BfDatafeedGetContractReq::default_instance_;
  delete BfDatafeedGetContractReq_reflection_;
}

void protobuf_AddDesc_bfdatafeed_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::bfgateway::protobuf_AddDesc_bfgateway_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020bfdatafeed.proto\022\nbfdatafeed\032\017bfgatewa"
    "y.proto\"\201\002\n\tBfBarData\022\016\n\006symbol\030\001 \001(\t\022\020\n"
    "\010exchange\030\002 \001(\t\022\'\n\006period\030\003 \001(\0162\027.bfdata"
    "feed.BfBarPeriod\022\022\n\nactionDate\030\004 \001(\t\022\017\n\007"
    "barTime\030\005 \001(\t\022\016\n\006volume\030\006 \001(\005\022\024\n\014openInt"
    "erest\030\007 \001(\001\022\022\n\nlastVolume\030\010 \001(\005\022\021\n\topenP"
    "rice\030\t \001(\001\022\021\n\thighPrice\030\n \001(\001\022\020\n\010lowPric"
    "e\030\013 \001(\001\022\022\n\nclosePrice\030\014 \001(\001\"_\n\014BfGetTick"
    "Req\022\016\n\006symbol\030\001 \001(\t\022\020\n\010exchange\030\002 \001(\t\022\016\n"
    "\006toDate\030\003 \001(\t\022\016\n\006toTime\030\004 \001(\t\022\r\n\005count\030\005"
    " \001(\005\"\207\001\n\013BfGetBarReq\022\016\n\006symbol\030\001 \001(\t\022\020\n\010"
    "exchange\030\002 \001(\t\022\'\n\006period\030\003 \001(\0162\027.bfdataf"
    "eed.BfBarPeriod\022\016\n\006toDate\030\004 \001(\t\022\016\n\006toTim"
    "e\030\005 \001(\t\022\r\n\005count\030\006 \001(\005\"<\n\030BfDatafeedGetC"
    "ontractReq\022\016\n\006symbol\030\001 \001(\t\022\020\n\010exchange\030\002"
    " \001(\t*\221\002\n\013BfBarPeriod\022\022\n\016PERIOD_UNKNOWN\020\000"
    "\022\016\n\nPERIOD_S01\020\001\022\016\n\nPERIOD_S03\020\002\022\016\n\nPERI"
    "OD_S05\020\003\022\016\n\nPERIOD_S10\020\004\022\016\n\nPERIOD_S15\020\005"
    "\022\016\n\nPERIOD_S30\020\006\022\016\n\nPERIOD_M01\020\007\022\016\n\nPERI"
    "OD_M03\020\010\022\016\n\nPERIOD_M05\020\t\022\016\n\nPERIOD_M10\020\n"
    "\022\016\n\nPERIOD_M15\020\013\022\016\n\nPERIOD_M30\020\014\022\016\n\nPERI"
    "OD_H01\020\r\022\016\n\nPERIOD_D01\020\016\022\016\n\nPERIOD_W01\020\017"
    "2\322\003\n\021BfDatafeedService\0226\n\004Ping\022\025.bfgatew"
    "ay.BfPingData\032\025.bfgateway.BfPingData\"\000\0228"
    "\n\nInsertTick\022\025.bfgateway.BfTickData\032\021.bf"
    "gateway.BfVoid\"\000\0227\n\tInsertBar\022\025.bfdatafe"
    "ed.BfBarData\032\021.bfgateway.BfVoid\"\000\022@\n\016Ins"
    "ertContract\022\031.bfgateway.BfContractData\032\021"
    ".bfgateway.BfVoid\"\000\022>\n\007GetTick\022\030.bfdataf"
    "eed.BfGetTickReq\032\025.bfgateway.BfTickData\""
    "\0000\001\022<\n\006GetBar\022\027.bfdatafeed.BfGetBarReq\032\025"
    ".bfdatafeed.BfBarData\"\0000\001\022R\n\013GetContract"
    "\022$.bfdatafeed.BfDatafeedGetContractReq\032\031"
    ".bfgateway.BfContractData\"\0000\001B*Z(github."
    "com/sunwangme/bfgo/api/bfdatafeedb\006proto"
    "3", 1401);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "bfdatafeed.proto", &protobuf_RegisterTypes);
  BfBarData::default_instance_ = new BfBarData();
  BfGetTickReq::default_instance_ = new BfGetTickReq();
  BfGetBarReq::default_instance_ = new BfGetBarReq();
  BfDatafeedGetContractReq::default_instance_ = new BfDatafeedGetContractReq();
  BfBarData::default_instance_->InitAsDefaultInstance();
  BfGetTickReq::default_instance_->InitAsDefaultInstance();
  BfGetBarReq::default_instance_->InitAsDefaultInstance();
  BfDatafeedGetContractReq::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_bfdatafeed_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_bfdatafeed_2eproto {
  StaticDescriptorInitializer_bfdatafeed_2eproto() {
    protobuf_AddDesc_bfdatafeed_2eproto();
  }
} static_descriptor_initializer_bfdatafeed_2eproto_;
const ::google::protobuf::EnumDescriptor* BfBarPeriod_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BfBarPeriod_descriptor_;
}
bool BfBarPeriod_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BfBarData::kSymbolFieldNumber;
const int BfBarData::kExchangeFieldNumber;
const int BfBarData::kPeriodFieldNumber;
const int BfBarData::kActionDateFieldNumber;
const int BfBarData::kBarTimeFieldNumber;
const int BfBarData::kVolumeFieldNumber;
const int BfBarData::kOpenInterestFieldNumber;
const int BfBarData::kLastVolumeFieldNumber;
const int BfBarData::kOpenPriceFieldNumber;
const int BfBarData::kHighPriceFieldNumber;
const int BfBarData::kLowPriceFieldNumber;
const int BfBarData::kClosePriceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BfBarData::BfBarData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bfdatafeed.BfBarData)
}

void BfBarData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BfBarData::BfBarData(const BfBarData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bfdatafeed.BfBarData)
}

void BfBarData::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  period_ = 0;
  actiondate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bartime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  volume_ = 0;
  openinterest_ = 0;
  lastvolume_ = 0;
  openprice_ = 0;
  highprice_ = 0;
  lowprice_ = 0;
  closeprice_ = 0;
}

BfBarData::~BfBarData() {
  // @@protoc_insertion_point(destructor:bfdatafeed.BfBarData)
  SharedDtor();
}

void BfBarData::SharedDtor() {
  symbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  actiondate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bartime_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BfBarData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BfBarData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BfBarData_descriptor_;
}

const BfBarData& BfBarData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bfdatafeed_2eproto();
  return *default_instance_;
}

BfBarData* BfBarData::default_instance_ = NULL;

BfBarData* BfBarData::New(::google::protobuf::Arena* arena) const {
  BfBarData* n = new BfBarData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BfBarData::Clear() {
// @@protoc_insertion_point(message_clear_start:bfdatafeed.BfBarData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BfBarData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BfBarData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(period_, volume_);
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  actiondate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bartime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  openinterest_ = 0;
  lastvolume_ = 0;
  ZR_(openprice_, closeprice_);

#undef ZR_HELPER_
#undef ZR_

}

bool BfBarData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bfdatafeed.BfBarData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string symbol = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bfdatafeed.BfBarData.symbol"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_exchange;
        break;
      }

      // optional string exchange = 2;
      case 2: {
        if (tag == 18) {
         parse_exchange:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exchange().data(), this->exchange().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bfdatafeed.BfBarData.exchange"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_period;
        break;
      }

      // optional .bfdatafeed.BfBarPeriod period = 3;
      case 3: {
        if (tag == 24) {
         parse_period:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_period(static_cast< ::bfdatafeed::BfBarPeriod >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_actionDate;
        break;
      }

      // optional string actionDate = 4;
      case 4: {
        if (tag == 34) {
         parse_actionDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_actiondate()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->actiondate().data(), this->actiondate().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bfdatafeed.BfBarData.actionDate"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_barTime;
        break;
      }

      // optional string barTime = 5;
      case 5: {
        if (tag == 42) {
         parse_barTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bartime()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bartime().data(), this->bartime().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bfdatafeed.BfBarData.barTime"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_volume;
        break;
      }

      // optional int32 volume = 6;
      case 6: {
        if (tag == 48) {
         parse_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volume_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_openInterest;
        break;
      }

      // optional double openInterest = 7;
      case 7: {
        if (tag == 57) {
         parse_openInterest:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &openinterest_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_lastVolume;
        break;
      }

      // optional int32 lastVolume = 8;
      case 8: {
        if (tag == 64) {
         parse_lastVolume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastvolume_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_openPrice;
        break;
      }

      // optional double openPrice = 9;
      case 9: {
        if (tag == 73) {
         parse_openPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &openprice_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_highPrice;
        break;
      }

      // optional double highPrice = 10;
      case 10: {
        if (tag == 81) {
         parse_highPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &highprice_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_lowPrice;
        break;
      }

      // optional double lowPrice = 11;
      case 11: {
        if (tag == 89) {
         parse_lowPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lowprice_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_closePrice;
        break;
      }

      // optional double closePrice = 12;
      case 12: {
        if (tag == 97) {
         parse_closePrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &closeprice_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bfdatafeed.BfBarData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bfdatafeed.BfBarData)
  return false;
#undef DO_
}

void BfBarData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bfdatafeed.BfBarData)
  // optional string symbol = 1;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bfdatafeed.BfBarData.symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->symbol(), output);
  }

  // optional string exchange = 2;
  if (this->exchange().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bfdatafeed.BfBarData.exchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->exchange(), output);
  }

  // optional .bfdatafeed.BfBarPeriod period = 3;
  if (this->period() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->period(), output);
  }

  // optional string actionDate = 4;
  if (this->actiondate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->actiondate().data(), this->actiondate().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bfdatafeed.BfBarData.actionDate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->actiondate(), output);
  }

  // optional string barTime = 5;
  if (this->bartime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bartime().data(), this->bartime().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bfdatafeed.BfBarData.barTime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->bartime(), output);
  }

  // optional int32 volume = 6;
  if (this->volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->volume(), output);
  }

  // optional double openInterest = 7;
  if (this->openinterest() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->openinterest(), output);
  }

  // optional int32 lastVolume = 8;
  if (this->lastvolume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->lastvolume(), output);
  }

  // optional double openPrice = 9;
  if (this->openprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->openprice(), output);
  }

  // optional double highPrice = 10;
  if (this->highprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->highprice(), output);
  }

  // optional double lowPrice = 11;
  if (this->lowprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->lowprice(), output);
  }

  // optional double closePrice = 12;
  if (this->closeprice() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->closeprice(), output);
  }

  // @@protoc_insertion_point(serialize_end:bfdatafeed.BfBarData)
}

::google::protobuf::uint8* BfBarData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bfdatafeed.BfBarData)
  // optional string symbol = 1;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bfdatafeed.BfBarData.symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->symbol(), target);
  }

  // optional string exchange = 2;
  if (this->exchange().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bfdatafeed.BfBarData.exchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->exchange(), target);
  }

  // optional .bfdatafeed.BfBarPeriod period = 3;
  if (this->period() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->period(), target);
  }

  // optional string actionDate = 4;
  if (this->actiondate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->actiondate().data(), this->actiondate().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bfdatafeed.BfBarData.actionDate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->actiondate(), target);
  }

  // optional string barTime = 5;
  if (this->bartime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bartime().data(), this->bartime().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bfdatafeed.BfBarData.barTime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->bartime(), target);
  }

  // optional int32 volume = 6;
  if (this->volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->volume(), target);
  }

  // optional double openInterest = 7;
  if (this->openinterest() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->openinterest(), target);
  }

  // optional int32 lastVolume = 8;
  if (this->lastvolume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->lastvolume(), target);
  }

  // optional double openPrice = 9;
  if (this->openprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->openprice(), target);
  }

  // optional double highPrice = 10;
  if (this->highprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->highprice(), target);
  }

  // optional double lowPrice = 11;
  if (this->lowprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->lowprice(), target);
  }

  // optional double closePrice = 12;
  if (this->closeprice() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->closeprice(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:bfdatafeed.BfBarData)
  return target;
}

int BfBarData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:bfdatafeed.BfBarData)
  int total_size = 0;

  // optional string symbol = 1;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->symbol());
  }

  // optional string exchange = 2;
  if (this->exchange().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchange());
  }

  // optional .bfdatafeed.BfBarPeriod period = 3;
  if (this->period() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->period());
  }

  // optional string actionDate = 4;
  if (this->actiondate().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->actiondate());
  }

  // optional string barTime = 5;
  if (this->bartime().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bartime());
  }

  // optional int32 volume = 6;
  if (this->volume() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->volume());
  }

  // optional double openInterest = 7;
  if (this->openinterest() != 0) {
    total_size += 1 + 8;
  }

  // optional int32 lastVolume = 8;
  if (this->lastvolume() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lastvolume());
  }

  // optional double openPrice = 9;
  if (this->openprice() != 0) {
    total_size += 1 + 8;
  }

  // optional double highPrice = 10;
  if (this->highprice() != 0) {
    total_size += 1 + 8;
  }

  // optional double lowPrice = 11;
  if (this->lowprice() != 0) {
    total_size += 1 + 8;
  }

  // optional double closePrice = 12;
  if (this->closeprice() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BfBarData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bfdatafeed.BfBarData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BfBarData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BfBarData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bfdatafeed.BfBarData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bfdatafeed.BfBarData)
    MergeFrom(*source);
  }
}

void BfBarData::MergeFrom(const BfBarData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bfdatafeed.BfBarData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.symbol().size() > 0) {

    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  if (from.exchange().size() > 0) {

    exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
  }
  if (from.period() != 0) {
    set_period(from.period());
  }
  if (from.actiondate().size() > 0) {

    actiondate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.actiondate_);
  }
  if (from.bartime().size() > 0) {

    bartime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bartime_);
  }
  if (from.volume() != 0) {
    set_volume(from.volume());
  }
  if (from.openinterest() != 0) {
    set_openinterest(from.openinterest());
  }
  if (from.lastvolume() != 0) {
    set_lastvolume(from.lastvolume());
  }
  if (from.openprice() != 0) {
    set_openprice(from.openprice());
  }
  if (from.highprice() != 0) {
    set_highprice(from.highprice());
  }
  if (from.lowprice() != 0) {
    set_lowprice(from.lowprice());
  }
  if (from.closeprice() != 0) {
    set_closeprice(from.closeprice());
  }
}

void BfBarData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bfdatafeed.BfBarData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BfBarData::CopyFrom(const BfBarData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bfdatafeed.BfBarData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BfBarData::IsInitialized() const {

  return true;
}

void BfBarData::Swap(BfBarData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BfBarData::InternalSwap(BfBarData* other) {
  symbol_.Swap(&other->symbol_);
  exchange_.Swap(&other->exchange_);
  std::swap(period_, other->period_);
  actiondate_.Swap(&other->actiondate_);
  bartime_.Swap(&other->bartime_);
  std::swap(volume_, other->volume_);
  std::swap(openinterest_, other->openinterest_);
  std::swap(lastvolume_, other->lastvolume_);
  std::swap(openprice_, other->openprice_);
  std::swap(highprice_, other->highprice_);
  std::swap(lowprice_, other->lowprice_);
  std::swap(closeprice_, other->closeprice_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BfBarData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BfBarData_descriptor_;
  metadata.reflection = BfBarData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BfBarData

// optional string symbol = 1;
void BfBarData::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& BfBarData::symbol() const {
  // @@protoc_insertion_point(field_get:bfdatafeed.BfBarData.symbol)
  return symbol_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfBarData::set_symbol(const ::std::string& value) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bfdatafeed.BfBarData.symbol)
}
 void BfBarData::set_symbol(const char* value) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bfdatafeed.BfBarData.symbol)
}
 void BfBarData::set_symbol(const char* value, size_t size) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bfdatafeed.BfBarData.symbol)
}
 ::std::string* BfBarData::mutable_symbol() {
  
  // @@protoc_insertion_point(field_mutable:bfdatafeed.BfBarData.symbol)
  return symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BfBarData::release_symbol() {
  // @@protoc_insertion_point(field_release:bfdatafeed.BfBarData.symbol)
  
  return symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfBarData::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:bfdatafeed.BfBarData.symbol)
}

// optional string exchange = 2;
void BfBarData::clear_exchange() {
  exchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& BfBarData::exchange() const {
  // @@protoc_insertion_point(field_get:bfdatafeed.BfBarData.exchange)
  return exchange_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfBarData::set_exchange(const ::std::string& value) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bfdatafeed.BfBarData.exchange)
}
 void BfBarData::set_exchange(const char* value) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bfdatafeed.BfBarData.exchange)
}
 void BfBarData::set_exchange(const char* value, size_t size) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bfdatafeed.BfBarData.exchange)
}
 ::std::string* BfBarData::mutable_exchange() {
  
  // @@protoc_insertion_point(field_mutable:bfdatafeed.BfBarData.exchange)
  return exchange_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BfBarData::release_exchange() {
  // @@protoc_insertion_point(field_release:bfdatafeed.BfBarData.exchange)
  
  return exchange_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfBarData::set_allocated_exchange(::std::string* exchange) {
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange);
  // @@protoc_insertion_point(field_set_allocated:bfdatafeed.BfBarData.exchange)
}

// optional .bfdatafeed.BfBarPeriod period = 3;
void BfBarData::clear_period() {
  period_ = 0;
}
 ::bfdatafeed::BfBarPeriod BfBarData::period() const {
  // @@protoc_insertion_point(field_get:bfdatafeed.BfBarData.period)
  return static_cast< ::bfdatafeed::BfBarPeriod >(period_);
}
 void BfBarData::set_period(::bfdatafeed::BfBarPeriod value) {
  
  period_ = value;
  // @@protoc_insertion_point(field_set:bfdatafeed.BfBarData.period)
}

// optional string actionDate = 4;
void BfBarData::clear_actiondate() {
  actiondate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& BfBarData::actiondate() const {
  // @@protoc_insertion_point(field_get:bfdatafeed.BfBarData.actionDate)
  return actiondate_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfBarData::set_actiondate(const ::std::string& value) {
  
  actiondate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bfdatafeed.BfBarData.actionDate)
}
 void BfBarData::set_actiondate(const char* value) {
  
  actiondate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bfdatafeed.BfBarData.actionDate)
}
 void BfBarData::set_actiondate(const char* value, size_t size) {
  
  actiondate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bfdatafeed.BfBarData.actionDate)
}
 ::std::string* BfBarData::mutable_actiondate() {
  
  // @@protoc_insertion_point(field_mutable:bfdatafeed.BfBarData.actionDate)
  return actiondate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BfBarData::release_actiondate() {
  // @@protoc_insertion_point(field_release:bfdatafeed.BfBarData.actionDate)
  
  return actiondate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfBarData::set_allocated_actiondate(::std::string* actiondate) {
  if (actiondate != NULL) {
    
  } else {
    
  }
  actiondate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), actiondate);
  // @@protoc_insertion_point(field_set_allocated:bfdatafeed.BfBarData.actionDate)
}

// optional string barTime = 5;
void BfBarData::clear_bartime() {
  bartime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& BfBarData::bartime() const {
  // @@protoc_insertion_point(field_get:bfdatafeed.BfBarData.barTime)
  return bartime_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfBarData::set_bartime(const ::std::string& value) {
  
  bartime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bfdatafeed.BfBarData.barTime)
}
 void BfBarData::set_bartime(const char* value) {
  
  bartime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bfdatafeed.BfBarData.barTime)
}
 void BfBarData::set_bartime(const char* value, size_t size) {
  
  bartime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bfdatafeed.BfBarData.barTime)
}
 ::std::string* BfBarData::mutable_bartime() {
  
  // @@protoc_insertion_point(field_mutable:bfdatafeed.BfBarData.barTime)
  return bartime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BfBarData::release_bartime() {
  // @@protoc_insertion_point(field_release:bfdatafeed.BfBarData.barTime)
  
  return bartime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfBarData::set_allocated_bartime(::std::string* bartime) {
  if (bartime != NULL) {
    
  } else {
    
  }
  bartime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bartime);
  // @@protoc_insertion_point(field_set_allocated:bfdatafeed.BfBarData.barTime)
}

// optional int32 volume = 6;
void BfBarData::clear_volume() {
  volume_ = 0;
}
 ::google::protobuf::int32 BfBarData::volume() const {
  // @@protoc_insertion_point(field_get:bfdatafeed.BfBarData.volume)
  return volume_;
}
 void BfBarData::set_volume(::google::protobuf::int32 value) {
  
  volume_ = value;
  // @@protoc_insertion_point(field_set:bfdatafeed.BfBarData.volume)
}

// optional double openInterest = 7;
void BfBarData::clear_openinterest() {
  openinterest_ = 0;
}
 double BfBarData::openinterest() const {
  // @@protoc_insertion_point(field_get:bfdatafeed.BfBarData.openInterest)
  return openinterest_;
}
 void BfBarData::set_openinterest(double value) {
  
  openinterest_ = value;
  // @@protoc_insertion_point(field_set:bfdatafeed.BfBarData.openInterest)
}

// optional int32 lastVolume = 8;
void BfBarData::clear_lastvolume() {
  lastvolume_ = 0;
}
 ::google::protobuf::int32 BfBarData::lastvolume() const {
  // @@protoc_insertion_point(field_get:bfdatafeed.BfBarData.lastVolume)
  return lastvolume_;
}
 void BfBarData::set_lastvolume(::google::protobuf::int32 value) {
  
  lastvolume_ = value;
  // @@protoc_insertion_point(field_set:bfdatafeed.BfBarData.lastVolume)
}

// optional double openPrice = 9;
void BfBarData::clear_openprice() {
  openprice_ = 0;
}
 double BfBarData::openprice() const {
  // @@protoc_insertion_point(field_get:bfdatafeed.BfBarData.openPrice)
  return openprice_;
}
 void BfBarData::set_openprice(double value) {
  
  openprice_ = value;
  // @@protoc_insertion_point(field_set:bfdatafeed.BfBarData.openPrice)
}

// optional double highPrice = 10;
void BfBarData::clear_highprice() {
  highprice_ = 0;
}
 double BfBarData::highprice() const {
  // @@protoc_insertion_point(field_get:bfdatafeed.BfBarData.highPrice)
  return highprice_;
}
 void BfBarData::set_highprice(double value) {
  
  highprice_ = value;
  // @@protoc_insertion_point(field_set:bfdatafeed.BfBarData.highPrice)
}

// optional double lowPrice = 11;
void BfBarData::clear_lowprice() {
  lowprice_ = 0;
}
 double BfBarData::lowprice() const {
  // @@protoc_insertion_point(field_get:bfdatafeed.BfBarData.lowPrice)
  return lowprice_;
}
 void BfBarData::set_lowprice(double value) {
  
  lowprice_ = value;
  // @@protoc_insertion_point(field_set:bfdatafeed.BfBarData.lowPrice)
}

// optional double closePrice = 12;
void BfBarData::clear_closeprice() {
  closeprice_ = 0;
}
 double BfBarData::closeprice() const {
  // @@protoc_insertion_point(field_get:bfdatafeed.BfBarData.closePrice)
  return closeprice_;
}
 void BfBarData::set_closeprice(double value) {
  
  closeprice_ = value;
  // @@protoc_insertion_point(field_set:bfdatafeed.BfBarData.closePrice)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BfGetTickReq::kSymbolFieldNumber;
const int BfGetTickReq::kExchangeFieldNumber;
const int BfGetTickReq::kToDateFieldNumber;
const int BfGetTickReq::kToTimeFieldNumber;
const int BfGetTickReq::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BfGetTickReq::BfGetTickReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bfdatafeed.BfGetTickReq)
}

void BfGetTickReq::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BfGetTickReq::BfGetTickReq(const BfGetTickReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bfdatafeed.BfGetTickReq)
}

void BfGetTickReq::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  todate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  totime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  count_ = 0;
}

BfGetTickReq::~BfGetTickReq() {
  // @@protoc_insertion_point(destructor:bfdatafeed.BfGetTickReq)
  SharedDtor();
}

void BfGetTickReq::SharedDtor() {
  symbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  todate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  totime_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BfGetTickReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BfGetTickReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BfGetTickReq_descriptor_;
}

const BfGetTickReq& BfGetTickReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bfdatafeed_2eproto();
  return *default_instance_;
}

BfGetTickReq* BfGetTickReq::default_instance_ = NULL;

BfGetTickReq* BfGetTickReq::New(::google::protobuf::Arena* arena) const {
  BfGetTickReq* n = new BfGetTickReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BfGetTickReq::Clear() {
// @@protoc_insertion_point(message_clear_start:bfdatafeed.BfGetTickReq)
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  todate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  totime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  count_ = 0;
}

bool BfGetTickReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bfdatafeed.BfGetTickReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string symbol = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bfdatafeed.BfGetTickReq.symbol"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_exchange;
        break;
      }

      // optional string exchange = 2;
      case 2: {
        if (tag == 18) {
         parse_exchange:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exchange().data(), this->exchange().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bfdatafeed.BfGetTickReq.exchange"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_toDate;
        break;
      }

      // optional string toDate = 3;
      case 3: {
        if (tag == 26) {
         parse_toDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_todate()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->todate().data(), this->todate().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bfdatafeed.BfGetTickReq.toDate"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_toTime;
        break;
      }

      // optional string toTime = 4;
      case 4: {
        if (tag == 34) {
         parse_toTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_totime()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->totime().data(), this->totime().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bfdatafeed.BfGetTickReq.toTime"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_count;
        break;
      }

      // optional int32 count = 5;
      case 5: {
        if (tag == 40) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bfdatafeed.BfGetTickReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bfdatafeed.BfGetTickReq)
  return false;
#undef DO_
}

void BfGetTickReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bfdatafeed.BfGetTickReq)
  // optional string symbol = 1;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bfdatafeed.BfGetTickReq.symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->symbol(), output);
  }

  // optional string exchange = 2;
  if (this->exchange().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bfdatafeed.BfGetTickReq.exchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->exchange(), output);
  }

  // optional string toDate = 3;
  if (this->todate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->todate().data(), this->todate().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bfdatafeed.BfGetTickReq.toDate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->todate(), output);
  }

  // optional string toTime = 4;
  if (this->totime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->totime().data(), this->totime().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bfdatafeed.BfGetTickReq.toTime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->totime(), output);
  }

  // optional int32 count = 5;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->count(), output);
  }

  // @@protoc_insertion_point(serialize_end:bfdatafeed.BfGetTickReq)
}

::google::protobuf::uint8* BfGetTickReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bfdatafeed.BfGetTickReq)
  // optional string symbol = 1;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bfdatafeed.BfGetTickReq.symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->symbol(), target);
  }

  // optional string exchange = 2;
  if (this->exchange().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bfdatafeed.BfGetTickReq.exchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->exchange(), target);
  }

  // optional string toDate = 3;
  if (this->todate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->todate().data(), this->todate().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bfdatafeed.BfGetTickReq.toDate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->todate(), target);
  }

  // optional string toTime = 4;
  if (this->totime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->totime().data(), this->totime().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bfdatafeed.BfGetTickReq.toTime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->totime(), target);
  }

  // optional int32 count = 5;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->count(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:bfdatafeed.BfGetTickReq)
  return target;
}

int BfGetTickReq::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:bfdatafeed.BfGetTickReq)
  int total_size = 0;

  // optional string symbol = 1;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->symbol());
  }

  // optional string exchange = 2;
  if (this->exchange().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchange());
  }

  // optional string toDate = 3;
  if (this->todate().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->todate());
  }

  // optional string toTime = 4;
  if (this->totime().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->totime());
  }

  // optional int32 count = 5;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BfGetTickReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bfdatafeed.BfGetTickReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BfGetTickReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BfGetTickReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bfdatafeed.BfGetTickReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bfdatafeed.BfGetTickReq)
    MergeFrom(*source);
  }
}

void BfGetTickReq::MergeFrom(const BfGetTickReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bfdatafeed.BfGetTickReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.symbol().size() > 0) {

    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  if (from.exchange().size() > 0) {

    exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
  }
  if (from.todate().size() > 0) {

    todate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.todate_);
  }
  if (from.totime().size() > 0) {

    totime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.totime_);
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
}

void BfGetTickReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bfdatafeed.BfGetTickReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BfGetTickReq::CopyFrom(const BfGetTickReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bfdatafeed.BfGetTickReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BfGetTickReq::IsInitialized() const {

  return true;
}

void BfGetTickReq::Swap(BfGetTickReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BfGetTickReq::InternalSwap(BfGetTickReq* other) {
  symbol_.Swap(&other->symbol_);
  exchange_.Swap(&other->exchange_);
  todate_.Swap(&other->todate_);
  totime_.Swap(&other->totime_);
  std::swap(count_, other->count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BfGetTickReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BfGetTickReq_descriptor_;
  metadata.reflection = BfGetTickReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BfGetTickReq

// optional string symbol = 1;
void BfGetTickReq::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& BfGetTickReq::symbol() const {
  // @@protoc_insertion_point(field_get:bfdatafeed.BfGetTickReq.symbol)
  return symbol_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfGetTickReq::set_symbol(const ::std::string& value) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bfdatafeed.BfGetTickReq.symbol)
}
 void BfGetTickReq::set_symbol(const char* value) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bfdatafeed.BfGetTickReq.symbol)
}
 void BfGetTickReq::set_symbol(const char* value, size_t size) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bfdatafeed.BfGetTickReq.symbol)
}
 ::std::string* BfGetTickReq::mutable_symbol() {
  
  // @@protoc_insertion_point(field_mutable:bfdatafeed.BfGetTickReq.symbol)
  return symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BfGetTickReq::release_symbol() {
  // @@protoc_insertion_point(field_release:bfdatafeed.BfGetTickReq.symbol)
  
  return symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfGetTickReq::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:bfdatafeed.BfGetTickReq.symbol)
}

// optional string exchange = 2;
void BfGetTickReq::clear_exchange() {
  exchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& BfGetTickReq::exchange() const {
  // @@protoc_insertion_point(field_get:bfdatafeed.BfGetTickReq.exchange)
  return exchange_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfGetTickReq::set_exchange(const ::std::string& value) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bfdatafeed.BfGetTickReq.exchange)
}
 void BfGetTickReq::set_exchange(const char* value) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bfdatafeed.BfGetTickReq.exchange)
}
 void BfGetTickReq::set_exchange(const char* value, size_t size) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bfdatafeed.BfGetTickReq.exchange)
}
 ::std::string* BfGetTickReq::mutable_exchange() {
  
  // @@protoc_insertion_point(field_mutable:bfdatafeed.BfGetTickReq.exchange)
  return exchange_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BfGetTickReq::release_exchange() {
  // @@protoc_insertion_point(field_release:bfdatafeed.BfGetTickReq.exchange)
  
  return exchange_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfGetTickReq::set_allocated_exchange(::std::string* exchange) {
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange);
  // @@protoc_insertion_point(field_set_allocated:bfdatafeed.BfGetTickReq.exchange)
}

// optional string toDate = 3;
void BfGetTickReq::clear_todate() {
  todate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& BfGetTickReq::todate() const {
  // @@protoc_insertion_point(field_get:bfdatafeed.BfGetTickReq.toDate)
  return todate_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfGetTickReq::set_todate(const ::std::string& value) {
  
  todate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bfdatafeed.BfGetTickReq.toDate)
}
 void BfGetTickReq::set_todate(const char* value) {
  
  todate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bfdatafeed.BfGetTickReq.toDate)
}
 void BfGetTickReq::set_todate(const char* value, size_t size) {
  
  todate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bfdatafeed.BfGetTickReq.toDate)
}
 ::std::string* BfGetTickReq::mutable_todate() {
  
  // @@protoc_insertion_point(field_mutable:bfdatafeed.BfGetTickReq.toDate)
  return todate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BfGetTickReq::release_todate() {
  // @@protoc_insertion_point(field_release:bfdatafeed.BfGetTickReq.toDate)
  
  return todate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfGetTickReq::set_allocated_todate(::std::string* todate) {
  if (todate != NULL) {
    
  } else {
    
  }
  todate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), todate);
  // @@protoc_insertion_point(field_set_allocated:bfdatafeed.BfGetTickReq.toDate)
}

// optional string toTime = 4;
void BfGetTickReq::clear_totime() {
  totime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& BfGetTickReq::totime() const {
  // @@protoc_insertion_point(field_get:bfdatafeed.BfGetTickReq.toTime)
  return totime_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfGetTickReq::set_totime(const ::std::string& value) {
  
  totime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bfdatafeed.BfGetTickReq.toTime)
}
 void BfGetTickReq::set_totime(const char* value) {
  
  totime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bfdatafeed.BfGetTickReq.toTime)
}
 void BfGetTickReq::set_totime(const char* value, size_t size) {
  
  totime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bfdatafeed.BfGetTickReq.toTime)
}
 ::std::string* BfGetTickReq::mutable_totime() {
  
  // @@protoc_insertion_point(field_mutable:bfdatafeed.BfGetTickReq.toTime)
  return totime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BfGetTickReq::release_totime() {
  // @@protoc_insertion_point(field_release:bfdatafeed.BfGetTickReq.toTime)
  
  return totime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfGetTickReq::set_allocated_totime(::std::string* totime) {
  if (totime != NULL) {
    
  } else {
    
  }
  totime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), totime);
  // @@protoc_insertion_point(field_set_allocated:bfdatafeed.BfGetTickReq.toTime)
}

// optional int32 count = 5;
void BfGetTickReq::clear_count() {
  count_ = 0;
}
 ::google::protobuf::int32 BfGetTickReq::count() const {
  // @@protoc_insertion_point(field_get:bfdatafeed.BfGetTickReq.count)
  return count_;
}
 void BfGetTickReq::set_count(::google::protobuf::int32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:bfdatafeed.BfGetTickReq.count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BfGetBarReq::kSymbolFieldNumber;
const int BfGetBarReq::kExchangeFieldNumber;
const int BfGetBarReq::kPeriodFieldNumber;
const int BfGetBarReq::kToDateFieldNumber;
const int BfGetBarReq::kToTimeFieldNumber;
const int BfGetBarReq::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BfGetBarReq::BfGetBarReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bfdatafeed.BfGetBarReq)
}

void BfGetBarReq::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BfGetBarReq::BfGetBarReq(const BfGetBarReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bfdatafeed.BfGetBarReq)
}

void BfGetBarReq::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  period_ = 0;
  todate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  totime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  count_ = 0;
}

BfGetBarReq::~BfGetBarReq() {
  // @@protoc_insertion_point(destructor:bfdatafeed.BfGetBarReq)
  SharedDtor();
}

void BfGetBarReq::SharedDtor() {
  symbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  todate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  totime_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BfGetBarReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BfGetBarReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BfGetBarReq_descriptor_;
}

const BfGetBarReq& BfGetBarReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bfdatafeed_2eproto();
  return *default_instance_;
}

BfGetBarReq* BfGetBarReq::default_instance_ = NULL;

BfGetBarReq* BfGetBarReq::New(::google::protobuf::Arena* arena) const {
  BfGetBarReq* n = new BfGetBarReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BfGetBarReq::Clear() {
// @@protoc_insertion_point(message_clear_start:bfdatafeed.BfGetBarReq)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BfGetBarReq, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BfGetBarReq*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(period_, count_);
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  todate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  totime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool BfGetBarReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bfdatafeed.BfGetBarReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string symbol = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bfdatafeed.BfGetBarReq.symbol"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_exchange;
        break;
      }

      // optional string exchange = 2;
      case 2: {
        if (tag == 18) {
         parse_exchange:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exchange().data(), this->exchange().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bfdatafeed.BfGetBarReq.exchange"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_period;
        break;
      }

      // optional .bfdatafeed.BfBarPeriod period = 3;
      case 3: {
        if (tag == 24) {
         parse_period:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_period(static_cast< ::bfdatafeed::BfBarPeriod >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_toDate;
        break;
      }

      // optional string toDate = 4;
      case 4: {
        if (tag == 34) {
         parse_toDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_todate()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->todate().data(), this->todate().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bfdatafeed.BfGetBarReq.toDate"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_toTime;
        break;
      }

      // optional string toTime = 5;
      case 5: {
        if (tag == 42) {
         parse_toTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_totime()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->totime().data(), this->totime().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bfdatafeed.BfGetBarReq.toTime"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_count;
        break;
      }

      // optional int32 count = 6;
      case 6: {
        if (tag == 48) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bfdatafeed.BfGetBarReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bfdatafeed.BfGetBarReq)
  return false;
#undef DO_
}

void BfGetBarReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bfdatafeed.BfGetBarReq)
  // optional string symbol = 1;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bfdatafeed.BfGetBarReq.symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->symbol(), output);
  }

  // optional string exchange = 2;
  if (this->exchange().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bfdatafeed.BfGetBarReq.exchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->exchange(), output);
  }

  // optional .bfdatafeed.BfBarPeriod period = 3;
  if (this->period() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->period(), output);
  }

  // optional string toDate = 4;
  if (this->todate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->todate().data(), this->todate().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bfdatafeed.BfGetBarReq.toDate");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->todate(), output);
  }

  // optional string toTime = 5;
  if (this->totime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->totime().data(), this->totime().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bfdatafeed.BfGetBarReq.toTime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->totime(), output);
  }

  // optional int32 count = 6;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->count(), output);
  }

  // @@protoc_insertion_point(serialize_end:bfdatafeed.BfGetBarReq)
}

::google::protobuf::uint8* BfGetBarReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bfdatafeed.BfGetBarReq)
  // optional string symbol = 1;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bfdatafeed.BfGetBarReq.symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->symbol(), target);
  }

  // optional string exchange = 2;
  if (this->exchange().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bfdatafeed.BfGetBarReq.exchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->exchange(), target);
  }

  // optional .bfdatafeed.BfBarPeriod period = 3;
  if (this->period() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->period(), target);
  }

  // optional string toDate = 4;
  if (this->todate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->todate().data(), this->todate().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bfdatafeed.BfGetBarReq.toDate");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->todate(), target);
  }

  // optional string toTime = 5;
  if (this->totime().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->totime().data(), this->totime().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bfdatafeed.BfGetBarReq.toTime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->totime(), target);
  }

  // optional int32 count = 6;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->count(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:bfdatafeed.BfGetBarReq)
  return target;
}

int BfGetBarReq::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:bfdatafeed.BfGetBarReq)
  int total_size = 0;

  // optional string symbol = 1;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->symbol());
  }

  // optional string exchange = 2;
  if (this->exchange().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchange());
  }

  // optional .bfdatafeed.BfBarPeriod period = 3;
  if (this->period() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->period());
  }

  // optional string toDate = 4;
  if (this->todate().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->todate());
  }

  // optional string toTime = 5;
  if (this->totime().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->totime());
  }

  // optional int32 count = 6;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BfGetBarReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bfdatafeed.BfGetBarReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BfGetBarReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BfGetBarReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bfdatafeed.BfGetBarReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bfdatafeed.BfGetBarReq)
    MergeFrom(*source);
  }
}

void BfGetBarReq::MergeFrom(const BfGetBarReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bfdatafeed.BfGetBarReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.symbol().size() > 0) {

    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  if (from.exchange().size() > 0) {

    exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
  }
  if (from.period() != 0) {
    set_period(from.period());
  }
  if (from.todate().size() > 0) {

    todate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.todate_);
  }
  if (from.totime().size() > 0) {

    totime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.totime_);
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
}

void BfGetBarReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bfdatafeed.BfGetBarReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BfGetBarReq::CopyFrom(const BfGetBarReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bfdatafeed.BfGetBarReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BfGetBarReq::IsInitialized() const {

  return true;
}

void BfGetBarReq::Swap(BfGetBarReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BfGetBarReq::InternalSwap(BfGetBarReq* other) {
  symbol_.Swap(&other->symbol_);
  exchange_.Swap(&other->exchange_);
  std::swap(period_, other->period_);
  todate_.Swap(&other->todate_);
  totime_.Swap(&other->totime_);
  std::swap(count_, other->count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BfGetBarReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BfGetBarReq_descriptor_;
  metadata.reflection = BfGetBarReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BfGetBarReq

// optional string symbol = 1;
void BfGetBarReq::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& BfGetBarReq::symbol() const {
  // @@protoc_insertion_point(field_get:bfdatafeed.BfGetBarReq.symbol)
  return symbol_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfGetBarReq::set_symbol(const ::std::string& value) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bfdatafeed.BfGetBarReq.symbol)
}
 void BfGetBarReq::set_symbol(const char* value) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bfdatafeed.BfGetBarReq.symbol)
}
 void BfGetBarReq::set_symbol(const char* value, size_t size) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bfdatafeed.BfGetBarReq.symbol)
}
 ::std::string* BfGetBarReq::mutable_symbol() {
  
  // @@protoc_insertion_point(field_mutable:bfdatafeed.BfGetBarReq.symbol)
  return symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BfGetBarReq::release_symbol() {
  // @@protoc_insertion_point(field_release:bfdatafeed.BfGetBarReq.symbol)
  
  return symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfGetBarReq::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:bfdatafeed.BfGetBarReq.symbol)
}

// optional string exchange = 2;
void BfGetBarReq::clear_exchange() {
  exchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& BfGetBarReq::exchange() const {
  // @@protoc_insertion_point(field_get:bfdatafeed.BfGetBarReq.exchange)
  return exchange_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfGetBarReq::set_exchange(const ::std::string& value) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bfdatafeed.BfGetBarReq.exchange)
}
 void BfGetBarReq::set_exchange(const char* value) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bfdatafeed.BfGetBarReq.exchange)
}
 void BfGetBarReq::set_exchange(const char* value, size_t size) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bfdatafeed.BfGetBarReq.exchange)
}
 ::std::string* BfGetBarReq::mutable_exchange() {
  
  // @@protoc_insertion_point(field_mutable:bfdatafeed.BfGetBarReq.exchange)
  return exchange_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BfGetBarReq::release_exchange() {
  // @@protoc_insertion_point(field_release:bfdatafeed.BfGetBarReq.exchange)
  
  return exchange_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfGetBarReq::set_allocated_exchange(::std::string* exchange) {
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange);
  // @@protoc_insertion_point(field_set_allocated:bfdatafeed.BfGetBarReq.exchange)
}

// optional .bfdatafeed.BfBarPeriod period = 3;
void BfGetBarReq::clear_period() {
  period_ = 0;
}
 ::bfdatafeed::BfBarPeriod BfGetBarReq::period() const {
  // @@protoc_insertion_point(field_get:bfdatafeed.BfGetBarReq.period)
  return static_cast< ::bfdatafeed::BfBarPeriod >(period_);
}
 void BfGetBarReq::set_period(::bfdatafeed::BfBarPeriod value) {
  
  period_ = value;
  // @@protoc_insertion_point(field_set:bfdatafeed.BfGetBarReq.period)
}

// optional string toDate = 4;
void BfGetBarReq::clear_todate() {
  todate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& BfGetBarReq::todate() const {
  // @@protoc_insertion_point(field_get:bfdatafeed.BfGetBarReq.toDate)
  return todate_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfGetBarReq::set_todate(const ::std::string& value) {
  
  todate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bfdatafeed.BfGetBarReq.toDate)
}
 void BfGetBarReq::set_todate(const char* value) {
  
  todate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bfdatafeed.BfGetBarReq.toDate)
}
 void BfGetBarReq::set_todate(const char* value, size_t size) {
  
  todate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bfdatafeed.BfGetBarReq.toDate)
}
 ::std::string* BfGetBarReq::mutable_todate() {
  
  // @@protoc_insertion_point(field_mutable:bfdatafeed.BfGetBarReq.toDate)
  return todate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BfGetBarReq::release_todate() {
  // @@protoc_insertion_point(field_release:bfdatafeed.BfGetBarReq.toDate)
  
  return todate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfGetBarReq::set_allocated_todate(::std::string* todate) {
  if (todate != NULL) {
    
  } else {
    
  }
  todate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), todate);
  // @@protoc_insertion_point(field_set_allocated:bfdatafeed.BfGetBarReq.toDate)
}

// optional string toTime = 5;
void BfGetBarReq::clear_totime() {
  totime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& BfGetBarReq::totime() const {
  // @@protoc_insertion_point(field_get:bfdatafeed.BfGetBarReq.toTime)
  return totime_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfGetBarReq::set_totime(const ::std::string& value) {
  
  totime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bfdatafeed.BfGetBarReq.toTime)
}
 void BfGetBarReq::set_totime(const char* value) {
  
  totime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bfdatafeed.BfGetBarReq.toTime)
}
 void BfGetBarReq::set_totime(const char* value, size_t size) {
  
  totime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bfdatafeed.BfGetBarReq.toTime)
}
 ::std::string* BfGetBarReq::mutable_totime() {
  
  // @@protoc_insertion_point(field_mutable:bfdatafeed.BfGetBarReq.toTime)
  return totime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BfGetBarReq::release_totime() {
  // @@protoc_insertion_point(field_release:bfdatafeed.BfGetBarReq.toTime)
  
  return totime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfGetBarReq::set_allocated_totime(::std::string* totime) {
  if (totime != NULL) {
    
  } else {
    
  }
  totime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), totime);
  // @@protoc_insertion_point(field_set_allocated:bfdatafeed.BfGetBarReq.toTime)
}

// optional int32 count = 6;
void BfGetBarReq::clear_count() {
  count_ = 0;
}
 ::google::protobuf::int32 BfGetBarReq::count() const {
  // @@protoc_insertion_point(field_get:bfdatafeed.BfGetBarReq.count)
  return count_;
}
 void BfGetBarReq::set_count(::google::protobuf::int32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:bfdatafeed.BfGetBarReq.count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BfDatafeedGetContractReq::kSymbolFieldNumber;
const int BfDatafeedGetContractReq::kExchangeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BfDatafeedGetContractReq::BfDatafeedGetContractReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bfdatafeed.BfDatafeedGetContractReq)
}

void BfDatafeedGetContractReq::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BfDatafeedGetContractReq::BfDatafeedGetContractReq(const BfDatafeedGetContractReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bfdatafeed.BfDatafeedGetContractReq)
}

void BfDatafeedGetContractReq::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

BfDatafeedGetContractReq::~BfDatafeedGetContractReq() {
  // @@protoc_insertion_point(destructor:bfdatafeed.BfDatafeedGetContractReq)
  SharedDtor();
}

void BfDatafeedGetContractReq::SharedDtor() {
  symbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BfDatafeedGetContractReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BfDatafeedGetContractReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BfDatafeedGetContractReq_descriptor_;
}

const BfDatafeedGetContractReq& BfDatafeedGetContractReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bfdatafeed_2eproto();
  return *default_instance_;
}

BfDatafeedGetContractReq* BfDatafeedGetContractReq::default_instance_ = NULL;

BfDatafeedGetContractReq* BfDatafeedGetContractReq::New(::google::protobuf::Arena* arena) const {
  BfDatafeedGetContractReq* n = new BfDatafeedGetContractReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BfDatafeedGetContractReq::Clear() {
// @@protoc_insertion_point(message_clear_start:bfdatafeed.BfDatafeedGetContractReq)
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool BfDatafeedGetContractReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bfdatafeed.BfDatafeedGetContractReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string symbol = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bfdatafeed.BfDatafeedGetContractReq.symbol"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_exchange;
        break;
      }

      // optional string exchange = 2;
      case 2: {
        if (tag == 18) {
         parse_exchange:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exchange().data(), this->exchange().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bfdatafeed.BfDatafeedGetContractReq.exchange"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bfdatafeed.BfDatafeedGetContractReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bfdatafeed.BfDatafeedGetContractReq)
  return false;
#undef DO_
}

void BfDatafeedGetContractReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bfdatafeed.BfDatafeedGetContractReq)
  // optional string symbol = 1;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bfdatafeed.BfDatafeedGetContractReq.symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->symbol(), output);
  }

  // optional string exchange = 2;
  if (this->exchange().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bfdatafeed.BfDatafeedGetContractReq.exchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->exchange(), output);
  }

  // @@protoc_insertion_point(serialize_end:bfdatafeed.BfDatafeedGetContractReq)
}

::google::protobuf::uint8* BfDatafeedGetContractReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bfdatafeed.BfDatafeedGetContractReq)
  // optional string symbol = 1;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bfdatafeed.BfDatafeedGetContractReq.symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->symbol(), target);
  }

  // optional string exchange = 2;
  if (this->exchange().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bfdatafeed.BfDatafeedGetContractReq.exchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->exchange(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:bfdatafeed.BfDatafeedGetContractReq)
  return target;
}

int BfDatafeedGetContractReq::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:bfdatafeed.BfDatafeedGetContractReq)
  int total_size = 0;

  // optional string symbol = 1;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->symbol());
  }

  // optional string exchange = 2;
  if (this->exchange().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchange());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BfDatafeedGetContractReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bfdatafeed.BfDatafeedGetContractReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BfDatafeedGetContractReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BfDatafeedGetContractReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bfdatafeed.BfDatafeedGetContractReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bfdatafeed.BfDatafeedGetContractReq)
    MergeFrom(*source);
  }
}

void BfDatafeedGetContractReq::MergeFrom(const BfDatafeedGetContractReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bfdatafeed.BfDatafeedGetContractReq)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.symbol().size() > 0) {

    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  if (from.exchange().size() > 0) {

    exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
  }
}

void BfDatafeedGetContractReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bfdatafeed.BfDatafeedGetContractReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BfDatafeedGetContractReq::CopyFrom(const BfDatafeedGetContractReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bfdatafeed.BfDatafeedGetContractReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BfDatafeedGetContractReq::IsInitialized() const {

  return true;
}

void BfDatafeedGetContractReq::Swap(BfDatafeedGetContractReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BfDatafeedGetContractReq::InternalSwap(BfDatafeedGetContractReq* other) {
  symbol_.Swap(&other->symbol_);
  exchange_.Swap(&other->exchange_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BfDatafeedGetContractReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BfDatafeedGetContractReq_descriptor_;
  metadata.reflection = BfDatafeedGetContractReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BfDatafeedGetContractReq

// optional string symbol = 1;
void BfDatafeedGetContractReq::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& BfDatafeedGetContractReq::symbol() const {
  // @@protoc_insertion_point(field_get:bfdatafeed.BfDatafeedGetContractReq.symbol)
  return symbol_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfDatafeedGetContractReq::set_symbol(const ::std::string& value) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bfdatafeed.BfDatafeedGetContractReq.symbol)
}
 void BfDatafeedGetContractReq::set_symbol(const char* value) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bfdatafeed.BfDatafeedGetContractReq.symbol)
}
 void BfDatafeedGetContractReq::set_symbol(const char* value, size_t size) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bfdatafeed.BfDatafeedGetContractReq.symbol)
}
 ::std::string* BfDatafeedGetContractReq::mutable_symbol() {
  
  // @@protoc_insertion_point(field_mutable:bfdatafeed.BfDatafeedGetContractReq.symbol)
  return symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BfDatafeedGetContractReq::release_symbol() {
  // @@protoc_insertion_point(field_release:bfdatafeed.BfDatafeedGetContractReq.symbol)
  
  return symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfDatafeedGetContractReq::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:bfdatafeed.BfDatafeedGetContractReq.symbol)
}

// optional string exchange = 2;
void BfDatafeedGetContractReq::clear_exchange() {
  exchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& BfDatafeedGetContractReq::exchange() const {
  // @@protoc_insertion_point(field_get:bfdatafeed.BfDatafeedGetContractReq.exchange)
  return exchange_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfDatafeedGetContractReq::set_exchange(const ::std::string& value) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bfdatafeed.BfDatafeedGetContractReq.exchange)
}
 void BfDatafeedGetContractReq::set_exchange(const char* value) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bfdatafeed.BfDatafeedGetContractReq.exchange)
}
 void BfDatafeedGetContractReq::set_exchange(const char* value, size_t size) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bfdatafeed.BfDatafeedGetContractReq.exchange)
}
 ::std::string* BfDatafeedGetContractReq::mutable_exchange() {
  
  // @@protoc_insertion_point(field_mutable:bfdatafeed.BfDatafeedGetContractReq.exchange)
  return exchange_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BfDatafeedGetContractReq::release_exchange() {
  // @@protoc_insertion_point(field_release:bfdatafeed.BfDatafeedGetContractReq.exchange)
  
  return exchange_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfDatafeedGetContractReq::set_allocated_exchange(::std::string* exchange) {
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange);
  // @@protoc_insertion_point(field_set_allocated:bfdatafeed.BfDatafeedGetContractReq.exchange)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace bfdatafeed

// @@protoc_insertion_point(global_scope)
