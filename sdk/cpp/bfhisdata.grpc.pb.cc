// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: bfhisdata.proto

#include "bfhisdata.pb.h"
#include "bfhisdata.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace bftrader {
namespace bfhisdata {

static const char* BfHisDataService_method_names[] = {
  "/bftrader.bfhisdata.BfHisDataService/InsertTickPack",
  "/bftrader.bfhisdata.BfHisDataService/InsertBar",
  "/bftrader.bfhisdata.BfHisDataService/GetTickPack",
  "/bftrader.bfhisdata.BfHisDataService/GetBar",
};

std::unique_ptr< BfHisDataService::Stub> BfHisDataService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< BfHisDataService::Stub> stub(new BfHisDataService::Stub(channel));
  return stub;
}

BfHisDataService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_InsertTickPack_(BfHisDataService_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_InsertBar_(BfHisDataService_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTickPack_(BfHisDataService_method_names[2], ::grpc::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetBar_(BfHisDataService_method_names[3], ::grpc::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status BfHisDataService::Stub::InsertTickPack(::grpc::ClientContext* context, const ::bftrader::BfTickPackData& request, ::bftrader::BfVoid* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_InsertTickPack_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bftrader::BfVoid>* BfHisDataService::Stub::AsyncInsertTickPackRaw(::grpc::ClientContext* context, const ::bftrader::BfTickPackData& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::bftrader::BfVoid>(channel_.get(), cq, rpcmethod_InsertTickPack_, context, request);
}

::grpc::Status BfHisDataService::Stub::InsertBar(::grpc::ClientContext* context, const ::bftrader::BfBarData& request, ::bftrader::BfVoid* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_InsertBar_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bftrader::BfVoid>* BfHisDataService::Stub::AsyncInsertBarRaw(::grpc::ClientContext* context, const ::bftrader::BfBarData& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::bftrader::BfVoid>(channel_.get(), cq, rpcmethod_InsertBar_, context, request);
}

::grpc::ClientReader< ::bftrader::BfTickPackData>* BfHisDataService::Stub::GetTickPackRaw(::grpc::ClientContext* context, const ::bftrader::BfGetTickPackReq& request) {
  return new ::grpc::ClientReader< ::bftrader::BfTickPackData>(channel_.get(), rpcmethod_GetTickPack_, context, request);
}

::grpc::ClientAsyncReader< ::bftrader::BfTickPackData>* BfHisDataService::Stub::AsyncGetTickPackRaw(::grpc::ClientContext* context, const ::bftrader::BfGetTickPackReq& request, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncReader< ::bftrader::BfTickPackData>(channel_.get(), cq, rpcmethod_GetTickPack_, context, request, tag);
}

::grpc::ClientReader< ::bftrader::BfBarData>* BfHisDataService::Stub::GetBarRaw(::grpc::ClientContext* context, const ::bftrader::BfGetBarReq& request) {
  return new ::grpc::ClientReader< ::bftrader::BfBarData>(channel_.get(), rpcmethod_GetBar_, context, request);
}

::grpc::ClientAsyncReader< ::bftrader::BfBarData>* BfHisDataService::Stub::AsyncGetBarRaw(::grpc::ClientContext* context, const ::bftrader::BfGetBarReq& request, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncReader< ::bftrader::BfBarData>(channel_.get(), cq, rpcmethod_GetBar_, context, request, tag);
}

BfHisDataService::Service::Service() {
  (void)BfHisDataService_method_names;
  AddMethod(new ::grpc::RpcServiceMethod(
      BfHisDataService_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< BfHisDataService::Service, ::bftrader::BfTickPackData, ::bftrader::BfVoid>(
          std::mem_fn(&BfHisDataService::Service::InsertTickPack), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      BfHisDataService_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< BfHisDataService::Service, ::bftrader::BfBarData, ::bftrader::BfVoid>(
          std::mem_fn(&BfHisDataService::Service::InsertBar), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      BfHisDataService_method_names[2],
      ::grpc::RpcMethod::SERVER_STREAMING,
      new ::grpc::ServerStreamingHandler< BfHisDataService::Service, ::bftrader::BfGetTickPackReq, ::bftrader::BfTickPackData>(
          std::mem_fn(&BfHisDataService::Service::GetTickPack), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      BfHisDataService_method_names[3],
      ::grpc::RpcMethod::SERVER_STREAMING,
      new ::grpc::ServerStreamingHandler< BfHisDataService::Service, ::bftrader::BfGetBarReq, ::bftrader::BfBarData>(
          std::mem_fn(&BfHisDataService::Service::GetBar), this)));
}

BfHisDataService::Service::~Service() {
}

::grpc::Status BfHisDataService::Service::InsertTickPack(::grpc::ServerContext* context, const ::bftrader::BfTickPackData* request, ::bftrader::BfVoid* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BfHisDataService::Service::InsertBar(::grpc::ServerContext* context, const ::bftrader::BfBarData* request, ::bftrader::BfVoid* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BfHisDataService::Service::GetTickPack(::grpc::ServerContext* context, const ::bftrader::BfGetTickPackReq* request, ::grpc::ServerWriter< ::bftrader::BfTickPackData>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BfHisDataService::Service::GetBar(::grpc::ServerContext* context, const ::bftrader::BfGetBarReq* request, ::grpc::ServerWriter< ::bftrader::BfBarData>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace bftrader
}  // namespace bfhisdata

