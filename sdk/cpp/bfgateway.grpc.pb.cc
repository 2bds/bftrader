// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: bfgateway.proto

#include "bfgateway.pb.h"
#include "bfgateway.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace bfgateway {

static const char* BfGatewayService_method_names[] = {
  "/bfgateway.BfGatewayService/Ping",
  "/bfgateway.BfGatewayService/ConnectPush",
  "/bfgateway.BfGatewayService/DisconnectPush",
  "/bfgateway.BfGatewayService/GetContract",
  "/bfgateway.BfGatewayService/SendOrder",
  "/bfgateway.BfGatewayService/CancelOrder",
  "/bfgateway.BfGatewayService/QueryAccount",
  "/bfgateway.BfGatewayService/QueryPosition",
};

std::unique_ptr< BfGatewayService::Stub> BfGatewayService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< BfGatewayService::Stub> stub(new BfGatewayService::Stub(channel));
  return stub;
}

BfGatewayService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Ping_(BfGatewayService_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ConnectPush_(BfGatewayService_method_names[1], ::grpc::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_DisconnectPush_(BfGatewayService_method_names[2], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetContract_(BfGatewayService_method_names[3], ::grpc::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SendOrder_(BfGatewayService_method_names[4], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CancelOrder_(BfGatewayService_method_names[5], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_QueryAccount_(BfGatewayService_method_names[6], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_QueryPosition_(BfGatewayService_method_names[7], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status BfGatewayService::Stub::Ping(::grpc::ClientContext* context, const ::bfgateway::BfPingData& request, ::bfgateway::BfPingData* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Ping_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bfgateway::BfPingData>* BfGatewayService::Stub::AsyncPingRaw(::grpc::ClientContext* context, const ::bfgateway::BfPingData& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::bfgateway::BfPingData>(channel_.get(), cq, rpcmethod_Ping_, context, request);
}

::grpc::ClientReader< ::google::protobuf::Any>* BfGatewayService::Stub::ConnectPushRaw(::grpc::ClientContext* context, const ::bfgateway::BfConnectPushReq& request) {
  return new ::grpc::ClientReader< ::google::protobuf::Any>(channel_.get(), rpcmethod_ConnectPush_, context, request);
}

::grpc::ClientAsyncReader< ::google::protobuf::Any>* BfGatewayService::Stub::AsyncConnectPushRaw(::grpc::ClientContext* context, const ::bfgateway::BfConnectPushReq& request, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncReader< ::google::protobuf::Any>(channel_.get(), cq, rpcmethod_ConnectPush_, context, request, tag);
}

::grpc::Status BfGatewayService::Stub::DisconnectPush(::grpc::ClientContext* context, const ::bfgateway::BfVoid& request, ::bfgateway::BfVoid* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_DisconnectPush_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bfgateway::BfVoid>* BfGatewayService::Stub::AsyncDisconnectPushRaw(::grpc::ClientContext* context, const ::bfgateway::BfVoid& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::bfgateway::BfVoid>(channel_.get(), cq, rpcmethod_DisconnectPush_, context, request);
}

::grpc::ClientReader< ::bfgateway::BfContractData>* BfGatewayService::Stub::GetContractRaw(::grpc::ClientContext* context, const ::bfgateway::BfGetContractReq& request) {
  return new ::grpc::ClientReader< ::bfgateway::BfContractData>(channel_.get(), rpcmethod_GetContract_, context, request);
}

::grpc::ClientAsyncReader< ::bfgateway::BfContractData>* BfGatewayService::Stub::AsyncGetContractRaw(::grpc::ClientContext* context, const ::bfgateway::BfGetContractReq& request, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncReader< ::bfgateway::BfContractData>(channel_.get(), cq, rpcmethod_GetContract_, context, request, tag);
}

::grpc::Status BfGatewayService::Stub::SendOrder(::grpc::ClientContext* context, const ::bfgateway::BfSendOrderReq& request, ::bfgateway::BfSendOrderResp* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_SendOrder_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bfgateway::BfSendOrderResp>* BfGatewayService::Stub::AsyncSendOrderRaw(::grpc::ClientContext* context, const ::bfgateway::BfSendOrderReq& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::bfgateway::BfSendOrderResp>(channel_.get(), cq, rpcmethod_SendOrder_, context, request);
}

::grpc::Status BfGatewayService::Stub::CancelOrder(::grpc::ClientContext* context, const ::bfgateway::BfCancelOrderReq& request, ::bfgateway::BfVoid* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_CancelOrder_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bfgateway::BfVoid>* BfGatewayService::Stub::AsyncCancelOrderRaw(::grpc::ClientContext* context, const ::bfgateway::BfCancelOrderReq& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::bfgateway::BfVoid>(channel_.get(), cq, rpcmethod_CancelOrder_, context, request);
}

::grpc::Status BfGatewayService::Stub::QueryAccount(::grpc::ClientContext* context, const ::bfgateway::BfVoid& request, ::bfgateway::BfVoid* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_QueryAccount_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bfgateway::BfVoid>* BfGatewayService::Stub::AsyncQueryAccountRaw(::grpc::ClientContext* context, const ::bfgateway::BfVoid& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::bfgateway::BfVoid>(channel_.get(), cq, rpcmethod_QueryAccount_, context, request);
}

::grpc::Status BfGatewayService::Stub::QueryPosition(::grpc::ClientContext* context, const ::bfgateway::BfVoid& request, ::bfgateway::BfVoid* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_QueryPosition_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bfgateway::BfVoid>* BfGatewayService::Stub::AsyncQueryPositionRaw(::grpc::ClientContext* context, const ::bfgateway::BfVoid& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::bfgateway::BfVoid>(channel_.get(), cq, rpcmethod_QueryPosition_, context, request);
}

BfGatewayService::Service::Service() {
  (void)BfGatewayService_method_names;
  AddMethod(new ::grpc::RpcServiceMethod(
      BfGatewayService_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< BfGatewayService::Service, ::bfgateway::BfPingData, ::bfgateway::BfPingData>(
          std::mem_fn(&BfGatewayService::Service::Ping), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      BfGatewayService_method_names[1],
      ::grpc::RpcMethod::SERVER_STREAMING,
      new ::grpc::ServerStreamingHandler< BfGatewayService::Service, ::bfgateway::BfConnectPushReq, ::google::protobuf::Any>(
          std::mem_fn(&BfGatewayService::Service::ConnectPush), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      BfGatewayService_method_names[2],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< BfGatewayService::Service, ::bfgateway::BfVoid, ::bfgateway::BfVoid>(
          std::mem_fn(&BfGatewayService::Service::DisconnectPush), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      BfGatewayService_method_names[3],
      ::grpc::RpcMethod::SERVER_STREAMING,
      new ::grpc::ServerStreamingHandler< BfGatewayService::Service, ::bfgateway::BfGetContractReq, ::bfgateway::BfContractData>(
          std::mem_fn(&BfGatewayService::Service::GetContract), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      BfGatewayService_method_names[4],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< BfGatewayService::Service, ::bfgateway::BfSendOrderReq, ::bfgateway::BfSendOrderResp>(
          std::mem_fn(&BfGatewayService::Service::SendOrder), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      BfGatewayService_method_names[5],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< BfGatewayService::Service, ::bfgateway::BfCancelOrderReq, ::bfgateway::BfVoid>(
          std::mem_fn(&BfGatewayService::Service::CancelOrder), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      BfGatewayService_method_names[6],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< BfGatewayService::Service, ::bfgateway::BfVoid, ::bfgateway::BfVoid>(
          std::mem_fn(&BfGatewayService::Service::QueryAccount), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      BfGatewayService_method_names[7],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< BfGatewayService::Service, ::bfgateway::BfVoid, ::bfgateway::BfVoid>(
          std::mem_fn(&BfGatewayService::Service::QueryPosition), this)));
}

BfGatewayService::Service::~Service() {
}

::grpc::Status BfGatewayService::Service::Ping(::grpc::ServerContext* context, const ::bfgateway::BfPingData* request, ::bfgateway::BfPingData* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BfGatewayService::Service::ConnectPush(::grpc::ServerContext* context, const ::bfgateway::BfConnectPushReq* request, ::grpc::ServerWriter< ::google::protobuf::Any>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BfGatewayService::Service::DisconnectPush(::grpc::ServerContext* context, const ::bfgateway::BfVoid* request, ::bfgateway::BfVoid* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BfGatewayService::Service::GetContract(::grpc::ServerContext* context, const ::bfgateway::BfGetContractReq* request, ::grpc::ServerWriter< ::bfgateway::BfContractData>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BfGatewayService::Service::SendOrder(::grpc::ServerContext* context, const ::bfgateway::BfSendOrderReq* request, ::bfgateway::BfSendOrderResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BfGatewayService::Service::CancelOrder(::grpc::ServerContext* context, const ::bfgateway::BfCancelOrderReq* request, ::bfgateway::BfVoid* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BfGatewayService::Service::QueryAccount(::grpc::ServerContext* context, const ::bfgateway::BfVoid* request, ::bfgateway::BfVoid* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BfGatewayService::Service::QueryPosition(::grpc::ServerContext* context, const ::bfgateway::BfVoid* request, ::bfgateway::BfVoid* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace bfgateway

