// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bfcta.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "bfcta.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace bfcta {

namespace {

const ::google::protobuf::Descriptor* BfModelData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BfModelData_reflection_ = NULL;
const ::google::protobuf::Descriptor* BfRobotData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BfRobotData_reflection_ = NULL;
const ::google::protobuf::Descriptor* BfGatewayData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BfGatewayData_reflection_ = NULL;
const ::google::protobuf::Descriptor* BfOrderExData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BfOrderExData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BfModelLangType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_bfcta_2eproto() {
  protobuf_AddDesc_bfcta_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "bfcta.proto");
  GOOGLE_CHECK(file != NULL);
  BfModelData_descriptor_ = file->message_type(0);
  static const int BfModelData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfModelData, modelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfModelData, langtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfModelData, path_),
  };
  BfModelData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BfModelData_descriptor_,
      BfModelData::default_instance_,
      BfModelData_offsets_,
      -1,
      -1,
      -1,
      sizeof(BfModelData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfModelData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfModelData, _is_default_instance_));
  BfRobotData_descriptor_ = file->message_type(1);
  static const int BfRobotData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfRobotData, robotid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfRobotData, modelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfRobotData, gatewayid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfRobotData, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfRobotData, exchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfRobotData, status_),
  };
  BfRobotData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BfRobotData_descriptor_,
      BfRobotData::default_instance_,
      BfRobotData_offsets_,
      -1,
      -1,
      -1,
      sizeof(BfRobotData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfRobotData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfRobotData, _is_default_instance_));
  BfGatewayData_descriptor_ = file->message_type(2);
  static const int BfGatewayData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfGatewayData, gatewayid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfGatewayData, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfGatewayData, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfGatewayData, status_),
  };
  BfGatewayData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BfGatewayData_descriptor_,
      BfGatewayData::default_instance_,
      BfGatewayData_offsets_,
      -1,
      -1,
      -1,
      sizeof(BfGatewayData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfGatewayData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfGatewayData, _is_default_instance_));
  BfOrderExData_descriptor_ = file->message_type(3);
  static const int BfOrderExData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfOrderExData, bforderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfOrderExData, robotid_),
  };
  BfOrderExData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BfOrderExData_descriptor_,
      BfOrderExData::default_instance_,
      BfOrderExData_offsets_,
      -1,
      -1,
      -1,
      sizeof(BfOrderExData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfOrderExData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BfOrderExData, _is_default_instance_));
  BfModelLangType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_bfcta_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BfModelData_descriptor_, &BfModelData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BfRobotData_descriptor_, &BfRobotData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BfGatewayData_descriptor_, &BfGatewayData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BfOrderExData_descriptor_, &BfOrderExData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_bfcta_2eproto() {
  delete BfModelData::default_instance_;
  delete BfModelData_reflection_;
  delete BfRobotData::default_instance_;
  delete BfRobotData_reflection_;
  delete BfGatewayData::default_instance_;
  delete BfGatewayData_reflection_;
  delete BfOrderExData::default_instance_;
  delete BfOrderExData_reflection_;
}

void protobuf_AddDesc_bfcta_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::bfgateway::protobuf_AddDesc_bfgateway_2eproto();
  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fany_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013bfcta.proto\022\005bfcta\032\017bfgateway.proto\032\031g"
    "oogle/protobuf/any.proto\"V\n\013BfModelData\022"
    "\017\n\007modelId\030\001 \001(\t\022(\n\010langType\030\002 \001(\0162\026.bfc"
    "ta.BfModelLangType\022\014\n\004path\030\003 \001(\t\"t\n\013BfRo"
    "botData\022\017\n\007robotId\030\001 \001(\t\022\017\n\007modelId\030\002 \001("
    "\t\022\021\n\tgatewayId\030\003 \001(\t\022\016\n\006symbol\030\004 \001(\t\022\020\n\010"
    "exchange\030\005 \001(\t\022\016\n\006status\030\006 \001(\t\"L\n\rBfGate"
    "wayData\022\021\n\tgatewayId\030\001 \001(\t\022\n\n\002ip\030\002 \001(\t\022\014"
    "\n\004port\030\003 \001(\005\022\016\n\006status\030\004 \001(\t\"3\n\rBfOrderE"
    "xData\022\021\n\tbfOrderId\030\001 \001(\t\022\017\n\007robotId\030\002 \001("
    "\t*\211\001\n\017BfModelLangType\022\025\n\021MODELLANG_UNKNO"
    "WN\020\000\022\032\n\026MODELLANG_PYTHONSCRIPT\020\001\022\027\n\023MODE"
    "LLANG_GOLANGEXE\020\002\022\024\n\020MODELLANG_CPPEXE\020\003\022"
    "\024\n\020MODELLANG_CPPDLL\020\0042\375\002\n\014BfCtaService\022<"
    "\n\007Connect\022\027.bfgateway.BfConnectReq\032\024.goo"
    "gle.protobuf.Any\"\0000\001\0224\n\nDisconnect\022\021.bfg"
    "ateway.BfVoid\032\021.bfgateway.BfVoid\"\000\0226\n\004Pi"
    "ng\022\025.bfgateway.BfPingData\032\025.bfgateway.Bf"
    "PingData\"\000\022:\n\014GetRobotInfo\022\023.bfgateway.B"
    "fKvData\032\023.bfgateway.BfKvData\"\000\022D\n\tSendOr"
    "der\022\031.bfgateway.BfSendOrderReq\032\032.bfgatew"
    "ay.BfSendOrderResp\"\000\022\?\n\013CancelOrder\022\033.bf"
    "gateway.BfCancelOrderReq\032\021.bfgateway.BfV"
    "oid\"\000B%Z#github.com/sunwangme/bfgo/api/b"
    "fctab\006proto3", 972);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "bfcta.proto", &protobuf_RegisterTypes);
  BfModelData::default_instance_ = new BfModelData();
  BfRobotData::default_instance_ = new BfRobotData();
  BfGatewayData::default_instance_ = new BfGatewayData();
  BfOrderExData::default_instance_ = new BfOrderExData();
  BfModelData::default_instance_->InitAsDefaultInstance();
  BfRobotData::default_instance_->InitAsDefaultInstance();
  BfGatewayData::default_instance_->InitAsDefaultInstance();
  BfOrderExData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_bfcta_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_bfcta_2eproto {
  StaticDescriptorInitializer_bfcta_2eproto() {
    protobuf_AddDesc_bfcta_2eproto();
  }
} static_descriptor_initializer_bfcta_2eproto_;
const ::google::protobuf::EnumDescriptor* BfModelLangType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BfModelLangType_descriptor_;
}
bool BfModelLangType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BfModelData::kModelIdFieldNumber;
const int BfModelData::kLangTypeFieldNumber;
const int BfModelData::kPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BfModelData::BfModelData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bfcta.BfModelData)
}

void BfModelData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BfModelData::BfModelData(const BfModelData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bfcta.BfModelData)
}

void BfModelData::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  modelid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  langtype_ = 0;
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

BfModelData::~BfModelData() {
  // @@protoc_insertion_point(destructor:bfcta.BfModelData)
  SharedDtor();
}

void BfModelData::SharedDtor() {
  modelid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BfModelData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BfModelData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BfModelData_descriptor_;
}

const BfModelData& BfModelData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bfcta_2eproto();
  return *default_instance_;
}

BfModelData* BfModelData::default_instance_ = NULL;

BfModelData* BfModelData::New(::google::protobuf::Arena* arena) const {
  BfModelData* n = new BfModelData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BfModelData::Clear() {
// @@protoc_insertion_point(message_clear_start:bfcta.BfModelData)
  modelid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  langtype_ = 0;
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool BfModelData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bfcta.BfModelData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string modelId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_modelid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->modelid().data(), this->modelid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bfcta.BfModelData.modelId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_langType;
        break;
      }

      // optional .bfcta.BfModelLangType langType = 2;
      case 2: {
        if (tag == 16) {
         parse_langType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_langtype(static_cast< ::bfcta::BfModelLangType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_path;
        break;
      }

      // optional string path = 3;
      case 3: {
        if (tag == 26) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bfcta.BfModelData.path"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bfcta.BfModelData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bfcta.BfModelData)
  return false;
#undef DO_
}

void BfModelData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bfcta.BfModelData)
  // optional string modelId = 1;
  if (this->modelid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->modelid().data(), this->modelid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bfcta.BfModelData.modelId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->modelid(), output);
  }

  // optional .bfcta.BfModelLangType langType = 2;
  if (this->langtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->langtype(), output);
  }

  // optional string path = 3;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bfcta.BfModelData.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->path(), output);
  }

  // @@protoc_insertion_point(serialize_end:bfcta.BfModelData)
}

::google::protobuf::uint8* BfModelData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bfcta.BfModelData)
  // optional string modelId = 1;
  if (this->modelid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->modelid().data(), this->modelid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bfcta.BfModelData.modelId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->modelid(), target);
  }

  // optional .bfcta.BfModelLangType langType = 2;
  if (this->langtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->langtype(), target);
  }

  // optional string path = 3;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bfcta.BfModelData.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->path(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:bfcta.BfModelData)
  return target;
}

int BfModelData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:bfcta.BfModelData)
  int total_size = 0;

  // optional string modelId = 1;
  if (this->modelid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->modelid());
  }

  // optional .bfcta.BfModelLangType langType = 2;
  if (this->langtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->langtype());
  }

  // optional string path = 3;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BfModelData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bfcta.BfModelData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BfModelData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BfModelData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bfcta.BfModelData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bfcta.BfModelData)
    MergeFrom(*source);
  }
}

void BfModelData::MergeFrom(const BfModelData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bfcta.BfModelData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.modelid().size() > 0) {

    modelid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.modelid_);
  }
  if (from.langtype() != 0) {
    set_langtype(from.langtype());
  }
  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
}

void BfModelData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bfcta.BfModelData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BfModelData::CopyFrom(const BfModelData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bfcta.BfModelData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BfModelData::IsInitialized() const {

  return true;
}

void BfModelData::Swap(BfModelData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BfModelData::InternalSwap(BfModelData* other) {
  modelid_.Swap(&other->modelid_);
  std::swap(langtype_, other->langtype_);
  path_.Swap(&other->path_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BfModelData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BfModelData_descriptor_;
  metadata.reflection = BfModelData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BfModelData

// optional string modelId = 1;
void BfModelData::clear_modelid() {
  modelid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& BfModelData::modelid() const {
  // @@protoc_insertion_point(field_get:bfcta.BfModelData.modelId)
  return modelid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfModelData::set_modelid(const ::std::string& value) {
  
  modelid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bfcta.BfModelData.modelId)
}
 void BfModelData::set_modelid(const char* value) {
  
  modelid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bfcta.BfModelData.modelId)
}
 void BfModelData::set_modelid(const char* value, size_t size) {
  
  modelid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bfcta.BfModelData.modelId)
}
 ::std::string* BfModelData::mutable_modelid() {
  
  // @@protoc_insertion_point(field_mutable:bfcta.BfModelData.modelId)
  return modelid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BfModelData::release_modelid() {
  // @@protoc_insertion_point(field_release:bfcta.BfModelData.modelId)
  
  return modelid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfModelData::set_allocated_modelid(::std::string* modelid) {
  if (modelid != NULL) {
    
  } else {
    
  }
  modelid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), modelid);
  // @@protoc_insertion_point(field_set_allocated:bfcta.BfModelData.modelId)
}

// optional .bfcta.BfModelLangType langType = 2;
void BfModelData::clear_langtype() {
  langtype_ = 0;
}
 ::bfcta::BfModelLangType BfModelData::langtype() const {
  // @@protoc_insertion_point(field_get:bfcta.BfModelData.langType)
  return static_cast< ::bfcta::BfModelLangType >(langtype_);
}
 void BfModelData::set_langtype(::bfcta::BfModelLangType value) {
  
  langtype_ = value;
  // @@protoc_insertion_point(field_set:bfcta.BfModelData.langType)
}

// optional string path = 3;
void BfModelData::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& BfModelData::path() const {
  // @@protoc_insertion_point(field_get:bfcta.BfModelData.path)
  return path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfModelData::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bfcta.BfModelData.path)
}
 void BfModelData::set_path(const char* value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bfcta.BfModelData.path)
}
 void BfModelData::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bfcta.BfModelData.path)
}
 ::std::string* BfModelData::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:bfcta.BfModelData.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BfModelData::release_path() {
  // @@protoc_insertion_point(field_release:bfcta.BfModelData.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfModelData::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:bfcta.BfModelData.path)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BfRobotData::kRobotIdFieldNumber;
const int BfRobotData::kModelIdFieldNumber;
const int BfRobotData::kGatewayIdFieldNumber;
const int BfRobotData::kSymbolFieldNumber;
const int BfRobotData::kExchangeFieldNumber;
const int BfRobotData::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BfRobotData::BfRobotData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bfcta.BfRobotData)
}

void BfRobotData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BfRobotData::BfRobotData(const BfRobotData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bfcta.BfRobotData)
}

void BfRobotData::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  robotid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  modelid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gatewayid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

BfRobotData::~BfRobotData() {
  // @@protoc_insertion_point(destructor:bfcta.BfRobotData)
  SharedDtor();
}

void BfRobotData::SharedDtor() {
  robotid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  modelid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gatewayid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BfRobotData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BfRobotData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BfRobotData_descriptor_;
}

const BfRobotData& BfRobotData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bfcta_2eproto();
  return *default_instance_;
}

BfRobotData* BfRobotData::default_instance_ = NULL;

BfRobotData* BfRobotData::New(::google::protobuf::Arena* arena) const {
  BfRobotData* n = new BfRobotData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BfRobotData::Clear() {
// @@protoc_insertion_point(message_clear_start:bfcta.BfRobotData)
  robotid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  modelid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gatewayid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool BfRobotData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bfcta.BfRobotData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string robotId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_robotid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->robotid().data(), this->robotid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bfcta.BfRobotData.robotId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_modelId;
        break;
      }

      // optional string modelId = 2;
      case 2: {
        if (tag == 18) {
         parse_modelId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_modelid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->modelid().data(), this->modelid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bfcta.BfRobotData.modelId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_gatewayId;
        break;
      }

      // optional string gatewayId = 3;
      case 3: {
        if (tag == 26) {
         parse_gatewayId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gatewayid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gatewayid().data(), this->gatewayid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bfcta.BfRobotData.gatewayId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_symbol;
        break;
      }

      // optional string symbol = 4;
      case 4: {
        if (tag == 34) {
         parse_symbol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bfcta.BfRobotData.symbol"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_exchange;
        break;
      }

      // optional string exchange = 5;
      case 5: {
        if (tag == 42) {
         parse_exchange:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exchange().data(), this->exchange().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bfcta.BfRobotData.exchange"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_status;
        break;
      }

      // optional string status = 6;
      case 6: {
        if (tag == 50) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->status().data(), this->status().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bfcta.BfRobotData.status"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bfcta.BfRobotData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bfcta.BfRobotData)
  return false;
#undef DO_
}

void BfRobotData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bfcta.BfRobotData)
  // optional string robotId = 1;
  if (this->robotid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->robotid().data(), this->robotid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bfcta.BfRobotData.robotId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->robotid(), output);
  }

  // optional string modelId = 2;
  if (this->modelid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->modelid().data(), this->modelid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bfcta.BfRobotData.modelId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->modelid(), output);
  }

  // optional string gatewayId = 3;
  if (this->gatewayid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gatewayid().data(), this->gatewayid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bfcta.BfRobotData.gatewayId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->gatewayid(), output);
  }

  // optional string symbol = 4;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bfcta.BfRobotData.symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->symbol(), output);
  }

  // optional string exchange = 5;
  if (this->exchange().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bfcta.BfRobotData.exchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->exchange(), output);
  }

  // optional string status = 6;
  if (this->status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bfcta.BfRobotData.status");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->status(), output);
  }

  // @@protoc_insertion_point(serialize_end:bfcta.BfRobotData)
}

::google::protobuf::uint8* BfRobotData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bfcta.BfRobotData)
  // optional string robotId = 1;
  if (this->robotid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->robotid().data(), this->robotid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bfcta.BfRobotData.robotId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->robotid(), target);
  }

  // optional string modelId = 2;
  if (this->modelid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->modelid().data(), this->modelid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bfcta.BfRobotData.modelId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->modelid(), target);
  }

  // optional string gatewayId = 3;
  if (this->gatewayid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gatewayid().data(), this->gatewayid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bfcta.BfRobotData.gatewayId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->gatewayid(), target);
  }

  // optional string symbol = 4;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bfcta.BfRobotData.symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->symbol(), target);
  }

  // optional string exchange = 5;
  if (this->exchange().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange().data(), this->exchange().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bfcta.BfRobotData.exchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->exchange(), target);
  }

  // optional string status = 6;
  if (this->status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bfcta.BfRobotData.status");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->status(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:bfcta.BfRobotData)
  return target;
}

int BfRobotData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:bfcta.BfRobotData)
  int total_size = 0;

  // optional string robotId = 1;
  if (this->robotid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->robotid());
  }

  // optional string modelId = 2;
  if (this->modelid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->modelid());
  }

  // optional string gatewayId = 3;
  if (this->gatewayid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gatewayid());
  }

  // optional string symbol = 4;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->symbol());
  }

  // optional string exchange = 5;
  if (this->exchange().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchange());
  }

  // optional string status = 6;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->status());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BfRobotData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bfcta.BfRobotData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BfRobotData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BfRobotData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bfcta.BfRobotData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bfcta.BfRobotData)
    MergeFrom(*source);
  }
}

void BfRobotData::MergeFrom(const BfRobotData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bfcta.BfRobotData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.robotid().size() > 0) {

    robotid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.robotid_);
  }
  if (from.modelid().size() > 0) {

    modelid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.modelid_);
  }
  if (from.gatewayid().size() > 0) {

    gatewayid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gatewayid_);
  }
  if (from.symbol().size() > 0) {

    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  if (from.exchange().size() > 0) {

    exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
  }
  if (from.status().size() > 0) {

    status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
}

void BfRobotData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bfcta.BfRobotData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BfRobotData::CopyFrom(const BfRobotData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bfcta.BfRobotData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BfRobotData::IsInitialized() const {

  return true;
}

void BfRobotData::Swap(BfRobotData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BfRobotData::InternalSwap(BfRobotData* other) {
  robotid_.Swap(&other->robotid_);
  modelid_.Swap(&other->modelid_);
  gatewayid_.Swap(&other->gatewayid_);
  symbol_.Swap(&other->symbol_);
  exchange_.Swap(&other->exchange_);
  status_.Swap(&other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BfRobotData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BfRobotData_descriptor_;
  metadata.reflection = BfRobotData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BfRobotData

// optional string robotId = 1;
void BfRobotData::clear_robotid() {
  robotid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& BfRobotData::robotid() const {
  // @@protoc_insertion_point(field_get:bfcta.BfRobotData.robotId)
  return robotid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfRobotData::set_robotid(const ::std::string& value) {
  
  robotid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bfcta.BfRobotData.robotId)
}
 void BfRobotData::set_robotid(const char* value) {
  
  robotid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bfcta.BfRobotData.robotId)
}
 void BfRobotData::set_robotid(const char* value, size_t size) {
  
  robotid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bfcta.BfRobotData.robotId)
}
 ::std::string* BfRobotData::mutable_robotid() {
  
  // @@protoc_insertion_point(field_mutable:bfcta.BfRobotData.robotId)
  return robotid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BfRobotData::release_robotid() {
  // @@protoc_insertion_point(field_release:bfcta.BfRobotData.robotId)
  
  return robotid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfRobotData::set_allocated_robotid(::std::string* robotid) {
  if (robotid != NULL) {
    
  } else {
    
  }
  robotid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), robotid);
  // @@protoc_insertion_point(field_set_allocated:bfcta.BfRobotData.robotId)
}

// optional string modelId = 2;
void BfRobotData::clear_modelid() {
  modelid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& BfRobotData::modelid() const {
  // @@protoc_insertion_point(field_get:bfcta.BfRobotData.modelId)
  return modelid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfRobotData::set_modelid(const ::std::string& value) {
  
  modelid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bfcta.BfRobotData.modelId)
}
 void BfRobotData::set_modelid(const char* value) {
  
  modelid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bfcta.BfRobotData.modelId)
}
 void BfRobotData::set_modelid(const char* value, size_t size) {
  
  modelid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bfcta.BfRobotData.modelId)
}
 ::std::string* BfRobotData::mutable_modelid() {
  
  // @@protoc_insertion_point(field_mutable:bfcta.BfRobotData.modelId)
  return modelid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BfRobotData::release_modelid() {
  // @@protoc_insertion_point(field_release:bfcta.BfRobotData.modelId)
  
  return modelid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfRobotData::set_allocated_modelid(::std::string* modelid) {
  if (modelid != NULL) {
    
  } else {
    
  }
  modelid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), modelid);
  // @@protoc_insertion_point(field_set_allocated:bfcta.BfRobotData.modelId)
}

// optional string gatewayId = 3;
void BfRobotData::clear_gatewayid() {
  gatewayid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& BfRobotData::gatewayid() const {
  // @@protoc_insertion_point(field_get:bfcta.BfRobotData.gatewayId)
  return gatewayid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfRobotData::set_gatewayid(const ::std::string& value) {
  
  gatewayid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bfcta.BfRobotData.gatewayId)
}
 void BfRobotData::set_gatewayid(const char* value) {
  
  gatewayid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bfcta.BfRobotData.gatewayId)
}
 void BfRobotData::set_gatewayid(const char* value, size_t size) {
  
  gatewayid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bfcta.BfRobotData.gatewayId)
}
 ::std::string* BfRobotData::mutable_gatewayid() {
  
  // @@protoc_insertion_point(field_mutable:bfcta.BfRobotData.gatewayId)
  return gatewayid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BfRobotData::release_gatewayid() {
  // @@protoc_insertion_point(field_release:bfcta.BfRobotData.gatewayId)
  
  return gatewayid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfRobotData::set_allocated_gatewayid(::std::string* gatewayid) {
  if (gatewayid != NULL) {
    
  } else {
    
  }
  gatewayid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gatewayid);
  // @@protoc_insertion_point(field_set_allocated:bfcta.BfRobotData.gatewayId)
}

// optional string symbol = 4;
void BfRobotData::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& BfRobotData::symbol() const {
  // @@protoc_insertion_point(field_get:bfcta.BfRobotData.symbol)
  return symbol_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfRobotData::set_symbol(const ::std::string& value) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bfcta.BfRobotData.symbol)
}
 void BfRobotData::set_symbol(const char* value) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bfcta.BfRobotData.symbol)
}
 void BfRobotData::set_symbol(const char* value, size_t size) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bfcta.BfRobotData.symbol)
}
 ::std::string* BfRobotData::mutable_symbol() {
  
  // @@protoc_insertion_point(field_mutable:bfcta.BfRobotData.symbol)
  return symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BfRobotData::release_symbol() {
  // @@protoc_insertion_point(field_release:bfcta.BfRobotData.symbol)
  
  return symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfRobotData::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:bfcta.BfRobotData.symbol)
}

// optional string exchange = 5;
void BfRobotData::clear_exchange() {
  exchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& BfRobotData::exchange() const {
  // @@protoc_insertion_point(field_get:bfcta.BfRobotData.exchange)
  return exchange_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfRobotData::set_exchange(const ::std::string& value) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bfcta.BfRobotData.exchange)
}
 void BfRobotData::set_exchange(const char* value) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bfcta.BfRobotData.exchange)
}
 void BfRobotData::set_exchange(const char* value, size_t size) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bfcta.BfRobotData.exchange)
}
 ::std::string* BfRobotData::mutable_exchange() {
  
  // @@protoc_insertion_point(field_mutable:bfcta.BfRobotData.exchange)
  return exchange_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BfRobotData::release_exchange() {
  // @@protoc_insertion_point(field_release:bfcta.BfRobotData.exchange)
  
  return exchange_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfRobotData::set_allocated_exchange(::std::string* exchange) {
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange);
  // @@protoc_insertion_point(field_set_allocated:bfcta.BfRobotData.exchange)
}

// optional string status = 6;
void BfRobotData::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& BfRobotData::status() const {
  // @@protoc_insertion_point(field_get:bfcta.BfRobotData.status)
  return status_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfRobotData::set_status(const ::std::string& value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bfcta.BfRobotData.status)
}
 void BfRobotData::set_status(const char* value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bfcta.BfRobotData.status)
}
 void BfRobotData::set_status(const char* value, size_t size) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bfcta.BfRobotData.status)
}
 ::std::string* BfRobotData::mutable_status() {
  
  // @@protoc_insertion_point(field_mutable:bfcta.BfRobotData.status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BfRobotData::release_status() {
  // @@protoc_insertion_point(field_release:bfcta.BfRobotData.status)
  
  return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfRobotData::set_allocated_status(::std::string* status) {
  if (status != NULL) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:bfcta.BfRobotData.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BfGatewayData::kGatewayIdFieldNumber;
const int BfGatewayData::kIpFieldNumber;
const int BfGatewayData::kPortFieldNumber;
const int BfGatewayData::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BfGatewayData::BfGatewayData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bfcta.BfGatewayData)
}

void BfGatewayData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BfGatewayData::BfGatewayData(const BfGatewayData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bfcta.BfGatewayData)
}

void BfGatewayData::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gatewayid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
  status_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

BfGatewayData::~BfGatewayData() {
  // @@protoc_insertion_point(destructor:bfcta.BfGatewayData)
  SharedDtor();
}

void BfGatewayData::SharedDtor() {
  gatewayid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BfGatewayData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BfGatewayData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BfGatewayData_descriptor_;
}

const BfGatewayData& BfGatewayData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bfcta_2eproto();
  return *default_instance_;
}

BfGatewayData* BfGatewayData::default_instance_ = NULL;

BfGatewayData* BfGatewayData::New(::google::protobuf::Arena* arena) const {
  BfGatewayData* n = new BfGatewayData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BfGatewayData::Clear() {
// @@protoc_insertion_point(message_clear_start:bfcta.BfGatewayData)
  gatewayid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool BfGatewayData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bfcta.BfGatewayData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string gatewayId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gatewayid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gatewayid().data(), this->gatewayid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bfcta.BfGatewayData.gatewayId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }

      // optional string ip = 2;
      case 2: {
        if (tag == 18) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bfcta.BfGatewayData.ip"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }

      // optional int32 port = 3;
      case 3: {
        if (tag == 24) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_status;
        break;
      }

      // optional string status = 4;
      case 4: {
        if (tag == 34) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->status().data(), this->status().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bfcta.BfGatewayData.status"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bfcta.BfGatewayData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bfcta.BfGatewayData)
  return false;
#undef DO_
}

void BfGatewayData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bfcta.BfGatewayData)
  // optional string gatewayId = 1;
  if (this->gatewayid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gatewayid().data(), this->gatewayid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bfcta.BfGatewayData.gatewayId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->gatewayid(), output);
  }

  // optional string ip = 2;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bfcta.BfGatewayData.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ip(), output);
  }

  // optional int32 port = 3;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->port(), output);
  }

  // optional string status = 4;
  if (this->status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bfcta.BfGatewayData.status");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->status(), output);
  }

  // @@protoc_insertion_point(serialize_end:bfcta.BfGatewayData)
}

::google::protobuf::uint8* BfGatewayData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bfcta.BfGatewayData)
  // optional string gatewayId = 1;
  if (this->gatewayid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gatewayid().data(), this->gatewayid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bfcta.BfGatewayData.gatewayId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gatewayid(), target);
  }

  // optional string ip = 2;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bfcta.BfGatewayData.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  // optional int32 port = 3;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->port(), target);
  }

  // optional string status = 4;
  if (this->status().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bfcta.BfGatewayData.status");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->status(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:bfcta.BfGatewayData)
  return target;
}

int BfGatewayData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:bfcta.BfGatewayData)
  int total_size = 0;

  // optional string gatewayId = 1;
  if (this->gatewayid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gatewayid());
  }

  // optional string ip = 2;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  // optional int32 port = 3;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  // optional string status = 4;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->status());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BfGatewayData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bfcta.BfGatewayData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BfGatewayData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BfGatewayData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bfcta.BfGatewayData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bfcta.BfGatewayData)
    MergeFrom(*source);
  }
}

void BfGatewayData::MergeFrom(const BfGatewayData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bfcta.BfGatewayData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.gatewayid().size() > 0) {

    gatewayid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gatewayid_);
  }
  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
  if (from.status().size() > 0) {

    status_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
}

void BfGatewayData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bfcta.BfGatewayData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BfGatewayData::CopyFrom(const BfGatewayData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bfcta.BfGatewayData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BfGatewayData::IsInitialized() const {

  return true;
}

void BfGatewayData::Swap(BfGatewayData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BfGatewayData::InternalSwap(BfGatewayData* other) {
  gatewayid_.Swap(&other->gatewayid_);
  ip_.Swap(&other->ip_);
  std::swap(port_, other->port_);
  status_.Swap(&other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BfGatewayData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BfGatewayData_descriptor_;
  metadata.reflection = BfGatewayData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BfGatewayData

// optional string gatewayId = 1;
void BfGatewayData::clear_gatewayid() {
  gatewayid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& BfGatewayData::gatewayid() const {
  // @@protoc_insertion_point(field_get:bfcta.BfGatewayData.gatewayId)
  return gatewayid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfGatewayData::set_gatewayid(const ::std::string& value) {
  
  gatewayid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bfcta.BfGatewayData.gatewayId)
}
 void BfGatewayData::set_gatewayid(const char* value) {
  
  gatewayid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bfcta.BfGatewayData.gatewayId)
}
 void BfGatewayData::set_gatewayid(const char* value, size_t size) {
  
  gatewayid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bfcta.BfGatewayData.gatewayId)
}
 ::std::string* BfGatewayData::mutable_gatewayid() {
  
  // @@protoc_insertion_point(field_mutable:bfcta.BfGatewayData.gatewayId)
  return gatewayid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BfGatewayData::release_gatewayid() {
  // @@protoc_insertion_point(field_release:bfcta.BfGatewayData.gatewayId)
  
  return gatewayid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfGatewayData::set_allocated_gatewayid(::std::string* gatewayid) {
  if (gatewayid != NULL) {
    
  } else {
    
  }
  gatewayid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), gatewayid);
  // @@protoc_insertion_point(field_set_allocated:bfcta.BfGatewayData.gatewayId)
}

// optional string ip = 2;
void BfGatewayData::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& BfGatewayData::ip() const {
  // @@protoc_insertion_point(field_get:bfcta.BfGatewayData.ip)
  return ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfGatewayData::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bfcta.BfGatewayData.ip)
}
 void BfGatewayData::set_ip(const char* value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bfcta.BfGatewayData.ip)
}
 void BfGatewayData::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bfcta.BfGatewayData.ip)
}
 ::std::string* BfGatewayData::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:bfcta.BfGatewayData.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BfGatewayData::release_ip() {
  // @@protoc_insertion_point(field_release:bfcta.BfGatewayData.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfGatewayData::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:bfcta.BfGatewayData.ip)
}

// optional int32 port = 3;
void BfGatewayData::clear_port() {
  port_ = 0;
}
 ::google::protobuf::int32 BfGatewayData::port() const {
  // @@protoc_insertion_point(field_get:bfcta.BfGatewayData.port)
  return port_;
}
 void BfGatewayData::set_port(::google::protobuf::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:bfcta.BfGatewayData.port)
}

// optional string status = 4;
void BfGatewayData::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& BfGatewayData::status() const {
  // @@protoc_insertion_point(field_get:bfcta.BfGatewayData.status)
  return status_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfGatewayData::set_status(const ::std::string& value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bfcta.BfGatewayData.status)
}
 void BfGatewayData::set_status(const char* value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bfcta.BfGatewayData.status)
}
 void BfGatewayData::set_status(const char* value, size_t size) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bfcta.BfGatewayData.status)
}
 ::std::string* BfGatewayData::mutable_status() {
  
  // @@protoc_insertion_point(field_mutable:bfcta.BfGatewayData.status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BfGatewayData::release_status() {
  // @@protoc_insertion_point(field_release:bfcta.BfGatewayData.status)
  
  return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfGatewayData::set_allocated_status(::std::string* status) {
  if (status != NULL) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:bfcta.BfGatewayData.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BfOrderExData::kBfOrderIdFieldNumber;
const int BfOrderExData::kRobotIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BfOrderExData::BfOrderExData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:bfcta.BfOrderExData)
}

void BfOrderExData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BfOrderExData::BfOrderExData(const BfOrderExData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bfcta.BfOrderExData)
}

void BfOrderExData::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  bforderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  robotid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

BfOrderExData::~BfOrderExData() {
  // @@protoc_insertion_point(destructor:bfcta.BfOrderExData)
  SharedDtor();
}

void BfOrderExData::SharedDtor() {
  bforderid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  robotid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BfOrderExData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BfOrderExData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BfOrderExData_descriptor_;
}

const BfOrderExData& BfOrderExData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_bfcta_2eproto();
  return *default_instance_;
}

BfOrderExData* BfOrderExData::default_instance_ = NULL;

BfOrderExData* BfOrderExData::New(::google::protobuf::Arena* arena) const {
  BfOrderExData* n = new BfOrderExData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BfOrderExData::Clear() {
// @@protoc_insertion_point(message_clear_start:bfcta.BfOrderExData)
  bforderid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  robotid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool BfOrderExData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bfcta.BfOrderExData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string bfOrderId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bforderid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bforderid().data(), this->bforderid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bfcta.BfOrderExData.bfOrderId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_robotId;
        break;
      }

      // optional string robotId = 2;
      case 2: {
        if (tag == 18) {
         parse_robotId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_robotid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->robotid().data(), this->robotid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "bfcta.BfOrderExData.robotId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bfcta.BfOrderExData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bfcta.BfOrderExData)
  return false;
#undef DO_
}

void BfOrderExData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bfcta.BfOrderExData)
  // optional string bfOrderId = 1;
  if (this->bforderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bforderid().data(), this->bforderid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bfcta.BfOrderExData.bfOrderId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->bforderid(), output);
  }

  // optional string robotId = 2;
  if (this->robotid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->robotid().data(), this->robotid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bfcta.BfOrderExData.robotId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->robotid(), output);
  }

  // @@protoc_insertion_point(serialize_end:bfcta.BfOrderExData)
}

::google::protobuf::uint8* BfOrderExData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:bfcta.BfOrderExData)
  // optional string bfOrderId = 1;
  if (this->bforderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bforderid().data(), this->bforderid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bfcta.BfOrderExData.bfOrderId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->bforderid(), target);
  }

  // optional string robotId = 2;
  if (this->robotid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->robotid().data(), this->robotid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "bfcta.BfOrderExData.robotId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->robotid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:bfcta.BfOrderExData)
  return target;
}

int BfOrderExData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:bfcta.BfOrderExData)
  int total_size = 0;

  // optional string bfOrderId = 1;
  if (this->bforderid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bforderid());
  }

  // optional string robotId = 2;
  if (this->robotid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->robotid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BfOrderExData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bfcta.BfOrderExData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BfOrderExData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BfOrderExData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bfcta.BfOrderExData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bfcta.BfOrderExData)
    MergeFrom(*source);
  }
}

void BfOrderExData::MergeFrom(const BfOrderExData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bfcta.BfOrderExData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.bforderid().size() > 0) {

    bforderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bforderid_);
  }
  if (from.robotid().size() > 0) {

    robotid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.robotid_);
  }
}

void BfOrderExData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bfcta.BfOrderExData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BfOrderExData::CopyFrom(const BfOrderExData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bfcta.BfOrderExData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BfOrderExData::IsInitialized() const {

  return true;
}

void BfOrderExData::Swap(BfOrderExData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BfOrderExData::InternalSwap(BfOrderExData* other) {
  bforderid_.Swap(&other->bforderid_);
  robotid_.Swap(&other->robotid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BfOrderExData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BfOrderExData_descriptor_;
  metadata.reflection = BfOrderExData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BfOrderExData

// optional string bfOrderId = 1;
void BfOrderExData::clear_bforderid() {
  bforderid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& BfOrderExData::bforderid() const {
  // @@protoc_insertion_point(field_get:bfcta.BfOrderExData.bfOrderId)
  return bforderid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfOrderExData::set_bforderid(const ::std::string& value) {
  
  bforderid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bfcta.BfOrderExData.bfOrderId)
}
 void BfOrderExData::set_bforderid(const char* value) {
  
  bforderid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bfcta.BfOrderExData.bfOrderId)
}
 void BfOrderExData::set_bforderid(const char* value, size_t size) {
  
  bforderid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bfcta.BfOrderExData.bfOrderId)
}
 ::std::string* BfOrderExData::mutable_bforderid() {
  
  // @@protoc_insertion_point(field_mutable:bfcta.BfOrderExData.bfOrderId)
  return bforderid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BfOrderExData::release_bforderid() {
  // @@protoc_insertion_point(field_release:bfcta.BfOrderExData.bfOrderId)
  
  return bforderid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfOrderExData::set_allocated_bforderid(::std::string* bforderid) {
  if (bforderid != NULL) {
    
  } else {
    
  }
  bforderid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bforderid);
  // @@protoc_insertion_point(field_set_allocated:bfcta.BfOrderExData.bfOrderId)
}

// optional string robotId = 2;
void BfOrderExData::clear_robotid() {
  robotid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& BfOrderExData::robotid() const {
  // @@protoc_insertion_point(field_get:bfcta.BfOrderExData.robotId)
  return robotid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfOrderExData::set_robotid(const ::std::string& value) {
  
  robotid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bfcta.BfOrderExData.robotId)
}
 void BfOrderExData::set_robotid(const char* value) {
  
  robotid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bfcta.BfOrderExData.robotId)
}
 void BfOrderExData::set_robotid(const char* value, size_t size) {
  
  robotid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bfcta.BfOrderExData.robotId)
}
 ::std::string* BfOrderExData::mutable_robotid() {
  
  // @@protoc_insertion_point(field_mutable:bfcta.BfOrderExData.robotId)
  return robotid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BfOrderExData::release_robotid() {
  // @@protoc_insertion_point(field_release:bfcta.BfOrderExData.robotId)
  
  return robotid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BfOrderExData::set_allocated_robotid(::std::string* robotid) {
  if (robotid != NULL) {
    
  } else {
    
  }
  robotid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), robotid);
  // @@protoc_insertion_point(field_set_allocated:bfcta.BfOrderExData.robotId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace bfcta

// @@protoc_insertion_point(global_scope)
